
Adc_Task1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000370e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000012e  00800060  0000370e  000037a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  0080018e  0080018e  000038d0  2**0
                  ALLOC
  3 .stab         00002448  00000000  00000000  000038d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000134b  00000000  00000000  00005d18  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  00007063  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  00007223  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  00007437  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  00009a49  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  0000af17  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0000c224  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  0000c404  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  0000c70b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d125  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e0       	ldi	r30, 0x0E	; 14
      68:	f7 e3       	ldi	r31, 0x37	; 55
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 38       	cpi	r26, 0x8E	; 142
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae e8       	ldi	r26, 0x8E	; 142
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 39       	cpi	r26, 0x92	; 146
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a0 15 	call	0x2b40	; 0x2b40 <main>
      8a:	0c 94 85 1b 	jmp	0x370a	; 0x370a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 9b 17 	jmp	0x2f36	; 0x2f36 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e8       	ldi	r26, 0x80	; 128
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 b7 17 	jmp	0x2f6e	; 0x2f6e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 a7 17 	jmp	0x2f4e	; 0x2f4e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 c3 17 	jmp	0x2f86	; 0x2f86 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 a7 17 	jmp	0x2f4e	; 0x2f4e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 c3 17 	jmp	0x2f86	; 0x2f86 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 9b 17 	jmp	0x2f36	; 0x2f36 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e8       	ldi	r24, 0x80	; 128
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 b7 17 	jmp	0x2f6e	; 0x2f6e <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 a3 17 	jmp	0x2f46	; 0x2f46 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e8       	ldi	r22, 0x80	; 128
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 bf 17 	jmp	0x2f7e	; 0x2f7e <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 a7 17 	jmp	0x2f4e	; 0x2f4e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 c3 17 	jmp	0x2f86	; 0x2f86 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 a7 17 	jmp	0x2f4e	; 0x2f4e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 c3 17 	jmp	0x2f86	; 0x2f86 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 a7 17 	jmp	0x2f4e	; 0x2f4e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 c3 17 	jmp	0x2f86	; 0x2f86 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 a4 17 	jmp	0x2f48	; 0x2f48 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 c0 17 	jmp	0x2f80	; 0x2f80 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 ab 17 	jmp	0x2f56	; 0x2f56 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 c7 17 	jmp	0x2f8e	; 0x2f8e <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 a3 17 	jmp	0x2f46	; 0x2f46 <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 bf 17 	jmp	0x2f7e	; 0x2f7e <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	e8 57       	subi	r30, 0x78	; 120
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <Adc_vidInit>:
#include "Adc.h"
#include "avr/io.h"


void Adc_vidInit()
{
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	cd b7       	in	r28, 0x3d	; 61
     ef0:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADMUX,6); // configure vref to avcc
     ef2:	a7 e2       	ldi	r26, 0x27	; 39
     ef4:	b0 e0       	ldi	r27, 0x00	; 0
     ef6:	e7 e2       	ldi	r30, 0x27	; 39
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	80 81       	ld	r24, Z
     efc:	80 64       	ori	r24, 0x40	; 64
     efe:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,7); // enable ADC
     f00:	a6 e2       	ldi	r26, 0x26	; 38
     f02:	b0 e0       	ldi	r27, 0x00	; 0
     f04:	e6 e2       	ldi	r30, 0x26	; 38
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	80 81       	ld	r24, Z
     f0a:	80 68       	ori	r24, 0x80	; 128
     f0c:	8c 93       	st	X, r24
}
     f0e:	cf 91       	pop	r28
     f10:	df 91       	pop	r29
     f12:	08 95       	ret

00000f14 <Adc_enuGetReading>:
Adc_enuErrorStatus Adc_enuGetReading( pu16 Add_pu16Reading )
{
     f14:	df 93       	push	r29
     f16:	cf 93       	push	r28
     f18:	00 d0       	rcall	.+0      	; 0xf1a <Adc_enuGetReading+0x6>
     f1a:	0f 92       	push	r0
     f1c:	cd b7       	in	r28, 0x3d	; 61
     f1e:	de b7       	in	r29, 0x3e	; 62
     f20:	9b 83       	std	Y+3, r25	; 0x03
     f22:	8a 83       	std	Y+2, r24	; 0x02
	Adc_enuErrorStatus Loc_enuError = AdcOk;
     f24:	19 82       	std	Y+1, r1	; 0x01

	if(Add_pu16Reading == NULL)
     f26:	8a 81       	ldd	r24, Y+2	; 0x02
     f28:	9b 81       	ldd	r25, Y+3	; 0x03
     f2a:	00 97       	sbiw	r24, 0x00	; 0
     f2c:	19 f4       	brne	.+6      	; 0xf34 <Adc_enuGetReading+0x20>
	{
		Loc_enuError = AdcNok;
     f2e:	81 e0       	ldi	r24, 0x01	; 1
     f30:	89 83       	std	Y+1, r24	; 0x01
     f32:	2b c0       	rjmp	.+86     	; 0xf8a <Adc_enuGetReading+0x76>
	}
	else
	{
		SET_BIT(ADCSRA,6);
     f34:	a6 e2       	ldi	r26, 0x26	; 38
     f36:	b0 e0       	ldi	r27, 0x00	; 0
     f38:	e6 e2       	ldi	r30, 0x26	; 38
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	80 81       	ld	r24, Z
     f3e:	80 64       	ori	r24, 0x40	; 64
     f40:	8c 93       	st	X, r24
		while(GET_BIT(ADCSRA,4)==0);
     f42:	e6 e2       	ldi	r30, 0x26	; 38
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	80 81       	ld	r24, Z
     f48:	82 95       	swap	r24
     f4a:	8f 70       	andi	r24, 0x0F	; 15
     f4c:	88 2f       	mov	r24, r24
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	81 70       	andi	r24, 0x01	; 1
     f52:	90 70       	andi	r25, 0x00	; 0
     f54:	00 97       	sbiw	r24, 0x00	; 0
     f56:	a9 f3       	breq	.-22     	; 0xf42 <Adc_enuGetReading+0x2e>
		*Add_pu16Reading = ADCL | ((u16)(ADCH)<< 8) ;
     f58:	e4 e2       	ldi	r30, 0x24	; 36
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	28 2f       	mov	r18, r24
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	e5 e2       	ldi	r30, 0x25	; 37
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	80 81       	ld	r24, Z
     f68:	88 2f       	mov	r24, r24
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	98 2f       	mov	r25, r24
     f6e:	88 27       	eor	r24, r24
     f70:	82 2b       	or	r24, r18
     f72:	93 2b       	or	r25, r19
     f74:	ea 81       	ldd	r30, Y+2	; 0x02
     f76:	fb 81       	ldd	r31, Y+3	; 0x03
     f78:	91 83       	std	Z+1, r25	; 0x01
     f7a:	80 83       	st	Z, r24
		SET_BIT(ADCSRA,4);
     f7c:	a6 e2       	ldi	r26, 0x26	; 38
     f7e:	b0 e0       	ldi	r27, 0x00	; 0
     f80:	e6 e2       	ldi	r30, 0x26	; 38
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	80 81       	ld	r24, Z
     f86:	80 61       	ori	r24, 0x10	; 16
     f88:	8c 93       	st	X, r24
	}

	return Loc_enuError;
     f8a:	89 81       	ldd	r24, Y+1	; 0x01
}
     f8c:	0f 90       	pop	r0
     f8e:	0f 90       	pop	r0
     f90:	0f 90       	pop	r0
     f92:	cf 91       	pop	r28
     f94:	df 91       	pop	r29
     f96:	08 95       	ret

00000f98 <DIO_enuWriteChannel>:
#include <avr/io.h>
#include "Dio.h"
#include "Bit_utils.h"

Dio_tenuErrorStatus DIO_enuWriteChannel(u8 Copy_u8ChannelId, u8 Copy_u8ChannelLevel)
{
     f98:	df 93       	push	r29
     f9a:	cf 93       	push	r28
     f9c:	cd b7       	in	r28, 0x3d	; 61
     f9e:	de b7       	in	r29, 0x3e	; 62
     fa0:	27 97       	sbiw	r28, 0x07	; 7
     fa2:	0f b6       	in	r0, 0x3f	; 63
     fa4:	f8 94       	cli
     fa6:	de bf       	out	0x3e, r29	; 62
     fa8:	0f be       	out	0x3f, r0	; 63
     faa:	cd bf       	out	0x3d, r28	; 61
     fac:	8c 83       	std	Y+4, r24	; 0x04
     fae:	6d 83       	std	Y+5, r22	; 0x05
	Dio_tenuErrorStatus Loc_enuReturnStatus = Dio_enuOK;
     fb0:	82 e0       	ldi	r24, 0x02	; 2
     fb2:	8b 83       	std	Y+3, r24	; 0x03
	u8 Loc_u8Port;
	u8 Loc_u8Pin;

	if( Copy_u8ChannelId >= DIO_u8NUMBER_OF_PINS )
     fb4:	8c 81       	ldd	r24, Y+4	; 0x04
     fb6:	80 32       	cpi	r24, 0x20	; 32
     fb8:	10 f0       	brcs	.+4      	; 0xfbe <DIO_enuWriteChannel+0x26>
	{
		Loc_enuReturnStatus = DioChannelIdError;
     fba:	1b 82       	std	Y+3, r1	; 0x03
     fbc:	e2 c0       	rjmp	.+452    	; 0x1182 <DIO_enuWriteChannel+0x1ea>
	}
	else if( ( Copy_u8ChannelLevel != DIO_u8LEVEL_ZERO ) && ( Copy_u8ChannelLevel != DIO_u8LEVEL_ONE ) )
     fbe:	8d 81       	ldd	r24, Y+5	; 0x05
     fc0:	88 23       	and	r24, r24
     fc2:	31 f0       	breq	.+12     	; 0xfd0 <DIO_enuWriteChannel+0x38>
     fc4:	8d 81       	ldd	r24, Y+5	; 0x05
     fc6:	81 30       	cpi	r24, 0x01	; 1
     fc8:	19 f0       	breq	.+6      	; 0xfd0 <DIO_enuWriteChannel+0x38>
	{
		Loc_enuReturnStatus = DioLevelError;
     fca:	81 e0       	ldi	r24, 0x01	; 1
     fcc:	8b 83       	std	Y+3, r24	; 0x03
     fce:	d9 c0       	rjmp	.+434    	; 0x1182 <DIO_enuWriteChannel+0x1ea>
	}
	else
	{
		Loc_u8Port = Copy_u8ChannelId / 8 ;
     fd0:	8c 81       	ldd	r24, Y+4	; 0x04
     fd2:	86 95       	lsr	r24
     fd4:	86 95       	lsr	r24
     fd6:	86 95       	lsr	r24
     fd8:	8a 83       	std	Y+2, r24	; 0x02
		Loc_u8Pin = Copy_u8ChannelId % 8 ;
     fda:	8c 81       	ldd	r24, Y+4	; 0x04
     fdc:	87 70       	andi	r24, 0x07	; 7
     fde:	89 83       	std	Y+1, r24	; 0x01

		switch(Loc_u8Port)
     fe0:	8a 81       	ldd	r24, Y+2	; 0x02
     fe2:	28 2f       	mov	r18, r24
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	3f 83       	std	Y+7, r19	; 0x07
     fe8:	2e 83       	std	Y+6, r18	; 0x06
     fea:	8e 81       	ldd	r24, Y+6	; 0x06
     fec:	9f 81       	ldd	r25, Y+7	; 0x07
     fee:	81 30       	cpi	r24, 0x01	; 1
     ff0:	91 05       	cpc	r25, r1
     ff2:	09 f4       	brne	.+2      	; 0xff6 <DIO_enuWriteChannel+0x5e>
     ff4:	43 c0       	rjmp	.+134    	; 0x107c <DIO_enuWriteChannel+0xe4>
     ff6:	2e 81       	ldd	r18, Y+6	; 0x06
     ff8:	3f 81       	ldd	r19, Y+7	; 0x07
     ffa:	22 30       	cpi	r18, 0x02	; 2
     ffc:	31 05       	cpc	r19, r1
     ffe:	2c f4       	brge	.+10     	; 0x100a <DIO_enuWriteChannel+0x72>
    1000:	8e 81       	ldd	r24, Y+6	; 0x06
    1002:	9f 81       	ldd	r25, Y+7	; 0x07
    1004:	00 97       	sbiw	r24, 0x00	; 0
    1006:	71 f0       	breq	.+28     	; 0x1024 <DIO_enuWriteChannel+0x8c>
    1008:	bc c0       	rjmp	.+376    	; 0x1182 <DIO_enuWriteChannel+0x1ea>
    100a:	2e 81       	ldd	r18, Y+6	; 0x06
    100c:	3f 81       	ldd	r19, Y+7	; 0x07
    100e:	22 30       	cpi	r18, 0x02	; 2
    1010:	31 05       	cpc	r19, r1
    1012:	09 f4       	brne	.+2      	; 0x1016 <DIO_enuWriteChannel+0x7e>
    1014:	5f c0       	rjmp	.+190    	; 0x10d4 <DIO_enuWriteChannel+0x13c>
    1016:	8e 81       	ldd	r24, Y+6	; 0x06
    1018:	9f 81       	ldd	r25, Y+7	; 0x07
    101a:	83 30       	cpi	r24, 0x03	; 3
    101c:	91 05       	cpc	r25, r1
    101e:	09 f4       	brne	.+2      	; 0x1022 <DIO_enuWriteChannel+0x8a>
    1020:	85 c0       	rjmp	.+266    	; 0x112c <DIO_enuWriteChannel+0x194>
    1022:	af c0       	rjmp	.+350    	; 0x1182 <DIO_enuWriteChannel+0x1ea>
		{
			case DIO_u8PORT_A:
			{
				if(Copy_u8ChannelLevel == DIO_u8LEVEL_ONE)
    1024:	8d 81       	ldd	r24, Y+5	; 0x05
    1026:	81 30       	cpi	r24, 0x01	; 1
    1028:	a1 f4       	brne	.+40     	; 0x1052 <DIO_enuWriteChannel+0xba>
				{
					SET_BIT(PORTA,Loc_u8Pin);
    102a:	ab e3       	ldi	r26, 0x3B	; 59
    102c:	b0 e0       	ldi	r27, 0x00	; 0
    102e:	eb e3       	ldi	r30, 0x3B	; 59
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	80 81       	ld	r24, Z
    1034:	48 2f       	mov	r20, r24
    1036:	89 81       	ldd	r24, Y+1	; 0x01
    1038:	28 2f       	mov	r18, r24
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	81 e0       	ldi	r24, 0x01	; 1
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	02 2e       	mov	r0, r18
    1042:	02 c0       	rjmp	.+4      	; 0x1048 <DIO_enuWriteChannel+0xb0>
    1044:	88 0f       	add	r24, r24
    1046:	99 1f       	adc	r25, r25
    1048:	0a 94       	dec	r0
    104a:	e2 f7       	brpl	.-8      	; 0x1044 <DIO_enuWriteChannel+0xac>
    104c:	84 2b       	or	r24, r20
    104e:	8c 93       	st	X, r24
    1050:	98 c0       	rjmp	.+304    	; 0x1182 <DIO_enuWriteChannel+0x1ea>
				}

				else
				{
					CLR_BIT(PORTA,Loc_u8Pin);
    1052:	ab e3       	ldi	r26, 0x3B	; 59
    1054:	b0 e0       	ldi	r27, 0x00	; 0
    1056:	eb e3       	ldi	r30, 0x3B	; 59
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	80 81       	ld	r24, Z
    105c:	48 2f       	mov	r20, r24
    105e:	89 81       	ldd	r24, Y+1	; 0x01
    1060:	28 2f       	mov	r18, r24
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	81 e0       	ldi	r24, 0x01	; 1
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	02 2e       	mov	r0, r18
    106a:	02 c0       	rjmp	.+4      	; 0x1070 <DIO_enuWriteChannel+0xd8>
    106c:	88 0f       	add	r24, r24
    106e:	99 1f       	adc	r25, r25
    1070:	0a 94       	dec	r0
    1072:	e2 f7       	brpl	.-8      	; 0x106c <DIO_enuWriteChannel+0xd4>
    1074:	80 95       	com	r24
    1076:	84 23       	and	r24, r20
    1078:	8c 93       	st	X, r24
    107a:	83 c0       	rjmp	.+262    	; 0x1182 <DIO_enuWriteChannel+0x1ea>
				break;
			}

			case DIO_u8PORT_B:
			{
				if(Copy_u8ChannelLevel == DIO_u8LEVEL_ONE)
    107c:	8d 81       	ldd	r24, Y+5	; 0x05
    107e:	81 30       	cpi	r24, 0x01	; 1
    1080:	a1 f4       	brne	.+40     	; 0x10aa <DIO_enuWriteChannel+0x112>
				{
					SET_BIT(PORTB,Loc_u8Pin);
    1082:	a8 e3       	ldi	r26, 0x38	; 56
    1084:	b0 e0       	ldi	r27, 0x00	; 0
    1086:	e8 e3       	ldi	r30, 0x38	; 56
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	80 81       	ld	r24, Z
    108c:	48 2f       	mov	r20, r24
    108e:	89 81       	ldd	r24, Y+1	; 0x01
    1090:	28 2f       	mov	r18, r24
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	81 e0       	ldi	r24, 0x01	; 1
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	02 2e       	mov	r0, r18
    109a:	02 c0       	rjmp	.+4      	; 0x10a0 <DIO_enuWriteChannel+0x108>
    109c:	88 0f       	add	r24, r24
    109e:	99 1f       	adc	r25, r25
    10a0:	0a 94       	dec	r0
    10a2:	e2 f7       	brpl	.-8      	; 0x109c <DIO_enuWriteChannel+0x104>
    10a4:	84 2b       	or	r24, r20
    10a6:	8c 93       	st	X, r24
    10a8:	6c c0       	rjmp	.+216    	; 0x1182 <DIO_enuWriteChannel+0x1ea>
				}

				else
				{
					CLR_BIT(PORTB,Loc_u8Pin);
    10aa:	a8 e3       	ldi	r26, 0x38	; 56
    10ac:	b0 e0       	ldi	r27, 0x00	; 0
    10ae:	e8 e3       	ldi	r30, 0x38	; 56
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	80 81       	ld	r24, Z
    10b4:	48 2f       	mov	r20, r24
    10b6:	89 81       	ldd	r24, Y+1	; 0x01
    10b8:	28 2f       	mov	r18, r24
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	02 2e       	mov	r0, r18
    10c2:	02 c0       	rjmp	.+4      	; 0x10c8 <DIO_enuWriteChannel+0x130>
    10c4:	88 0f       	add	r24, r24
    10c6:	99 1f       	adc	r25, r25
    10c8:	0a 94       	dec	r0
    10ca:	e2 f7       	brpl	.-8      	; 0x10c4 <DIO_enuWriteChannel+0x12c>
    10cc:	80 95       	com	r24
    10ce:	84 23       	and	r24, r20
    10d0:	8c 93       	st	X, r24
    10d2:	57 c0       	rjmp	.+174    	; 0x1182 <DIO_enuWriteChannel+0x1ea>
				break;
			}

			case DIO_u8PORT_C:
			{
				if(Copy_u8ChannelLevel == DIO_u8LEVEL_ONE)
    10d4:	8d 81       	ldd	r24, Y+5	; 0x05
    10d6:	81 30       	cpi	r24, 0x01	; 1
    10d8:	a1 f4       	brne	.+40     	; 0x1102 <DIO_enuWriteChannel+0x16a>
				{
					SET_BIT(PORTC,Loc_u8Pin);
    10da:	a5 e3       	ldi	r26, 0x35	; 53
    10dc:	b0 e0       	ldi	r27, 0x00	; 0
    10de:	e5 e3       	ldi	r30, 0x35	; 53
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	80 81       	ld	r24, Z
    10e4:	48 2f       	mov	r20, r24
    10e6:	89 81       	ldd	r24, Y+1	; 0x01
    10e8:	28 2f       	mov	r18, r24
    10ea:	30 e0       	ldi	r19, 0x00	; 0
    10ec:	81 e0       	ldi	r24, 0x01	; 1
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	02 2e       	mov	r0, r18
    10f2:	02 c0       	rjmp	.+4      	; 0x10f8 <DIO_enuWriteChannel+0x160>
    10f4:	88 0f       	add	r24, r24
    10f6:	99 1f       	adc	r25, r25
    10f8:	0a 94       	dec	r0
    10fa:	e2 f7       	brpl	.-8      	; 0x10f4 <DIO_enuWriteChannel+0x15c>
    10fc:	84 2b       	or	r24, r20
    10fe:	8c 93       	st	X, r24
    1100:	40 c0       	rjmp	.+128    	; 0x1182 <DIO_enuWriteChannel+0x1ea>
				}

				else
				{
					CLR_BIT(PORTC,Loc_u8Pin);
    1102:	a5 e3       	ldi	r26, 0x35	; 53
    1104:	b0 e0       	ldi	r27, 0x00	; 0
    1106:	e5 e3       	ldi	r30, 0x35	; 53
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	80 81       	ld	r24, Z
    110c:	48 2f       	mov	r20, r24
    110e:	89 81       	ldd	r24, Y+1	; 0x01
    1110:	28 2f       	mov	r18, r24
    1112:	30 e0       	ldi	r19, 0x00	; 0
    1114:	81 e0       	ldi	r24, 0x01	; 1
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	02 2e       	mov	r0, r18
    111a:	02 c0       	rjmp	.+4      	; 0x1120 <DIO_enuWriteChannel+0x188>
    111c:	88 0f       	add	r24, r24
    111e:	99 1f       	adc	r25, r25
    1120:	0a 94       	dec	r0
    1122:	e2 f7       	brpl	.-8      	; 0x111c <DIO_enuWriteChannel+0x184>
    1124:	80 95       	com	r24
    1126:	84 23       	and	r24, r20
    1128:	8c 93       	st	X, r24
    112a:	2b c0       	rjmp	.+86     	; 0x1182 <DIO_enuWriteChannel+0x1ea>
				break;
			}

			case DIO_u8PORT_D:
			{
				if(Copy_u8ChannelLevel == DIO_u8LEVEL_ONE)
    112c:	8d 81       	ldd	r24, Y+5	; 0x05
    112e:	81 30       	cpi	r24, 0x01	; 1
    1130:	a1 f4       	brne	.+40     	; 0x115a <DIO_enuWriteChannel+0x1c2>
				{
					SET_BIT(PORTD,Loc_u8Pin);
    1132:	a2 e3       	ldi	r26, 0x32	; 50
    1134:	b0 e0       	ldi	r27, 0x00	; 0
    1136:	e2 e3       	ldi	r30, 0x32	; 50
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	80 81       	ld	r24, Z
    113c:	48 2f       	mov	r20, r24
    113e:	89 81       	ldd	r24, Y+1	; 0x01
    1140:	28 2f       	mov	r18, r24
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	81 e0       	ldi	r24, 0x01	; 1
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	02 2e       	mov	r0, r18
    114a:	02 c0       	rjmp	.+4      	; 0x1150 <DIO_enuWriteChannel+0x1b8>
    114c:	88 0f       	add	r24, r24
    114e:	99 1f       	adc	r25, r25
    1150:	0a 94       	dec	r0
    1152:	e2 f7       	brpl	.-8      	; 0x114c <DIO_enuWriteChannel+0x1b4>
    1154:	84 2b       	or	r24, r20
    1156:	8c 93       	st	X, r24
    1158:	14 c0       	rjmp	.+40     	; 0x1182 <DIO_enuWriteChannel+0x1ea>
				}

				else
				{
					CLR_BIT(PORTD,Loc_u8Pin);
    115a:	a2 e3       	ldi	r26, 0x32	; 50
    115c:	b0 e0       	ldi	r27, 0x00	; 0
    115e:	e2 e3       	ldi	r30, 0x32	; 50
    1160:	f0 e0       	ldi	r31, 0x00	; 0
    1162:	80 81       	ld	r24, Z
    1164:	48 2f       	mov	r20, r24
    1166:	89 81       	ldd	r24, Y+1	; 0x01
    1168:	28 2f       	mov	r18, r24
    116a:	30 e0       	ldi	r19, 0x00	; 0
    116c:	81 e0       	ldi	r24, 0x01	; 1
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	02 2e       	mov	r0, r18
    1172:	02 c0       	rjmp	.+4      	; 0x1178 <DIO_enuWriteChannel+0x1e0>
    1174:	88 0f       	add	r24, r24
    1176:	99 1f       	adc	r25, r25
    1178:	0a 94       	dec	r0
    117a:	e2 f7       	brpl	.-8      	; 0x1174 <DIO_enuWriteChannel+0x1dc>
    117c:	80 95       	com	r24
    117e:	84 23       	and	r24, r20
    1180:	8c 93       	st	X, r24
				}
				break;
			}
		}
	}
	return Loc_enuReturnStatus;
    1182:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1184:	27 96       	adiw	r28, 0x07	; 7
    1186:	0f b6       	in	r0, 0x3f	; 63
    1188:	f8 94       	cli
    118a:	de bf       	out	0x3e, r29	; 62
    118c:	0f be       	out	0x3f, r0	; 63
    118e:	cd bf       	out	0x3d, r28	; 61
    1190:	cf 91       	pop	r28
    1192:	df 91       	pop	r29
    1194:	08 95       	ret

00001196 <DIO_enuReadChannel>:
Dio_tenuErrorStatus DIO_enuReadChannel(u8 Copy_u8ChannelId, pu8 Copy_pu8ChannelLevel)
{
    1196:	df 93       	push	r29
    1198:	cf 93       	push	r28
    119a:	cd b7       	in	r28, 0x3d	; 61
    119c:	de b7       	in	r29, 0x3e	; 62
    119e:	28 97       	sbiw	r28, 0x08	; 8
    11a0:	0f b6       	in	r0, 0x3f	; 63
    11a2:	f8 94       	cli
    11a4:	de bf       	out	0x3e, r29	; 62
    11a6:	0f be       	out	0x3f, r0	; 63
    11a8:	cd bf       	out	0x3d, r28	; 61
    11aa:	8c 83       	std	Y+4, r24	; 0x04
    11ac:	7e 83       	std	Y+6, r23	; 0x06
    11ae:	6d 83       	std	Y+5, r22	; 0x05
	Dio_tenuErrorStatus Loc_enuReturnStatus = Dio_enuOK;
    11b0:	82 e0       	ldi	r24, 0x02	; 2
    11b2:	8b 83       	std	Y+3, r24	; 0x03

	u8 Loc_u8Port;
	u8 Loc_u8Pin;

	if(  Copy_u8ChannelId >= DIO_u8NUMBER_OF_PINS )
    11b4:	8c 81       	ldd	r24, Y+4	; 0x04
    11b6:	80 32       	cpi	r24, 0x20	; 32
    11b8:	10 f0       	brcs	.+4      	; 0x11be <DIO_enuReadChannel+0x28>
	{
		Loc_enuReturnStatus = DioChannelIdError;
    11ba:	1b 82       	std	Y+3, r1	; 0x03
    11bc:	78 c0       	rjmp	.+240    	; 0x12ae <DIO_enuReadChannel+0x118>
	}

	else
	{
		Loc_u8Port = Copy_u8ChannelId / 8 ;
    11be:	8c 81       	ldd	r24, Y+4	; 0x04
    11c0:	86 95       	lsr	r24
    11c2:	86 95       	lsr	r24
    11c4:	86 95       	lsr	r24
    11c6:	8a 83       	std	Y+2, r24	; 0x02
		Loc_u8Pin = Copy_u8ChannelId % 8 ;
    11c8:	8c 81       	ldd	r24, Y+4	; 0x04
    11ca:	87 70       	andi	r24, 0x07	; 7
    11cc:	89 83       	std	Y+1, r24	; 0x01

		switch(Loc_u8Port)
    11ce:	8a 81       	ldd	r24, Y+2	; 0x02
    11d0:	28 2f       	mov	r18, r24
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	38 87       	std	Y+8, r19	; 0x08
    11d6:	2f 83       	std	Y+7, r18	; 0x07
    11d8:	4f 81       	ldd	r20, Y+7	; 0x07
    11da:	58 85       	ldd	r21, Y+8	; 0x08
    11dc:	41 30       	cpi	r20, 0x01	; 1
    11de:	51 05       	cpc	r21, r1
    11e0:	59 f1       	breq	.+86     	; 0x1238 <DIO_enuReadChannel+0xa2>
    11e2:	8f 81       	ldd	r24, Y+7	; 0x07
    11e4:	98 85       	ldd	r25, Y+8	; 0x08
    11e6:	82 30       	cpi	r24, 0x02	; 2
    11e8:	91 05       	cpc	r25, r1
    11ea:	34 f4       	brge	.+12     	; 0x11f8 <DIO_enuReadChannel+0x62>
    11ec:	2f 81       	ldd	r18, Y+7	; 0x07
    11ee:	38 85       	ldd	r19, Y+8	; 0x08
    11f0:	21 15       	cp	r18, r1
    11f2:	31 05       	cpc	r19, r1
    11f4:	69 f0       	breq	.+26     	; 0x1210 <DIO_enuReadChannel+0x7a>
    11f6:	5b c0       	rjmp	.+182    	; 0x12ae <DIO_enuReadChannel+0x118>
    11f8:	4f 81       	ldd	r20, Y+7	; 0x07
    11fa:	58 85       	ldd	r21, Y+8	; 0x08
    11fc:	42 30       	cpi	r20, 0x02	; 2
    11fe:	51 05       	cpc	r21, r1
    1200:	79 f1       	breq	.+94     	; 0x1260 <DIO_enuReadChannel+0xca>
    1202:	8f 81       	ldd	r24, Y+7	; 0x07
    1204:	98 85       	ldd	r25, Y+8	; 0x08
    1206:	83 30       	cpi	r24, 0x03	; 3
    1208:	91 05       	cpc	r25, r1
    120a:	09 f4       	brne	.+2      	; 0x120e <DIO_enuReadChannel+0x78>
    120c:	3d c0       	rjmp	.+122    	; 0x1288 <DIO_enuReadChannel+0xf2>
    120e:	4f c0       	rjmp	.+158    	; 0x12ae <DIO_enuReadChannel+0x118>
		{
			case DIO_u8PORT_A:
			{
				*Copy_pu8ChannelLevel = GET_BIT(PINA,Loc_u8Pin);
    1210:	e9 e3       	ldi	r30, 0x39	; 57
    1212:	f0 e0       	ldi	r31, 0x00	; 0
    1214:	80 81       	ld	r24, Z
    1216:	28 2f       	mov	r18, r24
    1218:	30 e0       	ldi	r19, 0x00	; 0
    121a:	89 81       	ldd	r24, Y+1	; 0x01
    121c:	88 2f       	mov	r24, r24
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	a9 01       	movw	r20, r18
    1222:	02 c0       	rjmp	.+4      	; 0x1228 <DIO_enuReadChannel+0x92>
    1224:	55 95       	asr	r21
    1226:	47 95       	ror	r20
    1228:	8a 95       	dec	r24
    122a:	e2 f7       	brpl	.-8      	; 0x1224 <DIO_enuReadChannel+0x8e>
    122c:	ca 01       	movw	r24, r20
    122e:	81 70       	andi	r24, 0x01	; 1
    1230:	ed 81       	ldd	r30, Y+5	; 0x05
    1232:	fe 81       	ldd	r31, Y+6	; 0x06
    1234:	80 83       	st	Z, r24
    1236:	3b c0       	rjmp	.+118    	; 0x12ae <DIO_enuReadChannel+0x118>
				break;
			}

			case DIO_u8PORT_B:
			{
				*Copy_pu8ChannelLevel = GET_BIT(PINB,Loc_u8Pin);
    1238:	e6 e3       	ldi	r30, 0x36	; 54
    123a:	f0 e0       	ldi	r31, 0x00	; 0
    123c:	80 81       	ld	r24, Z
    123e:	28 2f       	mov	r18, r24
    1240:	30 e0       	ldi	r19, 0x00	; 0
    1242:	89 81       	ldd	r24, Y+1	; 0x01
    1244:	88 2f       	mov	r24, r24
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	a9 01       	movw	r20, r18
    124a:	02 c0       	rjmp	.+4      	; 0x1250 <DIO_enuReadChannel+0xba>
    124c:	55 95       	asr	r21
    124e:	47 95       	ror	r20
    1250:	8a 95       	dec	r24
    1252:	e2 f7       	brpl	.-8      	; 0x124c <DIO_enuReadChannel+0xb6>
    1254:	ca 01       	movw	r24, r20
    1256:	81 70       	andi	r24, 0x01	; 1
    1258:	ed 81       	ldd	r30, Y+5	; 0x05
    125a:	fe 81       	ldd	r31, Y+6	; 0x06
    125c:	80 83       	st	Z, r24
    125e:	27 c0       	rjmp	.+78     	; 0x12ae <DIO_enuReadChannel+0x118>
				break;
			}

			case DIO_u8PORT_C:
			{
				*Copy_pu8ChannelLevel = GET_BIT(PINC,Loc_u8Pin);
    1260:	e3 e3       	ldi	r30, 0x33	; 51
    1262:	f0 e0       	ldi	r31, 0x00	; 0
    1264:	80 81       	ld	r24, Z
    1266:	28 2f       	mov	r18, r24
    1268:	30 e0       	ldi	r19, 0x00	; 0
    126a:	89 81       	ldd	r24, Y+1	; 0x01
    126c:	88 2f       	mov	r24, r24
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	a9 01       	movw	r20, r18
    1272:	02 c0       	rjmp	.+4      	; 0x1278 <DIO_enuReadChannel+0xe2>
    1274:	55 95       	asr	r21
    1276:	47 95       	ror	r20
    1278:	8a 95       	dec	r24
    127a:	e2 f7       	brpl	.-8      	; 0x1274 <DIO_enuReadChannel+0xde>
    127c:	ca 01       	movw	r24, r20
    127e:	81 70       	andi	r24, 0x01	; 1
    1280:	ed 81       	ldd	r30, Y+5	; 0x05
    1282:	fe 81       	ldd	r31, Y+6	; 0x06
    1284:	80 83       	st	Z, r24
    1286:	13 c0       	rjmp	.+38     	; 0x12ae <DIO_enuReadChannel+0x118>
				break;
			}

			case DIO_u8PORT_D:
			{
				*Copy_pu8ChannelLevel = GET_BIT(PIND,Loc_u8Pin);
    1288:	e0 e3       	ldi	r30, 0x30	; 48
    128a:	f0 e0       	ldi	r31, 0x00	; 0
    128c:	80 81       	ld	r24, Z
    128e:	28 2f       	mov	r18, r24
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	89 81       	ldd	r24, Y+1	; 0x01
    1294:	88 2f       	mov	r24, r24
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	a9 01       	movw	r20, r18
    129a:	02 c0       	rjmp	.+4      	; 0x12a0 <DIO_enuReadChannel+0x10a>
    129c:	55 95       	asr	r21
    129e:	47 95       	ror	r20
    12a0:	8a 95       	dec	r24
    12a2:	e2 f7       	brpl	.-8      	; 0x129c <DIO_enuReadChannel+0x106>
    12a4:	ca 01       	movw	r24, r20
    12a6:	81 70       	andi	r24, 0x01	; 1
    12a8:	ed 81       	ldd	r30, Y+5	; 0x05
    12aa:	fe 81       	ldd	r31, Y+6	; 0x06
    12ac:	80 83       	st	Z, r24
				break;
			}
		}
	}
	return Loc_enuReturnStatus;
    12ae:	8b 81       	ldd	r24, Y+3	; 0x03
}
    12b0:	28 96       	adiw	r28, 0x08	; 8
    12b2:	0f b6       	in	r0, 0x3f	; 63
    12b4:	f8 94       	cli
    12b6:	de bf       	out	0x3e, r29	; 62
    12b8:	0f be       	out	0x3f, r0	; 63
    12ba:	cd bf       	out	0x3d, r28	; 61
    12bc:	cf 91       	pop	r28
    12be:	df 91       	pop	r29
    12c0:	08 95       	ret

000012c2 <DIO_enuWritePort>:
Dio_tenuErrorStatus DIO_enuWritePort(u8 Copy_u8PortId, u8 Copy_uPortLevel)
{
    12c2:	df 93       	push	r29
    12c4:	cf 93       	push	r28
    12c6:	00 d0       	rcall	.+0      	; 0x12c8 <DIO_enuWritePort+0x6>
    12c8:	00 d0       	rcall	.+0      	; 0x12ca <DIO_enuWritePort+0x8>
    12ca:	0f 92       	push	r0
    12cc:	cd b7       	in	r28, 0x3d	; 61
    12ce:	de b7       	in	r29, 0x3e	; 62
    12d0:	8a 83       	std	Y+2, r24	; 0x02
    12d2:	6b 83       	std	Y+3, r22	; 0x03
	Dio_tenuErrorStatus Loc_enuReturnStatus = Dio_enuOK;
    12d4:	82 e0       	ldi	r24, 0x02	; 2
    12d6:	89 83       	std	Y+1, r24	; 0x01


	if( Copy_u8PortId >= DIO_u8PORT_NUMBER )
    12d8:	8a 81       	ldd	r24, Y+2	; 0x02
    12da:	84 30       	cpi	r24, 0x04	; 4
    12dc:	10 f0       	brcs	.+4      	; 0x12e2 <DIO_enuWritePort+0x20>
	{
		Loc_enuReturnStatus = DioChannelIdError;
    12de:	19 82       	std	Y+1, r1	; 0x01
    12e0:	32 c0       	rjmp	.+100    	; 0x1346 <DIO_enuWritePort+0x84>
	}

	else
	{

		switch(Copy_u8PortId)
    12e2:	8a 81       	ldd	r24, Y+2	; 0x02
    12e4:	28 2f       	mov	r18, r24
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	3d 83       	std	Y+5, r19	; 0x05
    12ea:	2c 83       	std	Y+4, r18	; 0x04
    12ec:	8c 81       	ldd	r24, Y+4	; 0x04
    12ee:	9d 81       	ldd	r25, Y+5	; 0x05
    12f0:	81 30       	cpi	r24, 0x01	; 1
    12f2:	91 05       	cpc	r25, r1
    12f4:	d1 f0       	breq	.+52     	; 0x132a <DIO_enuWritePort+0x68>
    12f6:	2c 81       	ldd	r18, Y+4	; 0x04
    12f8:	3d 81       	ldd	r19, Y+5	; 0x05
    12fa:	22 30       	cpi	r18, 0x02	; 2
    12fc:	31 05       	cpc	r19, r1
    12fe:	2c f4       	brge	.+10     	; 0x130a <DIO_enuWritePort+0x48>
    1300:	8c 81       	ldd	r24, Y+4	; 0x04
    1302:	9d 81       	ldd	r25, Y+5	; 0x05
    1304:	00 97       	sbiw	r24, 0x00	; 0
    1306:	61 f0       	breq	.+24     	; 0x1320 <DIO_enuWritePort+0x5e>
    1308:	1e c0       	rjmp	.+60     	; 0x1346 <DIO_enuWritePort+0x84>
    130a:	2c 81       	ldd	r18, Y+4	; 0x04
    130c:	3d 81       	ldd	r19, Y+5	; 0x05
    130e:	22 30       	cpi	r18, 0x02	; 2
    1310:	31 05       	cpc	r19, r1
    1312:	81 f0       	breq	.+32     	; 0x1334 <DIO_enuWritePort+0x72>
    1314:	8c 81       	ldd	r24, Y+4	; 0x04
    1316:	9d 81       	ldd	r25, Y+5	; 0x05
    1318:	83 30       	cpi	r24, 0x03	; 3
    131a:	91 05       	cpc	r25, r1
    131c:	81 f0       	breq	.+32     	; 0x133e <DIO_enuWritePort+0x7c>
    131e:	13 c0       	rjmp	.+38     	; 0x1346 <DIO_enuWritePort+0x84>
		{
			case DIO_u8PORT_A:
			{
				PORTA = Copy_uPortLevel ;
    1320:	eb e3       	ldi	r30, 0x3B	; 59
    1322:	f0 e0       	ldi	r31, 0x00	; 0
    1324:	8b 81       	ldd	r24, Y+3	; 0x03
    1326:	80 83       	st	Z, r24
    1328:	0e c0       	rjmp	.+28     	; 0x1346 <DIO_enuWritePort+0x84>
				break;
			}

			case DIO_u8PORT_B:
			{
				PORTB = Copy_uPortLevel ;
    132a:	e8 e3       	ldi	r30, 0x38	; 56
    132c:	f0 e0       	ldi	r31, 0x00	; 0
    132e:	8b 81       	ldd	r24, Y+3	; 0x03
    1330:	80 83       	st	Z, r24
    1332:	09 c0       	rjmp	.+18     	; 0x1346 <DIO_enuWritePort+0x84>
				break;
			}

			case DIO_u8PORT_C:
			{
				PORTC = Copy_uPortLevel ;
    1334:	e5 e3       	ldi	r30, 0x35	; 53
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	8b 81       	ldd	r24, Y+3	; 0x03
    133a:	80 83       	st	Z, r24
    133c:	04 c0       	rjmp	.+8      	; 0x1346 <DIO_enuWritePort+0x84>
				break;
			}

			case DIO_u8PORT_D:
			{
				PORTD = Copy_uPortLevel ;
    133e:	e2 e3       	ldi	r30, 0x32	; 50
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	8b 81       	ldd	r24, Y+3	; 0x03
    1344:	80 83       	st	Z, r24
				break;
			}
		}
	}
	return Loc_enuReturnStatus;
    1346:	89 81       	ldd	r24, Y+1	; 0x01
}
    1348:	0f 90       	pop	r0
    134a:	0f 90       	pop	r0
    134c:	0f 90       	pop	r0
    134e:	0f 90       	pop	r0
    1350:	0f 90       	pop	r0
    1352:	cf 91       	pop	r28
    1354:	df 91       	pop	r29
    1356:	08 95       	ret

00001358 <DIO_enuReadPort>:


Dio_tenuErrorStatus DIO_enuReadPort(u8 Copy_u8PortId, pu8 Copy_pu8PortLevel)
{
    1358:	df 93       	push	r29
    135a:	cf 93       	push	r28
    135c:	00 d0       	rcall	.+0      	; 0x135e <DIO_enuReadPort+0x6>
    135e:	00 d0       	rcall	.+0      	; 0x1360 <DIO_enuReadPort+0x8>
    1360:	00 d0       	rcall	.+0      	; 0x1362 <DIO_enuReadPort+0xa>
    1362:	cd b7       	in	r28, 0x3d	; 61
    1364:	de b7       	in	r29, 0x3e	; 62
    1366:	8a 83       	std	Y+2, r24	; 0x02
    1368:	7c 83       	std	Y+4, r23	; 0x04
    136a:	6b 83       	std	Y+3, r22	; 0x03
	Dio_tenuErrorStatus Loc_enuReturnStatus = Dio_enuOK;
    136c:	82 e0       	ldi	r24, 0x02	; 2
    136e:	89 83       	std	Y+1, r24	; 0x01


	if(  Copy_u8PortId >= DIO_u8PORT_NUMBER )
    1370:	8a 81       	ldd	r24, Y+2	; 0x02
    1372:	84 30       	cpi	r24, 0x04	; 4
    1374:	10 f0       	brcs	.+4      	; 0x137a <DIO_enuReadPort+0x22>
	{
		Loc_enuReturnStatus = DioChannelIdError;
    1376:	19 82       	std	Y+1, r1	; 0x01
    1378:	3a c0       	rjmp	.+116    	; 0x13ee <DIO_enuReadPort+0x96>
	}

	else
	{
		switch(Copy_u8PortId)
    137a:	8a 81       	ldd	r24, Y+2	; 0x02
    137c:	28 2f       	mov	r18, r24
    137e:	30 e0       	ldi	r19, 0x00	; 0
    1380:	3e 83       	std	Y+6, r19	; 0x06
    1382:	2d 83       	std	Y+5, r18	; 0x05
    1384:	8d 81       	ldd	r24, Y+5	; 0x05
    1386:	9e 81       	ldd	r25, Y+6	; 0x06
    1388:	81 30       	cpi	r24, 0x01	; 1
    138a:	91 05       	cpc	r25, r1
    138c:	e1 f0       	breq	.+56     	; 0x13c6 <DIO_enuReadPort+0x6e>
    138e:	2d 81       	ldd	r18, Y+5	; 0x05
    1390:	3e 81       	ldd	r19, Y+6	; 0x06
    1392:	22 30       	cpi	r18, 0x02	; 2
    1394:	31 05       	cpc	r19, r1
    1396:	2c f4       	brge	.+10     	; 0x13a2 <DIO_enuReadPort+0x4a>
    1398:	8d 81       	ldd	r24, Y+5	; 0x05
    139a:	9e 81       	ldd	r25, Y+6	; 0x06
    139c:	00 97       	sbiw	r24, 0x00	; 0
    139e:	61 f0       	breq	.+24     	; 0x13b8 <DIO_enuReadPort+0x60>
    13a0:	26 c0       	rjmp	.+76     	; 0x13ee <DIO_enuReadPort+0x96>
    13a2:	2d 81       	ldd	r18, Y+5	; 0x05
    13a4:	3e 81       	ldd	r19, Y+6	; 0x06
    13a6:	22 30       	cpi	r18, 0x02	; 2
    13a8:	31 05       	cpc	r19, r1
    13aa:	a1 f0       	breq	.+40     	; 0x13d4 <DIO_enuReadPort+0x7c>
    13ac:	8d 81       	ldd	r24, Y+5	; 0x05
    13ae:	9e 81       	ldd	r25, Y+6	; 0x06
    13b0:	83 30       	cpi	r24, 0x03	; 3
    13b2:	91 05       	cpc	r25, r1
    13b4:	b1 f0       	breq	.+44     	; 0x13e2 <DIO_enuReadPort+0x8a>
    13b6:	1b c0       	rjmp	.+54     	; 0x13ee <DIO_enuReadPort+0x96>
		{
			case DIO_u8PORT_A:
			{
				*Copy_pu8PortLevel = PINA;
    13b8:	e9 e3       	ldi	r30, 0x39	; 57
    13ba:	f0 e0       	ldi	r31, 0x00	; 0
    13bc:	80 81       	ld	r24, Z
    13be:	eb 81       	ldd	r30, Y+3	; 0x03
    13c0:	fc 81       	ldd	r31, Y+4	; 0x04
    13c2:	80 83       	st	Z, r24
    13c4:	14 c0       	rjmp	.+40     	; 0x13ee <DIO_enuReadPort+0x96>
				break;
			}

			case DIO_u8PORT_B:
			{
				*Copy_pu8PortLevel = PINB;
    13c6:	e6 e3       	ldi	r30, 0x36	; 54
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	80 81       	ld	r24, Z
    13cc:	eb 81       	ldd	r30, Y+3	; 0x03
    13ce:	fc 81       	ldd	r31, Y+4	; 0x04
    13d0:	80 83       	st	Z, r24
    13d2:	0d c0       	rjmp	.+26     	; 0x13ee <DIO_enuReadPort+0x96>
				break;
			}

			case DIO_u8PORT_C:
			{
				*Copy_pu8PortLevel = PINC;
    13d4:	e3 e3       	ldi	r30, 0x33	; 51
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	80 81       	ld	r24, Z
    13da:	eb 81       	ldd	r30, Y+3	; 0x03
    13dc:	fc 81       	ldd	r31, Y+4	; 0x04
    13de:	80 83       	st	Z, r24
    13e0:	06 c0       	rjmp	.+12     	; 0x13ee <DIO_enuReadPort+0x96>
				break;
			}

			case DIO_u8PORT_D:
			{
				*Copy_pu8PortLevel = PIND;
    13e2:	e0 e3       	ldi	r30, 0x30	; 48
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	80 81       	ld	r24, Z
    13e8:	eb 81       	ldd	r30, Y+3	; 0x03
    13ea:	fc 81       	ldd	r31, Y+4	; 0x04
    13ec:	80 83       	st	Z, r24
				break;
			}
		}
	}
	return Loc_enuReturnStatus;
    13ee:	89 81       	ldd	r24, Y+1	; 0x01
}
    13f0:	26 96       	adiw	r28, 0x06	; 6
    13f2:	0f b6       	in	r0, 0x3f	; 63
    13f4:	f8 94       	cli
    13f6:	de bf       	out	0x3e, r29	; 62
    13f8:	0f be       	out	0x3f, r0	; 63
    13fa:	cd bf       	out	0x3d, r28	; 61
    13fc:	cf 91       	pop	r28
    13fe:	df 91       	pop	r29
    1400:	08 95       	ret

00001402 <DIO_enuFlipChannel>:

Dio_tenuErrorStatus DIO_enuFlipChannel(u8 Copy_u8ChannelId)
{
    1402:	df 93       	push	r29
    1404:	cf 93       	push	r28
    1406:	00 d0       	rcall	.+0      	; 0x1408 <DIO_enuFlipChannel+0x6>
    1408:	00 d0       	rcall	.+0      	; 0x140a <DIO_enuFlipChannel+0x8>
    140a:	00 d0       	rcall	.+0      	; 0x140c <DIO_enuFlipChannel+0xa>
    140c:	cd b7       	in	r28, 0x3d	; 61
    140e:	de b7       	in	r29, 0x3e	; 62
    1410:	8c 83       	std	Y+4, r24	; 0x04
	Dio_tenuErrorStatus Loc_enuReturnStatus = Dio_enuOK;
    1412:	82 e0       	ldi	r24, 0x02	; 2
    1414:	8b 83       	std	Y+3, r24	; 0x03

	u8 Loc_u8Port;
	u8 Loc_u8Pin;

	if(  Copy_u8ChannelId >= DIO_u8NUMBER_OF_PINS  )
    1416:	8c 81       	ldd	r24, Y+4	; 0x04
    1418:	80 32       	cpi	r24, 0x20	; 32
    141a:	10 f0       	brcs	.+4      	; 0x1420 <DIO_enuFlipChannel+0x1e>
	{
		Loc_enuReturnStatus = DioChannelIdError;
    141c:	1b 82       	std	Y+3, r1	; 0x03
    141e:	76 c0       	rjmp	.+236    	; 0x150c <DIO_enuFlipChannel+0x10a>
	}

	else
	{
		Loc_u8Port = Copy_u8ChannelId / 8 ;
    1420:	8c 81       	ldd	r24, Y+4	; 0x04
    1422:	86 95       	lsr	r24
    1424:	86 95       	lsr	r24
    1426:	86 95       	lsr	r24
    1428:	8a 83       	std	Y+2, r24	; 0x02
		Loc_u8Pin = Copy_u8ChannelId % 8 ;
    142a:	8c 81       	ldd	r24, Y+4	; 0x04
    142c:	87 70       	andi	r24, 0x07	; 7
    142e:	89 83       	std	Y+1, r24	; 0x01

		switch(Loc_u8Port)
    1430:	8a 81       	ldd	r24, Y+2	; 0x02
    1432:	28 2f       	mov	r18, r24
    1434:	30 e0       	ldi	r19, 0x00	; 0
    1436:	3e 83       	std	Y+6, r19	; 0x06
    1438:	2d 83       	std	Y+5, r18	; 0x05
    143a:	8d 81       	ldd	r24, Y+5	; 0x05
    143c:	9e 81       	ldd	r25, Y+6	; 0x06
    143e:	81 30       	cpi	r24, 0x01	; 1
    1440:	91 05       	cpc	r25, r1
    1442:	49 f1       	breq	.+82     	; 0x1496 <DIO_enuFlipChannel+0x94>
    1444:	2d 81       	ldd	r18, Y+5	; 0x05
    1446:	3e 81       	ldd	r19, Y+6	; 0x06
    1448:	22 30       	cpi	r18, 0x02	; 2
    144a:	31 05       	cpc	r19, r1
    144c:	2c f4       	brge	.+10     	; 0x1458 <DIO_enuFlipChannel+0x56>
    144e:	8d 81       	ldd	r24, Y+5	; 0x05
    1450:	9e 81       	ldd	r25, Y+6	; 0x06
    1452:	00 97       	sbiw	r24, 0x00	; 0
    1454:	61 f0       	breq	.+24     	; 0x146e <DIO_enuFlipChannel+0x6c>
    1456:	5a c0       	rjmp	.+180    	; 0x150c <DIO_enuFlipChannel+0x10a>
    1458:	2d 81       	ldd	r18, Y+5	; 0x05
    145a:	3e 81       	ldd	r19, Y+6	; 0x06
    145c:	22 30       	cpi	r18, 0x02	; 2
    145e:	31 05       	cpc	r19, r1
    1460:	71 f1       	breq	.+92     	; 0x14be <DIO_enuFlipChannel+0xbc>
    1462:	8d 81       	ldd	r24, Y+5	; 0x05
    1464:	9e 81       	ldd	r25, Y+6	; 0x06
    1466:	83 30       	cpi	r24, 0x03	; 3
    1468:	91 05       	cpc	r25, r1
    146a:	e9 f1       	breq	.+122    	; 0x14e6 <DIO_enuFlipChannel+0xe4>
    146c:	4f c0       	rjmp	.+158    	; 0x150c <DIO_enuFlipChannel+0x10a>
		{
			case DIO_u8PORT_A:
			{
				TGL_BIT(PINA,Loc_u8Pin);
    146e:	a9 e3       	ldi	r26, 0x39	; 57
    1470:	b0 e0       	ldi	r27, 0x00	; 0
    1472:	e9 e3       	ldi	r30, 0x39	; 57
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	80 81       	ld	r24, Z
    1478:	48 2f       	mov	r20, r24
    147a:	89 81       	ldd	r24, Y+1	; 0x01
    147c:	28 2f       	mov	r18, r24
    147e:	30 e0       	ldi	r19, 0x00	; 0
    1480:	81 e0       	ldi	r24, 0x01	; 1
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	02 2e       	mov	r0, r18
    1486:	02 c0       	rjmp	.+4      	; 0x148c <DIO_enuFlipChannel+0x8a>
    1488:	88 0f       	add	r24, r24
    148a:	99 1f       	adc	r25, r25
    148c:	0a 94       	dec	r0
    148e:	e2 f7       	brpl	.-8      	; 0x1488 <DIO_enuFlipChannel+0x86>
    1490:	84 27       	eor	r24, r20
    1492:	8c 93       	st	X, r24
    1494:	3b c0       	rjmp	.+118    	; 0x150c <DIO_enuFlipChannel+0x10a>
				break;
			}

			case DIO_u8PORT_B:
			{
				TGL_BIT(PINB,Loc_u8Pin);
    1496:	a6 e3       	ldi	r26, 0x36	; 54
    1498:	b0 e0       	ldi	r27, 0x00	; 0
    149a:	e6 e3       	ldi	r30, 0x36	; 54
    149c:	f0 e0       	ldi	r31, 0x00	; 0
    149e:	80 81       	ld	r24, Z
    14a0:	48 2f       	mov	r20, r24
    14a2:	89 81       	ldd	r24, Y+1	; 0x01
    14a4:	28 2f       	mov	r18, r24
    14a6:	30 e0       	ldi	r19, 0x00	; 0
    14a8:	81 e0       	ldi	r24, 0x01	; 1
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	02 2e       	mov	r0, r18
    14ae:	02 c0       	rjmp	.+4      	; 0x14b4 <DIO_enuFlipChannel+0xb2>
    14b0:	88 0f       	add	r24, r24
    14b2:	99 1f       	adc	r25, r25
    14b4:	0a 94       	dec	r0
    14b6:	e2 f7       	brpl	.-8      	; 0x14b0 <DIO_enuFlipChannel+0xae>
    14b8:	84 27       	eor	r24, r20
    14ba:	8c 93       	st	X, r24
    14bc:	27 c0       	rjmp	.+78     	; 0x150c <DIO_enuFlipChannel+0x10a>
				break;
			}

			case DIO_u8PORT_C:
			{
				TGL_BIT(PINC,Loc_u8Pin);
    14be:	a3 e3       	ldi	r26, 0x33	; 51
    14c0:	b0 e0       	ldi	r27, 0x00	; 0
    14c2:	e3 e3       	ldi	r30, 0x33	; 51
    14c4:	f0 e0       	ldi	r31, 0x00	; 0
    14c6:	80 81       	ld	r24, Z
    14c8:	48 2f       	mov	r20, r24
    14ca:	89 81       	ldd	r24, Y+1	; 0x01
    14cc:	28 2f       	mov	r18, r24
    14ce:	30 e0       	ldi	r19, 0x00	; 0
    14d0:	81 e0       	ldi	r24, 0x01	; 1
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	02 2e       	mov	r0, r18
    14d6:	02 c0       	rjmp	.+4      	; 0x14dc <DIO_enuFlipChannel+0xda>
    14d8:	88 0f       	add	r24, r24
    14da:	99 1f       	adc	r25, r25
    14dc:	0a 94       	dec	r0
    14de:	e2 f7       	brpl	.-8      	; 0x14d8 <DIO_enuFlipChannel+0xd6>
    14e0:	84 27       	eor	r24, r20
    14e2:	8c 93       	st	X, r24
    14e4:	13 c0       	rjmp	.+38     	; 0x150c <DIO_enuFlipChannel+0x10a>
				break;
			}

			case DIO_u8PORT_D:
			{
				TGL_BIT(PIND,Loc_u8Pin);
    14e6:	a0 e3       	ldi	r26, 0x30	; 48
    14e8:	b0 e0       	ldi	r27, 0x00	; 0
    14ea:	e0 e3       	ldi	r30, 0x30	; 48
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	80 81       	ld	r24, Z
    14f0:	48 2f       	mov	r20, r24
    14f2:	89 81       	ldd	r24, Y+1	; 0x01
    14f4:	28 2f       	mov	r18, r24
    14f6:	30 e0       	ldi	r19, 0x00	; 0
    14f8:	81 e0       	ldi	r24, 0x01	; 1
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	02 2e       	mov	r0, r18
    14fe:	02 c0       	rjmp	.+4      	; 0x1504 <DIO_enuFlipChannel+0x102>
    1500:	88 0f       	add	r24, r24
    1502:	99 1f       	adc	r25, r25
    1504:	0a 94       	dec	r0
    1506:	e2 f7       	brpl	.-8      	; 0x1500 <DIO_enuFlipChannel+0xfe>
    1508:	84 27       	eor	r24, r20
    150a:	8c 93       	st	X, r24
				break;
			}
		}
	}

	return Loc_enuReturnStatus;
    150c:	8b 81       	ldd	r24, Y+3	; 0x03
}
    150e:	26 96       	adiw	r28, 0x06	; 6
    1510:	0f b6       	in	r0, 0x3f	; 63
    1512:	f8 94       	cli
    1514:	de bf       	out	0x3e, r29	; 62
    1516:	0f be       	out	0x3f, r0	; 63
    1518:	cd bf       	out	0x3d, r28	; 61
    151a:	cf 91       	pop	r28
    151c:	df 91       	pop	r29
    151e:	08 95       	ret

00001520 <Lcd_vidInit>:
#include <stdio.h>
#include <stdlib.h>

//////////////////////////////////////////////////////////////////////
void Lcd_vidInit()
{
    1520:	df 93       	push	r29
    1522:	cf 93       	push	r28
    1524:	cd b7       	in	r28, 0x3d	; 61
    1526:	de b7       	in	r29, 0x3e	; 62
    1528:	e8 97       	sbiw	r28, 0x38	; 56
    152a:	0f b6       	in	r0, 0x3f	; 63
    152c:	f8 94       	cli
    152e:	de bf       	out	0x3e, r29	; 62
    1530:	0f be       	out	0x3f, r0	; 63
    1532:	cd bf       	out	0x3d, r28	; 61
    1534:	80 e0       	ldi	r24, 0x00	; 0
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	a8 e4       	ldi	r26, 0x48	; 72
    153a:	b2 e4       	ldi	r27, 0x42	; 66
    153c:	8d ab       	std	Y+53, r24	; 0x35
    153e:	9e ab       	std	Y+54, r25	; 0x36
    1540:	af ab       	std	Y+55, r26	; 0x37
    1542:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1544:	6d a9       	ldd	r22, Y+53	; 0x35
    1546:	7e a9       	ldd	r23, Y+54	; 0x36
    1548:	8f a9       	ldd	r24, Y+55	; 0x37
    154a:	98 ad       	ldd	r25, Y+56	; 0x38
    154c:	20 e0       	ldi	r18, 0x00	; 0
    154e:	30 e0       	ldi	r19, 0x00	; 0
    1550:	4a e7       	ldi	r20, 0x7A	; 122
    1552:	55 e4       	ldi	r21, 0x45	; 69
    1554:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1558:	dc 01       	movw	r26, r24
    155a:	cb 01       	movw	r24, r22
    155c:	89 ab       	std	Y+49, r24	; 0x31
    155e:	9a ab       	std	Y+50, r25	; 0x32
    1560:	ab ab       	std	Y+51, r26	; 0x33
    1562:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1564:	69 a9       	ldd	r22, Y+49	; 0x31
    1566:	7a a9       	ldd	r23, Y+50	; 0x32
    1568:	8b a9       	ldd	r24, Y+51	; 0x33
    156a:	9c a9       	ldd	r25, Y+52	; 0x34
    156c:	20 e0       	ldi	r18, 0x00	; 0
    156e:	30 e0       	ldi	r19, 0x00	; 0
    1570:	40 e8       	ldi	r20, 0x80	; 128
    1572:	5f e3       	ldi	r21, 0x3F	; 63
    1574:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1578:	88 23       	and	r24, r24
    157a:	2c f4       	brge	.+10     	; 0x1586 <Lcd_vidInit+0x66>
		__ticks = 1;
    157c:	81 e0       	ldi	r24, 0x01	; 1
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	98 ab       	std	Y+48, r25	; 0x30
    1582:	8f a7       	std	Y+47, r24	; 0x2f
    1584:	3f c0       	rjmp	.+126    	; 0x1604 <Lcd_vidInit+0xe4>
	else if (__tmp > 65535)
    1586:	69 a9       	ldd	r22, Y+49	; 0x31
    1588:	7a a9       	ldd	r23, Y+50	; 0x32
    158a:	8b a9       	ldd	r24, Y+51	; 0x33
    158c:	9c a9       	ldd	r25, Y+52	; 0x34
    158e:	20 e0       	ldi	r18, 0x00	; 0
    1590:	3f ef       	ldi	r19, 0xFF	; 255
    1592:	4f e7       	ldi	r20, 0x7F	; 127
    1594:	57 e4       	ldi	r21, 0x47	; 71
    1596:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    159a:	18 16       	cp	r1, r24
    159c:	4c f5       	brge	.+82     	; 0x15f0 <Lcd_vidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    159e:	6d a9       	ldd	r22, Y+53	; 0x35
    15a0:	7e a9       	ldd	r23, Y+54	; 0x36
    15a2:	8f a9       	ldd	r24, Y+55	; 0x37
    15a4:	98 ad       	ldd	r25, Y+56	; 0x38
    15a6:	20 e0       	ldi	r18, 0x00	; 0
    15a8:	30 e0       	ldi	r19, 0x00	; 0
    15aa:	40 e2       	ldi	r20, 0x20	; 32
    15ac:	51 e4       	ldi	r21, 0x41	; 65
    15ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15b2:	dc 01       	movw	r26, r24
    15b4:	cb 01       	movw	r24, r22
    15b6:	bc 01       	movw	r22, r24
    15b8:	cd 01       	movw	r24, r26
    15ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15be:	dc 01       	movw	r26, r24
    15c0:	cb 01       	movw	r24, r22
    15c2:	98 ab       	std	Y+48, r25	; 0x30
    15c4:	8f a7       	std	Y+47, r24	; 0x2f
    15c6:	0f c0       	rjmp	.+30     	; 0x15e6 <Lcd_vidInit+0xc6>
    15c8:	80 e9       	ldi	r24, 0x90	; 144
    15ca:	91 e0       	ldi	r25, 0x01	; 1
    15cc:	9e a7       	std	Y+46, r25	; 0x2e
    15ce:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    15d0:	8d a5       	ldd	r24, Y+45	; 0x2d
    15d2:	9e a5       	ldd	r25, Y+46	; 0x2e
    15d4:	01 97       	sbiw	r24, 0x01	; 1
    15d6:	f1 f7       	brne	.-4      	; 0x15d4 <Lcd_vidInit+0xb4>
    15d8:	9e a7       	std	Y+46, r25	; 0x2e
    15da:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15dc:	8f a5       	ldd	r24, Y+47	; 0x2f
    15de:	98 a9       	ldd	r25, Y+48	; 0x30
    15e0:	01 97       	sbiw	r24, 0x01	; 1
    15e2:	98 ab       	std	Y+48, r25	; 0x30
    15e4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15e6:	8f a5       	ldd	r24, Y+47	; 0x2f
    15e8:	98 a9       	ldd	r25, Y+48	; 0x30
    15ea:	00 97       	sbiw	r24, 0x00	; 0
    15ec:	69 f7       	brne	.-38     	; 0x15c8 <Lcd_vidInit+0xa8>
    15ee:	14 c0       	rjmp	.+40     	; 0x1618 <Lcd_vidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15f0:	69 a9       	ldd	r22, Y+49	; 0x31
    15f2:	7a a9       	ldd	r23, Y+50	; 0x32
    15f4:	8b a9       	ldd	r24, Y+51	; 0x33
    15f6:	9c a9       	ldd	r25, Y+52	; 0x34
    15f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15fc:	dc 01       	movw	r26, r24
    15fe:	cb 01       	movw	r24, r22
    1600:	98 ab       	std	Y+48, r25	; 0x30
    1602:	8f a7       	std	Y+47, r24	; 0x2f
    1604:	8f a5       	ldd	r24, Y+47	; 0x2f
    1606:	98 a9       	ldd	r25, Y+48	; 0x30
    1608:	9c a7       	std	Y+44, r25	; 0x2c
    160a:	8b a7       	std	Y+43, r24	; 0x2b
    160c:	8b a5       	ldd	r24, Y+43	; 0x2b
    160e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1610:	01 97       	sbiw	r24, 0x01	; 1
    1612:	f1 f7       	brne	.-4      	; 0x1610 <Lcd_vidInit+0xf0>
    1614:	9c a7       	std	Y+44, r25	; 0x2c
    1616:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(50);
	Lcd_vidSendCommand( LCD_u8EIGHT_BIT_MODE | LCD_u8TWO_LINE_DISPLAY );
    1618:	88 e3       	ldi	r24, 0x38	; 56
    161a:	0e 94 77 0c 	call	0x18ee	; 0x18ee <Lcd_vidSendCommand>
    161e:	80 e0       	ldi	r24, 0x00	; 0
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	a0 e8       	ldi	r26, 0x80	; 128
    1624:	bf e3       	ldi	r27, 0x3F	; 63
    1626:	8f a3       	std	Y+39, r24	; 0x27
    1628:	98 a7       	std	Y+40, r25	; 0x28
    162a:	a9 a7       	std	Y+41, r26	; 0x29
    162c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    162e:	6f a1       	ldd	r22, Y+39	; 0x27
    1630:	78 a5       	ldd	r23, Y+40	; 0x28
    1632:	89 a5       	ldd	r24, Y+41	; 0x29
    1634:	9a a5       	ldd	r25, Y+42	; 0x2a
    1636:	20 e0       	ldi	r18, 0x00	; 0
    1638:	30 e0       	ldi	r19, 0x00	; 0
    163a:	4a e7       	ldi	r20, 0x7A	; 122
    163c:	55 e4       	ldi	r21, 0x45	; 69
    163e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1642:	dc 01       	movw	r26, r24
    1644:	cb 01       	movw	r24, r22
    1646:	8b a3       	std	Y+35, r24	; 0x23
    1648:	9c a3       	std	Y+36, r25	; 0x24
    164a:	ad a3       	std	Y+37, r26	; 0x25
    164c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    164e:	6b a1       	ldd	r22, Y+35	; 0x23
    1650:	7c a1       	ldd	r23, Y+36	; 0x24
    1652:	8d a1       	ldd	r24, Y+37	; 0x25
    1654:	9e a1       	ldd	r25, Y+38	; 0x26
    1656:	20 e0       	ldi	r18, 0x00	; 0
    1658:	30 e0       	ldi	r19, 0x00	; 0
    165a:	40 e8       	ldi	r20, 0x80	; 128
    165c:	5f e3       	ldi	r21, 0x3F	; 63
    165e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1662:	88 23       	and	r24, r24
    1664:	2c f4       	brge	.+10     	; 0x1670 <Lcd_vidInit+0x150>
		__ticks = 1;
    1666:	81 e0       	ldi	r24, 0x01	; 1
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	9a a3       	std	Y+34, r25	; 0x22
    166c:	89 a3       	std	Y+33, r24	; 0x21
    166e:	3f c0       	rjmp	.+126    	; 0x16ee <Lcd_vidInit+0x1ce>
	else if (__tmp > 65535)
    1670:	6b a1       	ldd	r22, Y+35	; 0x23
    1672:	7c a1       	ldd	r23, Y+36	; 0x24
    1674:	8d a1       	ldd	r24, Y+37	; 0x25
    1676:	9e a1       	ldd	r25, Y+38	; 0x26
    1678:	20 e0       	ldi	r18, 0x00	; 0
    167a:	3f ef       	ldi	r19, 0xFF	; 255
    167c:	4f e7       	ldi	r20, 0x7F	; 127
    167e:	57 e4       	ldi	r21, 0x47	; 71
    1680:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1684:	18 16       	cp	r1, r24
    1686:	4c f5       	brge	.+82     	; 0x16da <Lcd_vidInit+0x1ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1688:	6f a1       	ldd	r22, Y+39	; 0x27
    168a:	78 a5       	ldd	r23, Y+40	; 0x28
    168c:	89 a5       	ldd	r24, Y+41	; 0x29
    168e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1690:	20 e0       	ldi	r18, 0x00	; 0
    1692:	30 e0       	ldi	r19, 0x00	; 0
    1694:	40 e2       	ldi	r20, 0x20	; 32
    1696:	51 e4       	ldi	r21, 0x41	; 65
    1698:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    169c:	dc 01       	movw	r26, r24
    169e:	cb 01       	movw	r24, r22
    16a0:	bc 01       	movw	r22, r24
    16a2:	cd 01       	movw	r24, r26
    16a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16a8:	dc 01       	movw	r26, r24
    16aa:	cb 01       	movw	r24, r22
    16ac:	9a a3       	std	Y+34, r25	; 0x22
    16ae:	89 a3       	std	Y+33, r24	; 0x21
    16b0:	0f c0       	rjmp	.+30     	; 0x16d0 <Lcd_vidInit+0x1b0>
    16b2:	80 e9       	ldi	r24, 0x90	; 144
    16b4:	91 e0       	ldi	r25, 0x01	; 1
    16b6:	98 a3       	std	Y+32, r25	; 0x20
    16b8:	8f 8f       	std	Y+31, r24	; 0x1f
    16ba:	8f 8d       	ldd	r24, Y+31	; 0x1f
    16bc:	98 a1       	ldd	r25, Y+32	; 0x20
    16be:	01 97       	sbiw	r24, 0x01	; 1
    16c0:	f1 f7       	brne	.-4      	; 0x16be <Lcd_vidInit+0x19e>
    16c2:	98 a3       	std	Y+32, r25	; 0x20
    16c4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16c6:	89 a1       	ldd	r24, Y+33	; 0x21
    16c8:	9a a1       	ldd	r25, Y+34	; 0x22
    16ca:	01 97       	sbiw	r24, 0x01	; 1
    16cc:	9a a3       	std	Y+34, r25	; 0x22
    16ce:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16d0:	89 a1       	ldd	r24, Y+33	; 0x21
    16d2:	9a a1       	ldd	r25, Y+34	; 0x22
    16d4:	00 97       	sbiw	r24, 0x00	; 0
    16d6:	69 f7       	brne	.-38     	; 0x16b2 <Lcd_vidInit+0x192>
    16d8:	14 c0       	rjmp	.+40     	; 0x1702 <Lcd_vidInit+0x1e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16da:	6b a1       	ldd	r22, Y+35	; 0x23
    16dc:	7c a1       	ldd	r23, Y+36	; 0x24
    16de:	8d a1       	ldd	r24, Y+37	; 0x25
    16e0:	9e a1       	ldd	r25, Y+38	; 0x26
    16e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16e6:	dc 01       	movw	r26, r24
    16e8:	cb 01       	movw	r24, r22
    16ea:	9a a3       	std	Y+34, r25	; 0x22
    16ec:	89 a3       	std	Y+33, r24	; 0x21
    16ee:	89 a1       	ldd	r24, Y+33	; 0x21
    16f0:	9a a1       	ldd	r25, Y+34	; 0x22
    16f2:	9e 8f       	std	Y+30, r25	; 0x1e
    16f4:	8d 8f       	std	Y+29, r24	; 0x1d
    16f6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    16f8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    16fa:	01 97       	sbiw	r24, 0x01	; 1
    16fc:	f1 f7       	brne	.-4      	; 0x16fa <Lcd_vidInit+0x1da>
    16fe:	9e 8f       	std	Y+30, r25	; 0x1e
    1700:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	Lcd_vidSendCommand( LCD_u8DISPLAY_ON | LCD_u8CURSOR_ON | LCD_u8CURSOR_BLINK_ON );
    1702:	8f e0       	ldi	r24, 0x0F	; 15
    1704:	0e 94 77 0c 	call	0x18ee	; 0x18ee <Lcd_vidSendCommand>
    1708:	80 e0       	ldi	r24, 0x00	; 0
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	a0 e8       	ldi	r26, 0x80	; 128
    170e:	bf e3       	ldi	r27, 0x3F	; 63
    1710:	89 8f       	std	Y+25, r24	; 0x19
    1712:	9a 8f       	std	Y+26, r25	; 0x1a
    1714:	ab 8f       	std	Y+27, r26	; 0x1b
    1716:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1718:	69 8d       	ldd	r22, Y+25	; 0x19
    171a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    171c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    171e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1720:	20 e0       	ldi	r18, 0x00	; 0
    1722:	30 e0       	ldi	r19, 0x00	; 0
    1724:	4a e7       	ldi	r20, 0x7A	; 122
    1726:	55 e4       	ldi	r21, 0x45	; 69
    1728:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    172c:	dc 01       	movw	r26, r24
    172e:	cb 01       	movw	r24, r22
    1730:	8d 8b       	std	Y+21, r24	; 0x15
    1732:	9e 8b       	std	Y+22, r25	; 0x16
    1734:	af 8b       	std	Y+23, r26	; 0x17
    1736:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1738:	6d 89       	ldd	r22, Y+21	; 0x15
    173a:	7e 89       	ldd	r23, Y+22	; 0x16
    173c:	8f 89       	ldd	r24, Y+23	; 0x17
    173e:	98 8d       	ldd	r25, Y+24	; 0x18
    1740:	20 e0       	ldi	r18, 0x00	; 0
    1742:	30 e0       	ldi	r19, 0x00	; 0
    1744:	40 e8       	ldi	r20, 0x80	; 128
    1746:	5f e3       	ldi	r21, 0x3F	; 63
    1748:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    174c:	88 23       	and	r24, r24
    174e:	2c f4       	brge	.+10     	; 0x175a <Lcd_vidInit+0x23a>
		__ticks = 1;
    1750:	81 e0       	ldi	r24, 0x01	; 1
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	9c 8b       	std	Y+20, r25	; 0x14
    1756:	8b 8b       	std	Y+19, r24	; 0x13
    1758:	3f c0       	rjmp	.+126    	; 0x17d8 <Lcd_vidInit+0x2b8>
	else if (__tmp > 65535)
    175a:	6d 89       	ldd	r22, Y+21	; 0x15
    175c:	7e 89       	ldd	r23, Y+22	; 0x16
    175e:	8f 89       	ldd	r24, Y+23	; 0x17
    1760:	98 8d       	ldd	r25, Y+24	; 0x18
    1762:	20 e0       	ldi	r18, 0x00	; 0
    1764:	3f ef       	ldi	r19, 0xFF	; 255
    1766:	4f e7       	ldi	r20, 0x7F	; 127
    1768:	57 e4       	ldi	r21, 0x47	; 71
    176a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    176e:	18 16       	cp	r1, r24
    1770:	4c f5       	brge	.+82     	; 0x17c4 <Lcd_vidInit+0x2a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1772:	69 8d       	ldd	r22, Y+25	; 0x19
    1774:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1776:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1778:	9c 8d       	ldd	r25, Y+28	; 0x1c
    177a:	20 e0       	ldi	r18, 0x00	; 0
    177c:	30 e0       	ldi	r19, 0x00	; 0
    177e:	40 e2       	ldi	r20, 0x20	; 32
    1780:	51 e4       	ldi	r21, 0x41	; 65
    1782:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1786:	dc 01       	movw	r26, r24
    1788:	cb 01       	movw	r24, r22
    178a:	bc 01       	movw	r22, r24
    178c:	cd 01       	movw	r24, r26
    178e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1792:	dc 01       	movw	r26, r24
    1794:	cb 01       	movw	r24, r22
    1796:	9c 8b       	std	Y+20, r25	; 0x14
    1798:	8b 8b       	std	Y+19, r24	; 0x13
    179a:	0f c0       	rjmp	.+30     	; 0x17ba <Lcd_vidInit+0x29a>
    179c:	80 e9       	ldi	r24, 0x90	; 144
    179e:	91 e0       	ldi	r25, 0x01	; 1
    17a0:	9a 8b       	std	Y+18, r25	; 0x12
    17a2:	89 8b       	std	Y+17, r24	; 0x11
    17a4:	89 89       	ldd	r24, Y+17	; 0x11
    17a6:	9a 89       	ldd	r25, Y+18	; 0x12
    17a8:	01 97       	sbiw	r24, 0x01	; 1
    17aa:	f1 f7       	brne	.-4      	; 0x17a8 <Lcd_vidInit+0x288>
    17ac:	9a 8b       	std	Y+18, r25	; 0x12
    17ae:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17b0:	8b 89       	ldd	r24, Y+19	; 0x13
    17b2:	9c 89       	ldd	r25, Y+20	; 0x14
    17b4:	01 97       	sbiw	r24, 0x01	; 1
    17b6:	9c 8b       	std	Y+20, r25	; 0x14
    17b8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17ba:	8b 89       	ldd	r24, Y+19	; 0x13
    17bc:	9c 89       	ldd	r25, Y+20	; 0x14
    17be:	00 97       	sbiw	r24, 0x00	; 0
    17c0:	69 f7       	brne	.-38     	; 0x179c <Lcd_vidInit+0x27c>
    17c2:	14 c0       	rjmp	.+40     	; 0x17ec <Lcd_vidInit+0x2cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17c4:	6d 89       	ldd	r22, Y+21	; 0x15
    17c6:	7e 89       	ldd	r23, Y+22	; 0x16
    17c8:	8f 89       	ldd	r24, Y+23	; 0x17
    17ca:	98 8d       	ldd	r25, Y+24	; 0x18
    17cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17d0:	dc 01       	movw	r26, r24
    17d2:	cb 01       	movw	r24, r22
    17d4:	9c 8b       	std	Y+20, r25	; 0x14
    17d6:	8b 8b       	std	Y+19, r24	; 0x13
    17d8:	8b 89       	ldd	r24, Y+19	; 0x13
    17da:	9c 89       	ldd	r25, Y+20	; 0x14
    17dc:	98 8b       	std	Y+16, r25	; 0x10
    17de:	8f 87       	std	Y+15, r24	; 0x0f
    17e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    17e2:	98 89       	ldd	r25, Y+16	; 0x10
    17e4:	01 97       	sbiw	r24, 0x01	; 1
    17e6:	f1 f7       	brne	.-4      	; 0x17e4 <Lcd_vidInit+0x2c4>
    17e8:	98 8b       	std	Y+16, r25	; 0x10
    17ea:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	Lcd_vidSendCommand( LCD_u8CLEAR_DISPLAY );
    17ec:	81 e0       	ldi	r24, 0x01	; 1
    17ee:	0e 94 77 0c 	call	0x18ee	; 0x18ee <Lcd_vidSendCommand>
    17f2:	80 e0       	ldi	r24, 0x00	; 0
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	a0 e0       	ldi	r26, 0x00	; 0
    17f8:	b0 e4       	ldi	r27, 0x40	; 64
    17fa:	8b 87       	std	Y+11, r24	; 0x0b
    17fc:	9c 87       	std	Y+12, r25	; 0x0c
    17fe:	ad 87       	std	Y+13, r26	; 0x0d
    1800:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1802:	6b 85       	ldd	r22, Y+11	; 0x0b
    1804:	7c 85       	ldd	r23, Y+12	; 0x0c
    1806:	8d 85       	ldd	r24, Y+13	; 0x0d
    1808:	9e 85       	ldd	r25, Y+14	; 0x0e
    180a:	20 e0       	ldi	r18, 0x00	; 0
    180c:	30 e0       	ldi	r19, 0x00	; 0
    180e:	4a e7       	ldi	r20, 0x7A	; 122
    1810:	55 e4       	ldi	r21, 0x45	; 69
    1812:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1816:	dc 01       	movw	r26, r24
    1818:	cb 01       	movw	r24, r22
    181a:	8f 83       	std	Y+7, r24	; 0x07
    181c:	98 87       	std	Y+8, r25	; 0x08
    181e:	a9 87       	std	Y+9, r26	; 0x09
    1820:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1822:	6f 81       	ldd	r22, Y+7	; 0x07
    1824:	78 85       	ldd	r23, Y+8	; 0x08
    1826:	89 85       	ldd	r24, Y+9	; 0x09
    1828:	9a 85       	ldd	r25, Y+10	; 0x0a
    182a:	20 e0       	ldi	r18, 0x00	; 0
    182c:	30 e0       	ldi	r19, 0x00	; 0
    182e:	40 e8       	ldi	r20, 0x80	; 128
    1830:	5f e3       	ldi	r21, 0x3F	; 63
    1832:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1836:	88 23       	and	r24, r24
    1838:	2c f4       	brge	.+10     	; 0x1844 <Lcd_vidInit+0x324>
		__ticks = 1;
    183a:	81 e0       	ldi	r24, 0x01	; 1
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	9e 83       	std	Y+6, r25	; 0x06
    1840:	8d 83       	std	Y+5, r24	; 0x05
    1842:	3f c0       	rjmp	.+126    	; 0x18c2 <Lcd_vidInit+0x3a2>
	else if (__tmp > 65535)
    1844:	6f 81       	ldd	r22, Y+7	; 0x07
    1846:	78 85       	ldd	r23, Y+8	; 0x08
    1848:	89 85       	ldd	r24, Y+9	; 0x09
    184a:	9a 85       	ldd	r25, Y+10	; 0x0a
    184c:	20 e0       	ldi	r18, 0x00	; 0
    184e:	3f ef       	ldi	r19, 0xFF	; 255
    1850:	4f e7       	ldi	r20, 0x7F	; 127
    1852:	57 e4       	ldi	r21, 0x47	; 71
    1854:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1858:	18 16       	cp	r1, r24
    185a:	4c f5       	brge	.+82     	; 0x18ae <Lcd_vidInit+0x38e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    185c:	6b 85       	ldd	r22, Y+11	; 0x0b
    185e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1860:	8d 85       	ldd	r24, Y+13	; 0x0d
    1862:	9e 85       	ldd	r25, Y+14	; 0x0e
    1864:	20 e0       	ldi	r18, 0x00	; 0
    1866:	30 e0       	ldi	r19, 0x00	; 0
    1868:	40 e2       	ldi	r20, 0x20	; 32
    186a:	51 e4       	ldi	r21, 0x41	; 65
    186c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1870:	dc 01       	movw	r26, r24
    1872:	cb 01       	movw	r24, r22
    1874:	bc 01       	movw	r22, r24
    1876:	cd 01       	movw	r24, r26
    1878:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    187c:	dc 01       	movw	r26, r24
    187e:	cb 01       	movw	r24, r22
    1880:	9e 83       	std	Y+6, r25	; 0x06
    1882:	8d 83       	std	Y+5, r24	; 0x05
    1884:	0f c0       	rjmp	.+30     	; 0x18a4 <Lcd_vidInit+0x384>
    1886:	80 e9       	ldi	r24, 0x90	; 144
    1888:	91 e0       	ldi	r25, 0x01	; 1
    188a:	9c 83       	std	Y+4, r25	; 0x04
    188c:	8b 83       	std	Y+3, r24	; 0x03
    188e:	8b 81       	ldd	r24, Y+3	; 0x03
    1890:	9c 81       	ldd	r25, Y+4	; 0x04
    1892:	01 97       	sbiw	r24, 0x01	; 1
    1894:	f1 f7       	brne	.-4      	; 0x1892 <Lcd_vidInit+0x372>
    1896:	9c 83       	std	Y+4, r25	; 0x04
    1898:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    189a:	8d 81       	ldd	r24, Y+5	; 0x05
    189c:	9e 81       	ldd	r25, Y+6	; 0x06
    189e:	01 97       	sbiw	r24, 0x01	; 1
    18a0:	9e 83       	std	Y+6, r25	; 0x06
    18a2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18a4:	8d 81       	ldd	r24, Y+5	; 0x05
    18a6:	9e 81       	ldd	r25, Y+6	; 0x06
    18a8:	00 97       	sbiw	r24, 0x00	; 0
    18aa:	69 f7       	brne	.-38     	; 0x1886 <Lcd_vidInit+0x366>
    18ac:	14 c0       	rjmp	.+40     	; 0x18d6 <Lcd_vidInit+0x3b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18ae:	6f 81       	ldd	r22, Y+7	; 0x07
    18b0:	78 85       	ldd	r23, Y+8	; 0x08
    18b2:	89 85       	ldd	r24, Y+9	; 0x09
    18b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    18b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18ba:	dc 01       	movw	r26, r24
    18bc:	cb 01       	movw	r24, r22
    18be:	9e 83       	std	Y+6, r25	; 0x06
    18c0:	8d 83       	std	Y+5, r24	; 0x05
    18c2:	8d 81       	ldd	r24, Y+5	; 0x05
    18c4:	9e 81       	ldd	r25, Y+6	; 0x06
    18c6:	9a 83       	std	Y+2, r25	; 0x02
    18c8:	89 83       	std	Y+1, r24	; 0x01
    18ca:	89 81       	ldd	r24, Y+1	; 0x01
    18cc:	9a 81       	ldd	r25, Y+2	; 0x02
    18ce:	01 97       	sbiw	r24, 0x01	; 1
    18d0:	f1 f7       	brne	.-4      	; 0x18ce <Lcd_vidInit+0x3ae>
    18d2:	9a 83       	std	Y+2, r25	; 0x02
    18d4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	Lcd_vidSendCommand( LCD_u8CURSOR_LEFT_TO_RIGHT );
    18d6:	86 e0       	ldi	r24, 0x06	; 6
    18d8:	0e 94 77 0c 	call	0x18ee	; 0x18ee <Lcd_vidSendCommand>
}
    18dc:	e8 96       	adiw	r28, 0x38	; 56
    18de:	0f b6       	in	r0, 0x3f	; 63
    18e0:	f8 94       	cli
    18e2:	de bf       	out	0x3e, r29	; 62
    18e4:	0f be       	out	0x3f, r0	; 63
    18e6:	cd bf       	out	0x3d, r28	; 61
    18e8:	cf 91       	pop	r28
    18ea:	df 91       	pop	r29
    18ec:	08 95       	ret

000018ee <Lcd_vidSendCommand>:

void Lcd_vidSendCommand( u8 Copy_u8Command )
{
    18ee:	df 93       	push	r29
    18f0:	cf 93       	push	r28
    18f2:	cd b7       	in	r28, 0x3d	; 61
    18f4:	de b7       	in	r29, 0x3e	; 62
    18f6:	6d 97       	sbiw	r28, 0x1d	; 29
    18f8:	0f b6       	in	r0, 0x3f	; 63
    18fa:	f8 94       	cli
    18fc:	de bf       	out	0x3e, r29	; 62
    18fe:	0f be       	out	0x3f, r0	; 63
    1900:	cd bf       	out	0x3d, r28	; 61
    1902:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_enuWritePort( LCD_u8PORT_WRITE , Copy_u8Command );
    1904:	83 e0       	ldi	r24, 0x03	; 3
    1906:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1908:	0e 94 61 09 	call	0x12c2	; 0x12c2 <DIO_enuWritePort>
	DIO_enuWriteChannel( LCD_u8RW , LCD_u8RW_WRITE );
    190c:	88 e0       	ldi	r24, 0x08	; 8
    190e:	60 e0       	ldi	r22, 0x00	; 0
    1910:	0e 94 cc 07 	call	0xf98	; 0xf98 <DIO_enuWriteChannel>
	DIO_enuWriteChannel( LCD_u8RS , LCD_u8RS_COMMAND );
    1914:	89 e0       	ldi	r24, 0x09	; 9
    1916:	60 e0       	ldi	r22, 0x00	; 0
    1918:	0e 94 cc 07 	call	0xf98	; 0xf98 <DIO_enuWriteChannel>
	DIO_enuWriteChannel( LCD_u8ENABLE , LCD_u8ENABLE_HIGH );
    191c:	8a e0       	ldi	r24, 0x0A	; 10
    191e:	61 e0       	ldi	r22, 0x01	; 1
    1920:	0e 94 cc 07 	call	0xf98	; 0xf98 <DIO_enuWriteChannel>
    1924:	80 e0       	ldi	r24, 0x00	; 0
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	a0 e0       	ldi	r26, 0x00	; 0
    192a:	b0 e4       	ldi	r27, 0x40	; 64
    192c:	89 8f       	std	Y+25, r24	; 0x19
    192e:	9a 8f       	std	Y+26, r25	; 0x1a
    1930:	ab 8f       	std	Y+27, r26	; 0x1b
    1932:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1934:	69 8d       	ldd	r22, Y+25	; 0x19
    1936:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1938:	8b 8d       	ldd	r24, Y+27	; 0x1b
    193a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    193c:	20 e0       	ldi	r18, 0x00	; 0
    193e:	30 e0       	ldi	r19, 0x00	; 0
    1940:	4a e7       	ldi	r20, 0x7A	; 122
    1942:	55 e4       	ldi	r21, 0x45	; 69
    1944:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1948:	dc 01       	movw	r26, r24
    194a:	cb 01       	movw	r24, r22
    194c:	8d 8b       	std	Y+21, r24	; 0x15
    194e:	9e 8b       	std	Y+22, r25	; 0x16
    1950:	af 8b       	std	Y+23, r26	; 0x17
    1952:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1954:	6d 89       	ldd	r22, Y+21	; 0x15
    1956:	7e 89       	ldd	r23, Y+22	; 0x16
    1958:	8f 89       	ldd	r24, Y+23	; 0x17
    195a:	98 8d       	ldd	r25, Y+24	; 0x18
    195c:	20 e0       	ldi	r18, 0x00	; 0
    195e:	30 e0       	ldi	r19, 0x00	; 0
    1960:	40 e8       	ldi	r20, 0x80	; 128
    1962:	5f e3       	ldi	r21, 0x3F	; 63
    1964:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1968:	88 23       	and	r24, r24
    196a:	2c f4       	brge	.+10     	; 0x1976 <Lcd_vidSendCommand+0x88>
		__ticks = 1;
    196c:	81 e0       	ldi	r24, 0x01	; 1
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	9c 8b       	std	Y+20, r25	; 0x14
    1972:	8b 8b       	std	Y+19, r24	; 0x13
    1974:	3f c0       	rjmp	.+126    	; 0x19f4 <Lcd_vidSendCommand+0x106>
	else if (__tmp > 65535)
    1976:	6d 89       	ldd	r22, Y+21	; 0x15
    1978:	7e 89       	ldd	r23, Y+22	; 0x16
    197a:	8f 89       	ldd	r24, Y+23	; 0x17
    197c:	98 8d       	ldd	r25, Y+24	; 0x18
    197e:	20 e0       	ldi	r18, 0x00	; 0
    1980:	3f ef       	ldi	r19, 0xFF	; 255
    1982:	4f e7       	ldi	r20, 0x7F	; 127
    1984:	57 e4       	ldi	r21, 0x47	; 71
    1986:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    198a:	18 16       	cp	r1, r24
    198c:	4c f5       	brge	.+82     	; 0x19e0 <Lcd_vidSendCommand+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    198e:	69 8d       	ldd	r22, Y+25	; 0x19
    1990:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1992:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1994:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1996:	20 e0       	ldi	r18, 0x00	; 0
    1998:	30 e0       	ldi	r19, 0x00	; 0
    199a:	40 e2       	ldi	r20, 0x20	; 32
    199c:	51 e4       	ldi	r21, 0x41	; 65
    199e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19a2:	dc 01       	movw	r26, r24
    19a4:	cb 01       	movw	r24, r22
    19a6:	bc 01       	movw	r22, r24
    19a8:	cd 01       	movw	r24, r26
    19aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19ae:	dc 01       	movw	r26, r24
    19b0:	cb 01       	movw	r24, r22
    19b2:	9c 8b       	std	Y+20, r25	; 0x14
    19b4:	8b 8b       	std	Y+19, r24	; 0x13
    19b6:	0f c0       	rjmp	.+30     	; 0x19d6 <Lcd_vidSendCommand+0xe8>
    19b8:	80 e9       	ldi	r24, 0x90	; 144
    19ba:	91 e0       	ldi	r25, 0x01	; 1
    19bc:	9a 8b       	std	Y+18, r25	; 0x12
    19be:	89 8b       	std	Y+17, r24	; 0x11
    19c0:	89 89       	ldd	r24, Y+17	; 0x11
    19c2:	9a 89       	ldd	r25, Y+18	; 0x12
    19c4:	01 97       	sbiw	r24, 0x01	; 1
    19c6:	f1 f7       	brne	.-4      	; 0x19c4 <Lcd_vidSendCommand+0xd6>
    19c8:	9a 8b       	std	Y+18, r25	; 0x12
    19ca:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19cc:	8b 89       	ldd	r24, Y+19	; 0x13
    19ce:	9c 89       	ldd	r25, Y+20	; 0x14
    19d0:	01 97       	sbiw	r24, 0x01	; 1
    19d2:	9c 8b       	std	Y+20, r25	; 0x14
    19d4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19d6:	8b 89       	ldd	r24, Y+19	; 0x13
    19d8:	9c 89       	ldd	r25, Y+20	; 0x14
    19da:	00 97       	sbiw	r24, 0x00	; 0
    19dc:	69 f7       	brne	.-38     	; 0x19b8 <Lcd_vidSendCommand+0xca>
    19de:	14 c0       	rjmp	.+40     	; 0x1a08 <Lcd_vidSendCommand+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19e0:	6d 89       	ldd	r22, Y+21	; 0x15
    19e2:	7e 89       	ldd	r23, Y+22	; 0x16
    19e4:	8f 89       	ldd	r24, Y+23	; 0x17
    19e6:	98 8d       	ldd	r25, Y+24	; 0x18
    19e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19ec:	dc 01       	movw	r26, r24
    19ee:	cb 01       	movw	r24, r22
    19f0:	9c 8b       	std	Y+20, r25	; 0x14
    19f2:	8b 8b       	std	Y+19, r24	; 0x13
    19f4:	8b 89       	ldd	r24, Y+19	; 0x13
    19f6:	9c 89       	ldd	r25, Y+20	; 0x14
    19f8:	98 8b       	std	Y+16, r25	; 0x10
    19fa:	8f 87       	std	Y+15, r24	; 0x0f
    19fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    19fe:	98 89       	ldd	r25, Y+16	; 0x10
    1a00:	01 97       	sbiw	r24, 0x01	; 1
    1a02:	f1 f7       	brne	.-4      	; 0x1a00 <Lcd_vidSendCommand+0x112>
    1a04:	98 8b       	std	Y+16, r25	; 0x10
    1a06:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_enuWriteChannel( LCD_u8ENABLE , LCD_u8ENABLE_LOW );
    1a08:	8a e0       	ldi	r24, 0x0A	; 10
    1a0a:	60 e0       	ldi	r22, 0x00	; 0
    1a0c:	0e 94 cc 07 	call	0xf98	; 0xf98 <DIO_enuWriteChannel>
    1a10:	80 e0       	ldi	r24, 0x00	; 0
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	a0 e0       	ldi	r26, 0x00	; 0
    1a16:	b0 e4       	ldi	r27, 0x40	; 64
    1a18:	8b 87       	std	Y+11, r24	; 0x0b
    1a1a:	9c 87       	std	Y+12, r25	; 0x0c
    1a1c:	ad 87       	std	Y+13, r26	; 0x0d
    1a1e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a20:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a22:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a24:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a26:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a28:	20 e0       	ldi	r18, 0x00	; 0
    1a2a:	30 e0       	ldi	r19, 0x00	; 0
    1a2c:	4a e7       	ldi	r20, 0x7A	; 122
    1a2e:	55 e4       	ldi	r21, 0x45	; 69
    1a30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a34:	dc 01       	movw	r26, r24
    1a36:	cb 01       	movw	r24, r22
    1a38:	8f 83       	std	Y+7, r24	; 0x07
    1a3a:	98 87       	std	Y+8, r25	; 0x08
    1a3c:	a9 87       	std	Y+9, r26	; 0x09
    1a3e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a40:	6f 81       	ldd	r22, Y+7	; 0x07
    1a42:	78 85       	ldd	r23, Y+8	; 0x08
    1a44:	89 85       	ldd	r24, Y+9	; 0x09
    1a46:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a48:	20 e0       	ldi	r18, 0x00	; 0
    1a4a:	30 e0       	ldi	r19, 0x00	; 0
    1a4c:	40 e8       	ldi	r20, 0x80	; 128
    1a4e:	5f e3       	ldi	r21, 0x3F	; 63
    1a50:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a54:	88 23       	and	r24, r24
    1a56:	2c f4       	brge	.+10     	; 0x1a62 <Lcd_vidSendCommand+0x174>
		__ticks = 1;
    1a58:	81 e0       	ldi	r24, 0x01	; 1
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	9e 83       	std	Y+6, r25	; 0x06
    1a5e:	8d 83       	std	Y+5, r24	; 0x05
    1a60:	3f c0       	rjmp	.+126    	; 0x1ae0 <Lcd_vidSendCommand+0x1f2>
	else if (__tmp > 65535)
    1a62:	6f 81       	ldd	r22, Y+7	; 0x07
    1a64:	78 85       	ldd	r23, Y+8	; 0x08
    1a66:	89 85       	ldd	r24, Y+9	; 0x09
    1a68:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a6a:	20 e0       	ldi	r18, 0x00	; 0
    1a6c:	3f ef       	ldi	r19, 0xFF	; 255
    1a6e:	4f e7       	ldi	r20, 0x7F	; 127
    1a70:	57 e4       	ldi	r21, 0x47	; 71
    1a72:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a76:	18 16       	cp	r1, r24
    1a78:	4c f5       	brge	.+82     	; 0x1acc <Lcd_vidSendCommand+0x1de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a7a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a7c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a7e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a80:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a82:	20 e0       	ldi	r18, 0x00	; 0
    1a84:	30 e0       	ldi	r19, 0x00	; 0
    1a86:	40 e2       	ldi	r20, 0x20	; 32
    1a88:	51 e4       	ldi	r21, 0x41	; 65
    1a8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a8e:	dc 01       	movw	r26, r24
    1a90:	cb 01       	movw	r24, r22
    1a92:	bc 01       	movw	r22, r24
    1a94:	cd 01       	movw	r24, r26
    1a96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a9a:	dc 01       	movw	r26, r24
    1a9c:	cb 01       	movw	r24, r22
    1a9e:	9e 83       	std	Y+6, r25	; 0x06
    1aa0:	8d 83       	std	Y+5, r24	; 0x05
    1aa2:	0f c0       	rjmp	.+30     	; 0x1ac2 <Lcd_vidSendCommand+0x1d4>
    1aa4:	80 e9       	ldi	r24, 0x90	; 144
    1aa6:	91 e0       	ldi	r25, 0x01	; 1
    1aa8:	9c 83       	std	Y+4, r25	; 0x04
    1aaa:	8b 83       	std	Y+3, r24	; 0x03
    1aac:	8b 81       	ldd	r24, Y+3	; 0x03
    1aae:	9c 81       	ldd	r25, Y+4	; 0x04
    1ab0:	01 97       	sbiw	r24, 0x01	; 1
    1ab2:	f1 f7       	brne	.-4      	; 0x1ab0 <Lcd_vidSendCommand+0x1c2>
    1ab4:	9c 83       	std	Y+4, r25	; 0x04
    1ab6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ab8:	8d 81       	ldd	r24, Y+5	; 0x05
    1aba:	9e 81       	ldd	r25, Y+6	; 0x06
    1abc:	01 97       	sbiw	r24, 0x01	; 1
    1abe:	9e 83       	std	Y+6, r25	; 0x06
    1ac0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ac2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ac4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ac6:	00 97       	sbiw	r24, 0x00	; 0
    1ac8:	69 f7       	brne	.-38     	; 0x1aa4 <Lcd_vidSendCommand+0x1b6>
    1aca:	14 c0       	rjmp	.+40     	; 0x1af4 <Lcd_vidSendCommand+0x206>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1acc:	6f 81       	ldd	r22, Y+7	; 0x07
    1ace:	78 85       	ldd	r23, Y+8	; 0x08
    1ad0:	89 85       	ldd	r24, Y+9	; 0x09
    1ad2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ad4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ad8:	dc 01       	movw	r26, r24
    1ada:	cb 01       	movw	r24, r22
    1adc:	9e 83       	std	Y+6, r25	; 0x06
    1ade:	8d 83       	std	Y+5, r24	; 0x05
    1ae0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ae2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ae4:	9a 83       	std	Y+2, r25	; 0x02
    1ae6:	89 83       	std	Y+1, r24	; 0x01
    1ae8:	89 81       	ldd	r24, Y+1	; 0x01
    1aea:	9a 81       	ldd	r25, Y+2	; 0x02
    1aec:	01 97       	sbiw	r24, 0x01	; 1
    1aee:	f1 f7       	brne	.-4      	; 0x1aec <Lcd_vidSendCommand+0x1fe>
    1af0:	9a 83       	std	Y+2, r25	; 0x02
    1af2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1af4:	6d 96       	adiw	r28, 0x1d	; 29
    1af6:	0f b6       	in	r0, 0x3f	; 63
    1af8:	f8 94       	cli
    1afa:	de bf       	out	0x3e, r29	; 62
    1afc:	0f be       	out	0x3f, r0	; 63
    1afe:	cd bf       	out	0x3d, r28	; 61
    1b00:	cf 91       	pop	r28
    1b02:	df 91       	pop	r29
    1b04:	08 95       	ret

00001b06 <Lcd_vidDisplayCharacter>:
void Lcd_vidDisplayCharacter( u8 Copy_u8Character )
{
    1b06:	df 93       	push	r29
    1b08:	cf 93       	push	r28
    1b0a:	cd b7       	in	r28, 0x3d	; 61
    1b0c:	de b7       	in	r29, 0x3e	; 62
    1b0e:	6d 97       	sbiw	r28, 0x1d	; 29
    1b10:	0f b6       	in	r0, 0x3f	; 63
    1b12:	f8 94       	cli
    1b14:	de bf       	out	0x3e, r29	; 62
    1b16:	0f be       	out	0x3f, r0	; 63
    1b18:	cd bf       	out	0x3d, r28	; 61
    1b1a:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_enuWritePort( LCD_u8PORT_WRITE , Copy_u8Character );
    1b1c:	83 e0       	ldi	r24, 0x03	; 3
    1b1e:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1b20:	0e 94 61 09 	call	0x12c2	; 0x12c2 <DIO_enuWritePort>
	DIO_enuWriteChannel( LCD_u8RW , LCD_u8RW_WRITE );
    1b24:	88 e0       	ldi	r24, 0x08	; 8
    1b26:	60 e0       	ldi	r22, 0x00	; 0
    1b28:	0e 94 cc 07 	call	0xf98	; 0xf98 <DIO_enuWriteChannel>
	DIO_enuWriteChannel( LCD_u8RS , LCD_u8RS_DATA );
    1b2c:	89 e0       	ldi	r24, 0x09	; 9
    1b2e:	61 e0       	ldi	r22, 0x01	; 1
    1b30:	0e 94 cc 07 	call	0xf98	; 0xf98 <DIO_enuWriteChannel>
	DIO_enuWriteChannel( LCD_u8ENABLE , LCD_u8ENABLE_HIGH );
    1b34:	8a e0       	ldi	r24, 0x0A	; 10
    1b36:	61 e0       	ldi	r22, 0x01	; 1
    1b38:	0e 94 cc 07 	call	0xf98	; 0xf98 <DIO_enuWriteChannel>
    1b3c:	80 e0       	ldi	r24, 0x00	; 0
    1b3e:	90 e0       	ldi	r25, 0x00	; 0
    1b40:	a0 e0       	ldi	r26, 0x00	; 0
    1b42:	b0 e4       	ldi	r27, 0x40	; 64
    1b44:	89 8f       	std	Y+25, r24	; 0x19
    1b46:	9a 8f       	std	Y+26, r25	; 0x1a
    1b48:	ab 8f       	std	Y+27, r26	; 0x1b
    1b4a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b4c:	69 8d       	ldd	r22, Y+25	; 0x19
    1b4e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b50:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b52:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b54:	20 e0       	ldi	r18, 0x00	; 0
    1b56:	30 e0       	ldi	r19, 0x00	; 0
    1b58:	4a e7       	ldi	r20, 0x7A	; 122
    1b5a:	55 e4       	ldi	r21, 0x45	; 69
    1b5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b60:	dc 01       	movw	r26, r24
    1b62:	cb 01       	movw	r24, r22
    1b64:	8d 8b       	std	Y+21, r24	; 0x15
    1b66:	9e 8b       	std	Y+22, r25	; 0x16
    1b68:	af 8b       	std	Y+23, r26	; 0x17
    1b6a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b6c:	6d 89       	ldd	r22, Y+21	; 0x15
    1b6e:	7e 89       	ldd	r23, Y+22	; 0x16
    1b70:	8f 89       	ldd	r24, Y+23	; 0x17
    1b72:	98 8d       	ldd	r25, Y+24	; 0x18
    1b74:	20 e0       	ldi	r18, 0x00	; 0
    1b76:	30 e0       	ldi	r19, 0x00	; 0
    1b78:	40 e8       	ldi	r20, 0x80	; 128
    1b7a:	5f e3       	ldi	r21, 0x3F	; 63
    1b7c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b80:	88 23       	and	r24, r24
    1b82:	2c f4       	brge	.+10     	; 0x1b8e <Lcd_vidDisplayCharacter+0x88>
		__ticks = 1;
    1b84:	81 e0       	ldi	r24, 0x01	; 1
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	9c 8b       	std	Y+20, r25	; 0x14
    1b8a:	8b 8b       	std	Y+19, r24	; 0x13
    1b8c:	3f c0       	rjmp	.+126    	; 0x1c0c <Lcd_vidDisplayCharacter+0x106>
	else if (__tmp > 65535)
    1b8e:	6d 89       	ldd	r22, Y+21	; 0x15
    1b90:	7e 89       	ldd	r23, Y+22	; 0x16
    1b92:	8f 89       	ldd	r24, Y+23	; 0x17
    1b94:	98 8d       	ldd	r25, Y+24	; 0x18
    1b96:	20 e0       	ldi	r18, 0x00	; 0
    1b98:	3f ef       	ldi	r19, 0xFF	; 255
    1b9a:	4f e7       	ldi	r20, 0x7F	; 127
    1b9c:	57 e4       	ldi	r21, 0x47	; 71
    1b9e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ba2:	18 16       	cp	r1, r24
    1ba4:	4c f5       	brge	.+82     	; 0x1bf8 <Lcd_vidDisplayCharacter+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ba6:	69 8d       	ldd	r22, Y+25	; 0x19
    1ba8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1baa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bae:	20 e0       	ldi	r18, 0x00	; 0
    1bb0:	30 e0       	ldi	r19, 0x00	; 0
    1bb2:	40 e2       	ldi	r20, 0x20	; 32
    1bb4:	51 e4       	ldi	r21, 0x41	; 65
    1bb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bba:	dc 01       	movw	r26, r24
    1bbc:	cb 01       	movw	r24, r22
    1bbe:	bc 01       	movw	r22, r24
    1bc0:	cd 01       	movw	r24, r26
    1bc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bc6:	dc 01       	movw	r26, r24
    1bc8:	cb 01       	movw	r24, r22
    1bca:	9c 8b       	std	Y+20, r25	; 0x14
    1bcc:	8b 8b       	std	Y+19, r24	; 0x13
    1bce:	0f c0       	rjmp	.+30     	; 0x1bee <Lcd_vidDisplayCharacter+0xe8>
    1bd0:	80 e9       	ldi	r24, 0x90	; 144
    1bd2:	91 e0       	ldi	r25, 0x01	; 1
    1bd4:	9a 8b       	std	Y+18, r25	; 0x12
    1bd6:	89 8b       	std	Y+17, r24	; 0x11
    1bd8:	89 89       	ldd	r24, Y+17	; 0x11
    1bda:	9a 89       	ldd	r25, Y+18	; 0x12
    1bdc:	01 97       	sbiw	r24, 0x01	; 1
    1bde:	f1 f7       	brne	.-4      	; 0x1bdc <Lcd_vidDisplayCharacter+0xd6>
    1be0:	9a 8b       	std	Y+18, r25	; 0x12
    1be2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1be4:	8b 89       	ldd	r24, Y+19	; 0x13
    1be6:	9c 89       	ldd	r25, Y+20	; 0x14
    1be8:	01 97       	sbiw	r24, 0x01	; 1
    1bea:	9c 8b       	std	Y+20, r25	; 0x14
    1bec:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bee:	8b 89       	ldd	r24, Y+19	; 0x13
    1bf0:	9c 89       	ldd	r25, Y+20	; 0x14
    1bf2:	00 97       	sbiw	r24, 0x00	; 0
    1bf4:	69 f7       	brne	.-38     	; 0x1bd0 <Lcd_vidDisplayCharacter+0xca>
    1bf6:	14 c0       	rjmp	.+40     	; 0x1c20 <Lcd_vidDisplayCharacter+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bf8:	6d 89       	ldd	r22, Y+21	; 0x15
    1bfa:	7e 89       	ldd	r23, Y+22	; 0x16
    1bfc:	8f 89       	ldd	r24, Y+23	; 0x17
    1bfe:	98 8d       	ldd	r25, Y+24	; 0x18
    1c00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c04:	dc 01       	movw	r26, r24
    1c06:	cb 01       	movw	r24, r22
    1c08:	9c 8b       	std	Y+20, r25	; 0x14
    1c0a:	8b 8b       	std	Y+19, r24	; 0x13
    1c0c:	8b 89       	ldd	r24, Y+19	; 0x13
    1c0e:	9c 89       	ldd	r25, Y+20	; 0x14
    1c10:	98 8b       	std	Y+16, r25	; 0x10
    1c12:	8f 87       	std	Y+15, r24	; 0x0f
    1c14:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c16:	98 89       	ldd	r25, Y+16	; 0x10
    1c18:	01 97       	sbiw	r24, 0x01	; 1
    1c1a:	f1 f7       	brne	.-4      	; 0x1c18 <Lcd_vidDisplayCharacter+0x112>
    1c1c:	98 8b       	std	Y+16, r25	; 0x10
    1c1e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_enuWriteChannel( LCD_u8ENABLE , LCD_u8ENABLE_LOW );
    1c20:	8a e0       	ldi	r24, 0x0A	; 10
    1c22:	60 e0       	ldi	r22, 0x00	; 0
    1c24:	0e 94 cc 07 	call	0xf98	; 0xf98 <DIO_enuWriteChannel>
    1c28:	80 e0       	ldi	r24, 0x00	; 0
    1c2a:	90 e0       	ldi	r25, 0x00	; 0
    1c2c:	a0 e0       	ldi	r26, 0x00	; 0
    1c2e:	b0 e4       	ldi	r27, 0x40	; 64
    1c30:	8b 87       	std	Y+11, r24	; 0x0b
    1c32:	9c 87       	std	Y+12, r25	; 0x0c
    1c34:	ad 87       	std	Y+13, r26	; 0x0d
    1c36:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c38:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c3a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c3c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c3e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c40:	20 e0       	ldi	r18, 0x00	; 0
    1c42:	30 e0       	ldi	r19, 0x00	; 0
    1c44:	4a e7       	ldi	r20, 0x7A	; 122
    1c46:	55 e4       	ldi	r21, 0x45	; 69
    1c48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c4c:	dc 01       	movw	r26, r24
    1c4e:	cb 01       	movw	r24, r22
    1c50:	8f 83       	std	Y+7, r24	; 0x07
    1c52:	98 87       	std	Y+8, r25	; 0x08
    1c54:	a9 87       	std	Y+9, r26	; 0x09
    1c56:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c58:	6f 81       	ldd	r22, Y+7	; 0x07
    1c5a:	78 85       	ldd	r23, Y+8	; 0x08
    1c5c:	89 85       	ldd	r24, Y+9	; 0x09
    1c5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c60:	20 e0       	ldi	r18, 0x00	; 0
    1c62:	30 e0       	ldi	r19, 0x00	; 0
    1c64:	40 e8       	ldi	r20, 0x80	; 128
    1c66:	5f e3       	ldi	r21, 0x3F	; 63
    1c68:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c6c:	88 23       	and	r24, r24
    1c6e:	2c f4       	brge	.+10     	; 0x1c7a <Lcd_vidDisplayCharacter+0x174>
		__ticks = 1;
    1c70:	81 e0       	ldi	r24, 0x01	; 1
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	9e 83       	std	Y+6, r25	; 0x06
    1c76:	8d 83       	std	Y+5, r24	; 0x05
    1c78:	3f c0       	rjmp	.+126    	; 0x1cf8 <Lcd_vidDisplayCharacter+0x1f2>
	else if (__tmp > 65535)
    1c7a:	6f 81       	ldd	r22, Y+7	; 0x07
    1c7c:	78 85       	ldd	r23, Y+8	; 0x08
    1c7e:	89 85       	ldd	r24, Y+9	; 0x09
    1c80:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c82:	20 e0       	ldi	r18, 0x00	; 0
    1c84:	3f ef       	ldi	r19, 0xFF	; 255
    1c86:	4f e7       	ldi	r20, 0x7F	; 127
    1c88:	57 e4       	ldi	r21, 0x47	; 71
    1c8a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c8e:	18 16       	cp	r1, r24
    1c90:	4c f5       	brge	.+82     	; 0x1ce4 <Lcd_vidDisplayCharacter+0x1de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c92:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c94:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c96:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c98:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c9a:	20 e0       	ldi	r18, 0x00	; 0
    1c9c:	30 e0       	ldi	r19, 0x00	; 0
    1c9e:	40 e2       	ldi	r20, 0x20	; 32
    1ca0:	51 e4       	ldi	r21, 0x41	; 65
    1ca2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ca6:	dc 01       	movw	r26, r24
    1ca8:	cb 01       	movw	r24, r22
    1caa:	bc 01       	movw	r22, r24
    1cac:	cd 01       	movw	r24, r26
    1cae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cb2:	dc 01       	movw	r26, r24
    1cb4:	cb 01       	movw	r24, r22
    1cb6:	9e 83       	std	Y+6, r25	; 0x06
    1cb8:	8d 83       	std	Y+5, r24	; 0x05
    1cba:	0f c0       	rjmp	.+30     	; 0x1cda <Lcd_vidDisplayCharacter+0x1d4>
    1cbc:	80 e9       	ldi	r24, 0x90	; 144
    1cbe:	91 e0       	ldi	r25, 0x01	; 1
    1cc0:	9c 83       	std	Y+4, r25	; 0x04
    1cc2:	8b 83       	std	Y+3, r24	; 0x03
    1cc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc6:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc8:	01 97       	sbiw	r24, 0x01	; 1
    1cca:	f1 f7       	brne	.-4      	; 0x1cc8 <Lcd_vidDisplayCharacter+0x1c2>
    1ccc:	9c 83       	std	Y+4, r25	; 0x04
    1cce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cd0:	8d 81       	ldd	r24, Y+5	; 0x05
    1cd2:	9e 81       	ldd	r25, Y+6	; 0x06
    1cd4:	01 97       	sbiw	r24, 0x01	; 1
    1cd6:	9e 83       	std	Y+6, r25	; 0x06
    1cd8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cda:	8d 81       	ldd	r24, Y+5	; 0x05
    1cdc:	9e 81       	ldd	r25, Y+6	; 0x06
    1cde:	00 97       	sbiw	r24, 0x00	; 0
    1ce0:	69 f7       	brne	.-38     	; 0x1cbc <Lcd_vidDisplayCharacter+0x1b6>
    1ce2:	14 c0       	rjmp	.+40     	; 0x1d0c <Lcd_vidDisplayCharacter+0x206>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ce4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ce6:	78 85       	ldd	r23, Y+8	; 0x08
    1ce8:	89 85       	ldd	r24, Y+9	; 0x09
    1cea:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cf0:	dc 01       	movw	r26, r24
    1cf2:	cb 01       	movw	r24, r22
    1cf4:	9e 83       	std	Y+6, r25	; 0x06
    1cf6:	8d 83       	std	Y+5, r24	; 0x05
    1cf8:	8d 81       	ldd	r24, Y+5	; 0x05
    1cfa:	9e 81       	ldd	r25, Y+6	; 0x06
    1cfc:	9a 83       	std	Y+2, r25	; 0x02
    1cfe:	89 83       	std	Y+1, r24	; 0x01
    1d00:	89 81       	ldd	r24, Y+1	; 0x01
    1d02:	9a 81       	ldd	r25, Y+2	; 0x02
    1d04:	01 97       	sbiw	r24, 0x01	; 1
    1d06:	f1 f7       	brne	.-4      	; 0x1d04 <Lcd_vidDisplayCharacter+0x1fe>
    1d08:	9a 83       	std	Y+2, r25	; 0x02
    1d0a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1d0c:	6d 96       	adiw	r28, 0x1d	; 29
    1d0e:	0f b6       	in	r0, 0x3f	; 63
    1d10:	f8 94       	cli
    1d12:	de bf       	out	0x3e, r29	; 62
    1d14:	0f be       	out	0x3f, r0	; 63
    1d16:	cd bf       	out	0x3d, r28	; 61
    1d18:	cf 91       	pop	r28
    1d1a:	df 91       	pop	r29
    1d1c:	08 95       	ret

00001d1e <Lcd_vidCreateCustomCharacter>:

void Lcd_vidCreateCustomCharacter( pu8 Add_pu8CustomCharacter , u8 Copy_u8CgramAddress )
{
    1d1e:	df 93       	push	r29
    1d20:	cf 93       	push	r28
    1d22:	00 d0       	rcall	.+0      	; 0x1d24 <Lcd_vidCreateCustomCharacter+0x6>
    1d24:	00 d0       	rcall	.+0      	; 0x1d26 <Lcd_vidCreateCustomCharacter+0x8>
    1d26:	cd b7       	in	r28, 0x3d	; 61
    1d28:	de b7       	in	r29, 0x3e	; 62
    1d2a:	9b 83       	std	Y+3, r25	; 0x03
    1d2c:	8a 83       	std	Y+2, r24	; 0x02
    1d2e:	6c 83       	std	Y+4, r22	; 0x04
	u8 index;

	Lcd_vidSendCommand( Copy_u8CgramAddress );
    1d30:	8c 81       	ldd	r24, Y+4	; 0x04
    1d32:	0e 94 77 0c 	call	0x18ee	; 0x18ee <Lcd_vidSendCommand>

	for(index = INDEX_ZERO ; index < INDEX_EIGHT; index ++)
    1d36:	19 82       	std	Y+1, r1	; 0x01
    1d38:	0d c0       	rjmp	.+26     	; 0x1d54 <Lcd_vidCreateCustomCharacter+0x36>
	{
		Lcd_vidDisplayCharacter( *Add_pu8CustomCharacter );
    1d3a:	ea 81       	ldd	r30, Y+2	; 0x02
    1d3c:	fb 81       	ldd	r31, Y+3	; 0x03
    1d3e:	80 81       	ld	r24, Z
    1d40:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <Lcd_vidDisplayCharacter>
		Add_pu8CustomCharacter++;
    1d44:	8a 81       	ldd	r24, Y+2	; 0x02
    1d46:	9b 81       	ldd	r25, Y+3	; 0x03
    1d48:	01 96       	adiw	r24, 0x01	; 1
    1d4a:	9b 83       	std	Y+3, r25	; 0x03
    1d4c:	8a 83       	std	Y+2, r24	; 0x02
{
	u8 index;

	Lcd_vidSendCommand( Copy_u8CgramAddress );

	for(index = INDEX_ZERO ; index < INDEX_EIGHT; index ++)
    1d4e:	89 81       	ldd	r24, Y+1	; 0x01
    1d50:	8f 5f       	subi	r24, 0xFF	; 255
    1d52:	89 83       	std	Y+1, r24	; 0x01
    1d54:	89 81       	ldd	r24, Y+1	; 0x01
    1d56:	88 30       	cpi	r24, 0x08	; 8
    1d58:	80 f3       	brcs	.-32     	; 0x1d3a <Lcd_vidCreateCustomCharacter+0x1c>
	{
		Lcd_vidDisplayCharacter( *Add_pu8CustomCharacter );
		Add_pu8CustomCharacter++;
	}
}
    1d5a:	0f 90       	pop	r0
    1d5c:	0f 90       	pop	r0
    1d5e:	0f 90       	pop	r0
    1d60:	0f 90       	pop	r0
    1d62:	cf 91       	pop	r28
    1d64:	df 91       	pop	r29
    1d66:	08 95       	ret

00001d68 <Lcd_vidDisplayNumber>:

void Lcd_vidDisplayNumber( u32 Copy_u32Number )
{
    1d68:	df 93       	push	r29
    1d6a:	cf 93       	push	r28
    1d6c:	cd b7       	in	r28, 0x3d	; 61
    1d6e:	de b7       	in	r29, 0x3e	; 62
    1d70:	2a 97       	sbiw	r28, 0x0a	; 10
    1d72:	0f b6       	in	r0, 0x3f	; 63
    1d74:	f8 94       	cli
    1d76:	de bf       	out	0x3e, r29	; 62
    1d78:	0f be       	out	0x3f, r0	; 63
    1d7a:	cd bf       	out	0x3d, r28	; 61
    1d7c:	6f 83       	std	Y+7, r22	; 0x07
    1d7e:	78 87       	std	Y+8, r23	; 0x08
    1d80:	89 87       	std	Y+9, r24	; 0x09
    1d82:	9a 87       	std	Y+10, r25	; 0x0a
	u32 length = snprintf( LCD_u8ZERO , LCD_u8ZERO , "%ld", Copy_u32Number );
    1d84:	2d b7       	in	r18, 0x3d	; 61
    1d86:	3e b7       	in	r19, 0x3e	; 62
    1d88:	2a 50       	subi	r18, 0x0A	; 10
    1d8a:	30 40       	sbci	r19, 0x00	; 0
    1d8c:	0f b6       	in	r0, 0x3f	; 63
    1d8e:	f8 94       	cli
    1d90:	3e bf       	out	0x3e, r19	; 62
    1d92:	0f be       	out	0x3f, r0	; 63
    1d94:	2d bf       	out	0x3d, r18	; 61
    1d96:	ed b7       	in	r30, 0x3d	; 61
    1d98:	fe b7       	in	r31, 0x3e	; 62
    1d9a:	31 96       	adiw	r30, 0x01	; 1
    1d9c:	11 82       	std	Z+1, r1	; 0x01
    1d9e:	10 82       	st	Z, r1
    1da0:	13 82       	std	Z+3, r1	; 0x03
    1da2:	12 82       	std	Z+2, r1	; 0x02
    1da4:	80 e6       	ldi	r24, 0x60	; 96
    1da6:	90 e0       	ldi	r25, 0x00	; 0
    1da8:	95 83       	std	Z+5, r25	; 0x05
    1daa:	84 83       	std	Z+4, r24	; 0x04
    1dac:	8f 81       	ldd	r24, Y+7	; 0x07
    1dae:	98 85       	ldd	r25, Y+8	; 0x08
    1db0:	a9 85       	ldd	r26, Y+9	; 0x09
    1db2:	ba 85       	ldd	r27, Y+10	; 0x0a
    1db4:	86 83       	std	Z+6, r24	; 0x06
    1db6:	97 83       	std	Z+7, r25	; 0x07
    1db8:	a0 87       	std	Z+8, r26	; 0x08
    1dba:	b1 87       	std	Z+9, r27	; 0x09
    1dbc:	0e 94 d7 18 	call	0x31ae	; 0x31ae <snprintf>
    1dc0:	2d b7       	in	r18, 0x3d	; 61
    1dc2:	3e b7       	in	r19, 0x3e	; 62
    1dc4:	26 5f       	subi	r18, 0xF6	; 246
    1dc6:	3f 4f       	sbci	r19, 0xFF	; 255
    1dc8:	0f b6       	in	r0, 0x3f	; 63
    1dca:	f8 94       	cli
    1dcc:	3e bf       	out	0x3e, r19	; 62
    1dce:	0f be       	out	0x3f, r0	; 63
    1dd0:	2d bf       	out	0x3d, r18	; 61
    1dd2:	aa 27       	eor	r26, r26
    1dd4:	97 fd       	sbrc	r25, 7
    1dd6:	a0 95       	com	r26
    1dd8:	ba 2f       	mov	r27, r26
    1dda:	8b 83       	std	Y+3, r24	; 0x03
    1ddc:	9c 83       	std	Y+4, r25	; 0x04
    1dde:	ad 83       	std	Y+5, r26	; 0x05
    1de0:	be 83       	std	Y+6, r27	; 0x06
	pu8 str = malloc( length + LCD_u8ONE );
    1de2:	8b 81       	ldd	r24, Y+3	; 0x03
    1de4:	9c 81       	ldd	r25, Y+4	; 0x04
    1de6:	01 96       	adiw	r24, 0x01	; 1
    1de8:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <malloc>
    1dec:	9a 83       	std	Y+2, r25	; 0x02
    1dee:	89 83       	std	Y+1, r24	; 0x01
	snprintf( str , length + LCD_u8ONE, "%ld", Copy_u32Number );
    1df0:	8b 81       	ldd	r24, Y+3	; 0x03
    1df2:	9c 81       	ldd	r25, Y+4	; 0x04
    1df4:	9c 01       	movw	r18, r24
    1df6:	2f 5f       	subi	r18, 0xFF	; 255
    1df8:	3f 4f       	sbci	r19, 0xFF	; 255
    1dfa:	8d b7       	in	r24, 0x3d	; 61
    1dfc:	9e b7       	in	r25, 0x3e	; 62
    1dfe:	0a 97       	sbiw	r24, 0x0a	; 10
    1e00:	0f b6       	in	r0, 0x3f	; 63
    1e02:	f8 94       	cli
    1e04:	9e bf       	out	0x3e, r25	; 62
    1e06:	0f be       	out	0x3f, r0	; 63
    1e08:	8d bf       	out	0x3d, r24	; 61
    1e0a:	ed b7       	in	r30, 0x3d	; 61
    1e0c:	fe b7       	in	r31, 0x3e	; 62
    1e0e:	31 96       	adiw	r30, 0x01	; 1
    1e10:	89 81       	ldd	r24, Y+1	; 0x01
    1e12:	9a 81       	ldd	r25, Y+2	; 0x02
    1e14:	91 83       	std	Z+1, r25	; 0x01
    1e16:	80 83       	st	Z, r24
    1e18:	33 83       	std	Z+3, r19	; 0x03
    1e1a:	22 83       	std	Z+2, r18	; 0x02
    1e1c:	80 e6       	ldi	r24, 0x60	; 96
    1e1e:	90 e0       	ldi	r25, 0x00	; 0
    1e20:	95 83       	std	Z+5, r25	; 0x05
    1e22:	84 83       	std	Z+4, r24	; 0x04
    1e24:	8f 81       	ldd	r24, Y+7	; 0x07
    1e26:	98 85       	ldd	r25, Y+8	; 0x08
    1e28:	a9 85       	ldd	r26, Y+9	; 0x09
    1e2a:	ba 85       	ldd	r27, Y+10	; 0x0a
    1e2c:	86 83       	std	Z+6, r24	; 0x06
    1e2e:	97 83       	std	Z+7, r25	; 0x07
    1e30:	a0 87       	std	Z+8, r26	; 0x08
    1e32:	b1 87       	std	Z+9, r27	; 0x09
    1e34:	0e 94 d7 18 	call	0x31ae	; 0x31ae <snprintf>
    1e38:	2d b7       	in	r18, 0x3d	; 61
    1e3a:	3e b7       	in	r19, 0x3e	; 62
    1e3c:	26 5f       	subi	r18, 0xF6	; 246
    1e3e:	3f 4f       	sbci	r19, 0xFF	; 255
    1e40:	0f b6       	in	r0, 0x3f	; 63
    1e42:	f8 94       	cli
    1e44:	3e bf       	out	0x3e, r19	; 62
    1e46:	0f be       	out	0x3f, r0	; 63
    1e48:	2d bf       	out	0x3d, r18	; 61

	Lcd_vidDisplayString( str );
    1e4a:	89 81       	ldd	r24, Y+1	; 0x01
    1e4c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e4e:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <Lcd_vidDisplayString>
}
    1e52:	2a 96       	adiw	r28, 0x0a	; 10
    1e54:	0f b6       	in	r0, 0x3f	; 63
    1e56:	f8 94       	cli
    1e58:	de bf       	out	0x3e, r29	; 62
    1e5a:	0f be       	out	0x3f, r0	; 63
    1e5c:	cd bf       	out	0x3d, r28	; 61
    1e5e:	cf 91       	pop	r28
    1e60:	df 91       	pop	r29
    1e62:	08 95       	ret

00001e64 <Lcd_vidGoTo>:

void Lcd_vidGoTo( u8 Copy_u8Row , u8 Copy_u8Col )
{
    1e64:	df 93       	push	r29
    1e66:	cf 93       	push	r28
    1e68:	cd b7       	in	r28, 0x3d	; 61
    1e6a:	de b7       	in	r29, 0x3e	; 62
    1e6c:	60 97       	sbiw	r28, 0x10	; 16
    1e6e:	0f b6       	in	r0, 0x3f	; 63
    1e70:	f8 94       	cli
    1e72:	de bf       	out	0x3e, r29	; 62
    1e74:	0f be       	out	0x3f, r0	; 63
    1e76:	cd bf       	out	0x3d, r28	; 61
    1e78:	8f 87       	std	Y+15, r24	; 0x0f
    1e7a:	68 8b       	std	Y+16, r22	; 0x10
	Lcd_vidSendCommand( Copy_u8Row + Copy_u8Col - LCD_u8ONE );
    1e7c:	9f 85       	ldd	r25, Y+15	; 0x0f
    1e7e:	88 89       	ldd	r24, Y+16	; 0x10
    1e80:	89 0f       	add	r24, r25
    1e82:	81 50       	subi	r24, 0x01	; 1
    1e84:	0e 94 77 0c 	call	0x18ee	; 0x18ee <Lcd_vidSendCommand>
    1e88:	80 e0       	ldi	r24, 0x00	; 0
    1e8a:	90 e0       	ldi	r25, 0x00	; 0
    1e8c:	a0 e8       	ldi	r26, 0x80	; 128
    1e8e:	bf e3       	ldi	r27, 0x3F	; 63
    1e90:	8b 87       	std	Y+11, r24	; 0x0b
    1e92:	9c 87       	std	Y+12, r25	; 0x0c
    1e94:	ad 87       	std	Y+13, r26	; 0x0d
    1e96:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e98:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e9a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e9c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e9e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ea0:	20 e0       	ldi	r18, 0x00	; 0
    1ea2:	30 e0       	ldi	r19, 0x00	; 0
    1ea4:	4a e7       	ldi	r20, 0x7A	; 122
    1ea6:	55 e4       	ldi	r21, 0x45	; 69
    1ea8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eac:	dc 01       	movw	r26, r24
    1eae:	cb 01       	movw	r24, r22
    1eb0:	8f 83       	std	Y+7, r24	; 0x07
    1eb2:	98 87       	std	Y+8, r25	; 0x08
    1eb4:	a9 87       	std	Y+9, r26	; 0x09
    1eb6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1eb8:	6f 81       	ldd	r22, Y+7	; 0x07
    1eba:	78 85       	ldd	r23, Y+8	; 0x08
    1ebc:	89 85       	ldd	r24, Y+9	; 0x09
    1ebe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ec0:	20 e0       	ldi	r18, 0x00	; 0
    1ec2:	30 e0       	ldi	r19, 0x00	; 0
    1ec4:	40 e8       	ldi	r20, 0x80	; 128
    1ec6:	5f e3       	ldi	r21, 0x3F	; 63
    1ec8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ecc:	88 23       	and	r24, r24
    1ece:	2c f4       	brge	.+10     	; 0x1eda <Lcd_vidGoTo+0x76>
		__ticks = 1;
    1ed0:	81 e0       	ldi	r24, 0x01	; 1
    1ed2:	90 e0       	ldi	r25, 0x00	; 0
    1ed4:	9e 83       	std	Y+6, r25	; 0x06
    1ed6:	8d 83       	std	Y+5, r24	; 0x05
    1ed8:	3f c0       	rjmp	.+126    	; 0x1f58 <Lcd_vidGoTo+0xf4>
	else if (__tmp > 65535)
    1eda:	6f 81       	ldd	r22, Y+7	; 0x07
    1edc:	78 85       	ldd	r23, Y+8	; 0x08
    1ede:	89 85       	ldd	r24, Y+9	; 0x09
    1ee0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ee2:	20 e0       	ldi	r18, 0x00	; 0
    1ee4:	3f ef       	ldi	r19, 0xFF	; 255
    1ee6:	4f e7       	ldi	r20, 0x7F	; 127
    1ee8:	57 e4       	ldi	r21, 0x47	; 71
    1eea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1eee:	18 16       	cp	r1, r24
    1ef0:	4c f5       	brge	.+82     	; 0x1f44 <Lcd_vidGoTo+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ef2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ef4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ef6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ef8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1efa:	20 e0       	ldi	r18, 0x00	; 0
    1efc:	30 e0       	ldi	r19, 0x00	; 0
    1efe:	40 e2       	ldi	r20, 0x20	; 32
    1f00:	51 e4       	ldi	r21, 0x41	; 65
    1f02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f06:	dc 01       	movw	r26, r24
    1f08:	cb 01       	movw	r24, r22
    1f0a:	bc 01       	movw	r22, r24
    1f0c:	cd 01       	movw	r24, r26
    1f0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f12:	dc 01       	movw	r26, r24
    1f14:	cb 01       	movw	r24, r22
    1f16:	9e 83       	std	Y+6, r25	; 0x06
    1f18:	8d 83       	std	Y+5, r24	; 0x05
    1f1a:	0f c0       	rjmp	.+30     	; 0x1f3a <Lcd_vidGoTo+0xd6>
    1f1c:	80 e9       	ldi	r24, 0x90	; 144
    1f1e:	91 e0       	ldi	r25, 0x01	; 1
    1f20:	9c 83       	std	Y+4, r25	; 0x04
    1f22:	8b 83       	std	Y+3, r24	; 0x03
    1f24:	8b 81       	ldd	r24, Y+3	; 0x03
    1f26:	9c 81       	ldd	r25, Y+4	; 0x04
    1f28:	01 97       	sbiw	r24, 0x01	; 1
    1f2a:	f1 f7       	brne	.-4      	; 0x1f28 <Lcd_vidGoTo+0xc4>
    1f2c:	9c 83       	std	Y+4, r25	; 0x04
    1f2e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f30:	8d 81       	ldd	r24, Y+5	; 0x05
    1f32:	9e 81       	ldd	r25, Y+6	; 0x06
    1f34:	01 97       	sbiw	r24, 0x01	; 1
    1f36:	9e 83       	std	Y+6, r25	; 0x06
    1f38:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f3a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f3c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f3e:	00 97       	sbiw	r24, 0x00	; 0
    1f40:	69 f7       	brne	.-38     	; 0x1f1c <Lcd_vidGoTo+0xb8>
    1f42:	14 c0       	rjmp	.+40     	; 0x1f6c <Lcd_vidGoTo+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f44:	6f 81       	ldd	r22, Y+7	; 0x07
    1f46:	78 85       	ldd	r23, Y+8	; 0x08
    1f48:	89 85       	ldd	r24, Y+9	; 0x09
    1f4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f50:	dc 01       	movw	r26, r24
    1f52:	cb 01       	movw	r24, r22
    1f54:	9e 83       	std	Y+6, r25	; 0x06
    1f56:	8d 83       	std	Y+5, r24	; 0x05
    1f58:	8d 81       	ldd	r24, Y+5	; 0x05
    1f5a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f5c:	9a 83       	std	Y+2, r25	; 0x02
    1f5e:	89 83       	std	Y+1, r24	; 0x01
    1f60:	89 81       	ldd	r24, Y+1	; 0x01
    1f62:	9a 81       	ldd	r25, Y+2	; 0x02
    1f64:	01 97       	sbiw	r24, 0x01	; 1
    1f66:	f1 f7       	brne	.-4      	; 0x1f64 <Lcd_vidGoTo+0x100>
    1f68:	9a 83       	std	Y+2, r25	; 0x02
    1f6a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1f6c:	60 96       	adiw	r28, 0x10	; 16
    1f6e:	0f b6       	in	r0, 0x3f	; 63
    1f70:	f8 94       	cli
    1f72:	de bf       	out	0x3e, r29	; 62
    1f74:	0f be       	out	0x3f, r0	; 63
    1f76:	cd bf       	out	0x3d, r28	; 61
    1f78:	cf 91       	pop	r28
    1f7a:	df 91       	pop	r29
    1f7c:	08 95       	ret

00001f7e <Lcd_vidDisplayString>:


void Lcd_vidDisplayString( pu8 Add_pu8String )
{
    1f7e:	df 93       	push	r29
    1f80:	cf 93       	push	r28
    1f82:	00 d0       	rcall	.+0      	; 0x1f84 <Lcd_vidDisplayString+0x6>
    1f84:	cd b7       	in	r28, 0x3d	; 61
    1f86:	de b7       	in	r29, 0x3e	; 62
    1f88:	9a 83       	std	Y+2, r25	; 0x02
    1f8a:	89 83       	std	Y+1, r24	; 0x01
    1f8c:	0a c0       	rjmp	.+20     	; 0x1fa2 <Lcd_vidDisplayString+0x24>
	while( *Add_pu8String != ENDING_CHAR )
	{
		Lcd_vidDisplayCharacter( *Add_pu8String );
    1f8e:	e9 81       	ldd	r30, Y+1	; 0x01
    1f90:	fa 81       	ldd	r31, Y+2	; 0x02
    1f92:	80 81       	ld	r24, Z
    1f94:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <Lcd_vidDisplayCharacter>
		Add_pu8String++;
    1f98:	89 81       	ldd	r24, Y+1	; 0x01
    1f9a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f9c:	01 96       	adiw	r24, 0x01	; 1
    1f9e:	9a 83       	std	Y+2, r25	; 0x02
    1fa0:	89 83       	std	Y+1, r24	; 0x01
}


void Lcd_vidDisplayString( pu8 Add_pu8String )
{
	while( *Add_pu8String != ENDING_CHAR )
    1fa2:	e9 81       	ldd	r30, Y+1	; 0x01
    1fa4:	fa 81       	ldd	r31, Y+2	; 0x02
    1fa6:	80 81       	ld	r24, Z
    1fa8:	88 23       	and	r24, r24
    1faa:	89 f7       	brne	.-30     	; 0x1f8e <Lcd_vidDisplayString+0x10>
	{
		Lcd_vidDisplayCharacter( *Add_pu8String );
		Add_pu8String++;
	}
}
    1fac:	0f 90       	pop	r0
    1fae:	0f 90       	pop	r0
    1fb0:	cf 91       	pop	r28
    1fb2:	df 91       	pop	r29
    1fb4:	08 95       	ret

00001fb6 <Port_enuSetPinDirection>:
#include "Bit_utils.h"
#include <avr/io.h>
#include "Port.h"

Port_tenuErrorStatus Port_enuSetPinDirection(u8 Copy_u8PinNum,u8 Copy_u8PinDirection)
{
    1fb6:	df 93       	push	r29
    1fb8:	cf 93       	push	r28
    1fba:	cd b7       	in	r28, 0x3d	; 61
    1fbc:	de b7       	in	r29, 0x3e	; 62
    1fbe:	27 97       	sbiw	r28, 0x07	; 7
    1fc0:	0f b6       	in	r0, 0x3f	; 63
    1fc2:	f8 94       	cli
    1fc4:	de bf       	out	0x3e, r29	; 62
    1fc6:	0f be       	out	0x3f, r0	; 63
    1fc8:	cd bf       	out	0x3d, r28	; 61
    1fca:	8c 83       	std	Y+4, r24	; 0x04
    1fcc:	6d 83       	std	Y+5, r22	; 0x05
	Port_tenuErrorStatus Loc_enuReturnStatus=Port_enuOk;
    1fce:	82 e0       	ldi	r24, 0x02	; 2
    1fd0:	8b 83       	std	Y+3, r24	; 0x03
	u8 Loc_u8Port;
	u8 Loc_u8Pin;

	if( Copy_u8PinNum >= PORT_u8NUMBER_OF_PINS )
    1fd2:	8c 81       	ldd	r24, Y+4	; 0x04
    1fd4:	80 32       	cpi	r24, 0x20	; 32
    1fd6:	10 f0       	brcs	.+4      	; 0x1fdc <Port_enuSetPinDirection+0x26>
	{
		Loc_enuReturnStatus=Port_enuPinError;
    1fd8:	1b 82       	std	Y+3, r1	; 0x03
    1fda:	e2 c0       	rjmp	.+452    	; 0x21a0 <Port_enuSetPinDirection+0x1ea>
	}
	else if( (Copy_u8PinDirection != PORT_u8PIN_INPUT) && (Copy_u8PinDirection != PORT_u8PIN_OUTPUT) )
    1fdc:	8d 81       	ldd	r24, Y+5	; 0x05
    1fde:	88 23       	and	r24, r24
    1fe0:	31 f0       	breq	.+12     	; 0x1fee <Port_enuSetPinDirection+0x38>
    1fe2:	8d 81       	ldd	r24, Y+5	; 0x05
    1fe4:	81 30       	cpi	r24, 0x01	; 1
    1fe6:	19 f0       	breq	.+6      	; 0x1fee <Port_enuSetPinDirection+0x38>
	{
		Loc_enuReturnStatus=Port_enuDirectionError;
    1fe8:	81 e0       	ldi	r24, 0x01	; 1
    1fea:	8b 83       	std	Y+3, r24	; 0x03
    1fec:	d9 c0       	rjmp	.+434    	; 0x21a0 <Port_enuSetPinDirection+0x1ea>
	}
	else
	{
		Loc_u8Port = Copy_u8PinNum / 8 ;
    1fee:	8c 81       	ldd	r24, Y+4	; 0x04
    1ff0:	86 95       	lsr	r24
    1ff2:	86 95       	lsr	r24
    1ff4:	86 95       	lsr	r24
    1ff6:	8a 83       	std	Y+2, r24	; 0x02
		Loc_u8Pin = Copy_u8PinNum % 8 ;
    1ff8:	8c 81       	ldd	r24, Y+4	; 0x04
    1ffa:	87 70       	andi	r24, 0x07	; 7
    1ffc:	89 83       	std	Y+1, r24	; 0x01

		switch(Loc_u8Port)
    1ffe:	8a 81       	ldd	r24, Y+2	; 0x02
    2000:	28 2f       	mov	r18, r24
    2002:	30 e0       	ldi	r19, 0x00	; 0
    2004:	3f 83       	std	Y+7, r19	; 0x07
    2006:	2e 83       	std	Y+6, r18	; 0x06
    2008:	8e 81       	ldd	r24, Y+6	; 0x06
    200a:	9f 81       	ldd	r25, Y+7	; 0x07
    200c:	81 30       	cpi	r24, 0x01	; 1
    200e:	91 05       	cpc	r25, r1
    2010:	09 f4       	brne	.+2      	; 0x2014 <Port_enuSetPinDirection+0x5e>
    2012:	43 c0       	rjmp	.+134    	; 0x209a <Port_enuSetPinDirection+0xe4>
    2014:	2e 81       	ldd	r18, Y+6	; 0x06
    2016:	3f 81       	ldd	r19, Y+7	; 0x07
    2018:	22 30       	cpi	r18, 0x02	; 2
    201a:	31 05       	cpc	r19, r1
    201c:	2c f4       	brge	.+10     	; 0x2028 <Port_enuSetPinDirection+0x72>
    201e:	8e 81       	ldd	r24, Y+6	; 0x06
    2020:	9f 81       	ldd	r25, Y+7	; 0x07
    2022:	00 97       	sbiw	r24, 0x00	; 0
    2024:	71 f0       	breq	.+28     	; 0x2042 <Port_enuSetPinDirection+0x8c>
    2026:	bc c0       	rjmp	.+376    	; 0x21a0 <Port_enuSetPinDirection+0x1ea>
    2028:	2e 81       	ldd	r18, Y+6	; 0x06
    202a:	3f 81       	ldd	r19, Y+7	; 0x07
    202c:	22 30       	cpi	r18, 0x02	; 2
    202e:	31 05       	cpc	r19, r1
    2030:	09 f4       	brne	.+2      	; 0x2034 <Port_enuSetPinDirection+0x7e>
    2032:	5f c0       	rjmp	.+190    	; 0x20f2 <Port_enuSetPinDirection+0x13c>
    2034:	8e 81       	ldd	r24, Y+6	; 0x06
    2036:	9f 81       	ldd	r25, Y+7	; 0x07
    2038:	83 30       	cpi	r24, 0x03	; 3
    203a:	91 05       	cpc	r25, r1
    203c:	09 f4       	brne	.+2      	; 0x2040 <Port_enuSetPinDirection+0x8a>
    203e:	85 c0       	rjmp	.+266    	; 0x214a <Port_enuSetPinDirection+0x194>
    2040:	af c0       	rjmp	.+350    	; 0x21a0 <Port_enuSetPinDirection+0x1ea>
		{
			case PORT_u8PORT_A:
			{
				if(Copy_u8PinDirection == PORT_u8PIN_OUTPUT)
    2042:	8d 81       	ldd	r24, Y+5	; 0x05
    2044:	81 30       	cpi	r24, 0x01	; 1
    2046:	a1 f4       	brne	.+40     	; 0x2070 <Port_enuSetPinDirection+0xba>
				{
					SET_BIT(DDRA,Loc_u8Pin);
    2048:	aa e3       	ldi	r26, 0x3A	; 58
    204a:	b0 e0       	ldi	r27, 0x00	; 0
    204c:	ea e3       	ldi	r30, 0x3A	; 58
    204e:	f0 e0       	ldi	r31, 0x00	; 0
    2050:	80 81       	ld	r24, Z
    2052:	48 2f       	mov	r20, r24
    2054:	89 81       	ldd	r24, Y+1	; 0x01
    2056:	28 2f       	mov	r18, r24
    2058:	30 e0       	ldi	r19, 0x00	; 0
    205a:	81 e0       	ldi	r24, 0x01	; 1
    205c:	90 e0       	ldi	r25, 0x00	; 0
    205e:	02 2e       	mov	r0, r18
    2060:	02 c0       	rjmp	.+4      	; 0x2066 <Port_enuSetPinDirection+0xb0>
    2062:	88 0f       	add	r24, r24
    2064:	99 1f       	adc	r25, r25
    2066:	0a 94       	dec	r0
    2068:	e2 f7       	brpl	.-8      	; 0x2062 <Port_enuSetPinDirection+0xac>
    206a:	84 2b       	or	r24, r20
    206c:	8c 93       	st	X, r24
    206e:	98 c0       	rjmp	.+304    	; 0x21a0 <Port_enuSetPinDirection+0x1ea>
				}
				else
				{
					CLR_BIT(DDRA,Loc_u8Pin);
    2070:	aa e3       	ldi	r26, 0x3A	; 58
    2072:	b0 e0       	ldi	r27, 0x00	; 0
    2074:	ea e3       	ldi	r30, 0x3A	; 58
    2076:	f0 e0       	ldi	r31, 0x00	; 0
    2078:	80 81       	ld	r24, Z
    207a:	48 2f       	mov	r20, r24
    207c:	89 81       	ldd	r24, Y+1	; 0x01
    207e:	28 2f       	mov	r18, r24
    2080:	30 e0       	ldi	r19, 0x00	; 0
    2082:	81 e0       	ldi	r24, 0x01	; 1
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	02 2e       	mov	r0, r18
    2088:	02 c0       	rjmp	.+4      	; 0x208e <Port_enuSetPinDirection+0xd8>
    208a:	88 0f       	add	r24, r24
    208c:	99 1f       	adc	r25, r25
    208e:	0a 94       	dec	r0
    2090:	e2 f7       	brpl	.-8      	; 0x208a <Port_enuSetPinDirection+0xd4>
    2092:	80 95       	com	r24
    2094:	84 23       	and	r24, r20
    2096:	8c 93       	st	X, r24
    2098:	83 c0       	rjmp	.+262    	; 0x21a0 <Port_enuSetPinDirection+0x1ea>
				}
				break;
			}
			case PORT_u8PORT_B:
			{
				if(Copy_u8PinDirection == PORT_u8PIN_OUTPUT)
    209a:	8d 81       	ldd	r24, Y+5	; 0x05
    209c:	81 30       	cpi	r24, 0x01	; 1
    209e:	a1 f4       	brne	.+40     	; 0x20c8 <Port_enuSetPinDirection+0x112>
				{
					SET_BIT(DDRB,Loc_u8Pin);
    20a0:	a7 e3       	ldi	r26, 0x37	; 55
    20a2:	b0 e0       	ldi	r27, 0x00	; 0
    20a4:	e7 e3       	ldi	r30, 0x37	; 55
    20a6:	f0 e0       	ldi	r31, 0x00	; 0
    20a8:	80 81       	ld	r24, Z
    20aa:	48 2f       	mov	r20, r24
    20ac:	89 81       	ldd	r24, Y+1	; 0x01
    20ae:	28 2f       	mov	r18, r24
    20b0:	30 e0       	ldi	r19, 0x00	; 0
    20b2:	81 e0       	ldi	r24, 0x01	; 1
    20b4:	90 e0       	ldi	r25, 0x00	; 0
    20b6:	02 2e       	mov	r0, r18
    20b8:	02 c0       	rjmp	.+4      	; 0x20be <Port_enuSetPinDirection+0x108>
    20ba:	88 0f       	add	r24, r24
    20bc:	99 1f       	adc	r25, r25
    20be:	0a 94       	dec	r0
    20c0:	e2 f7       	brpl	.-8      	; 0x20ba <Port_enuSetPinDirection+0x104>
    20c2:	84 2b       	or	r24, r20
    20c4:	8c 93       	st	X, r24
    20c6:	6c c0       	rjmp	.+216    	; 0x21a0 <Port_enuSetPinDirection+0x1ea>
				}
				else
				{
					CLR_BIT(DDRB,Loc_u8Pin);
    20c8:	a7 e3       	ldi	r26, 0x37	; 55
    20ca:	b0 e0       	ldi	r27, 0x00	; 0
    20cc:	e7 e3       	ldi	r30, 0x37	; 55
    20ce:	f0 e0       	ldi	r31, 0x00	; 0
    20d0:	80 81       	ld	r24, Z
    20d2:	48 2f       	mov	r20, r24
    20d4:	89 81       	ldd	r24, Y+1	; 0x01
    20d6:	28 2f       	mov	r18, r24
    20d8:	30 e0       	ldi	r19, 0x00	; 0
    20da:	81 e0       	ldi	r24, 0x01	; 1
    20dc:	90 e0       	ldi	r25, 0x00	; 0
    20de:	02 2e       	mov	r0, r18
    20e0:	02 c0       	rjmp	.+4      	; 0x20e6 <Port_enuSetPinDirection+0x130>
    20e2:	88 0f       	add	r24, r24
    20e4:	99 1f       	adc	r25, r25
    20e6:	0a 94       	dec	r0
    20e8:	e2 f7       	brpl	.-8      	; 0x20e2 <Port_enuSetPinDirection+0x12c>
    20ea:	80 95       	com	r24
    20ec:	84 23       	and	r24, r20
    20ee:	8c 93       	st	X, r24
    20f0:	57 c0       	rjmp	.+174    	; 0x21a0 <Port_enuSetPinDirection+0x1ea>
				}
				break;
			}
			case PORT_u8PORT_C:
			{
				if(Copy_u8PinDirection == PORT_u8PIN_OUTPUT)
    20f2:	8d 81       	ldd	r24, Y+5	; 0x05
    20f4:	81 30       	cpi	r24, 0x01	; 1
    20f6:	a1 f4       	brne	.+40     	; 0x2120 <Port_enuSetPinDirection+0x16a>
				{
					SET_BIT(DDRC,Loc_u8Pin);
    20f8:	a4 e3       	ldi	r26, 0x34	; 52
    20fa:	b0 e0       	ldi	r27, 0x00	; 0
    20fc:	e4 e3       	ldi	r30, 0x34	; 52
    20fe:	f0 e0       	ldi	r31, 0x00	; 0
    2100:	80 81       	ld	r24, Z
    2102:	48 2f       	mov	r20, r24
    2104:	89 81       	ldd	r24, Y+1	; 0x01
    2106:	28 2f       	mov	r18, r24
    2108:	30 e0       	ldi	r19, 0x00	; 0
    210a:	81 e0       	ldi	r24, 0x01	; 1
    210c:	90 e0       	ldi	r25, 0x00	; 0
    210e:	02 2e       	mov	r0, r18
    2110:	02 c0       	rjmp	.+4      	; 0x2116 <Port_enuSetPinDirection+0x160>
    2112:	88 0f       	add	r24, r24
    2114:	99 1f       	adc	r25, r25
    2116:	0a 94       	dec	r0
    2118:	e2 f7       	brpl	.-8      	; 0x2112 <Port_enuSetPinDirection+0x15c>
    211a:	84 2b       	or	r24, r20
    211c:	8c 93       	st	X, r24
    211e:	40 c0       	rjmp	.+128    	; 0x21a0 <Port_enuSetPinDirection+0x1ea>
				}
				else
				{
					CLR_BIT(DDRC,Loc_u8Pin);
    2120:	a4 e3       	ldi	r26, 0x34	; 52
    2122:	b0 e0       	ldi	r27, 0x00	; 0
    2124:	e4 e3       	ldi	r30, 0x34	; 52
    2126:	f0 e0       	ldi	r31, 0x00	; 0
    2128:	80 81       	ld	r24, Z
    212a:	48 2f       	mov	r20, r24
    212c:	89 81       	ldd	r24, Y+1	; 0x01
    212e:	28 2f       	mov	r18, r24
    2130:	30 e0       	ldi	r19, 0x00	; 0
    2132:	81 e0       	ldi	r24, 0x01	; 1
    2134:	90 e0       	ldi	r25, 0x00	; 0
    2136:	02 2e       	mov	r0, r18
    2138:	02 c0       	rjmp	.+4      	; 0x213e <Port_enuSetPinDirection+0x188>
    213a:	88 0f       	add	r24, r24
    213c:	99 1f       	adc	r25, r25
    213e:	0a 94       	dec	r0
    2140:	e2 f7       	brpl	.-8      	; 0x213a <Port_enuSetPinDirection+0x184>
    2142:	80 95       	com	r24
    2144:	84 23       	and	r24, r20
    2146:	8c 93       	st	X, r24
    2148:	2b c0       	rjmp	.+86     	; 0x21a0 <Port_enuSetPinDirection+0x1ea>
				}
				break;
			}
			case PORT_u8PORT_D:
			{
				if(Copy_u8PinDirection == PORT_u8PIN_OUTPUT)
    214a:	8d 81       	ldd	r24, Y+5	; 0x05
    214c:	81 30       	cpi	r24, 0x01	; 1
    214e:	a1 f4       	brne	.+40     	; 0x2178 <Port_enuSetPinDirection+0x1c2>
				{
					SET_BIT(DDRD,Loc_u8Pin);
    2150:	a1 e3       	ldi	r26, 0x31	; 49
    2152:	b0 e0       	ldi	r27, 0x00	; 0
    2154:	e1 e3       	ldi	r30, 0x31	; 49
    2156:	f0 e0       	ldi	r31, 0x00	; 0
    2158:	80 81       	ld	r24, Z
    215a:	48 2f       	mov	r20, r24
    215c:	89 81       	ldd	r24, Y+1	; 0x01
    215e:	28 2f       	mov	r18, r24
    2160:	30 e0       	ldi	r19, 0x00	; 0
    2162:	81 e0       	ldi	r24, 0x01	; 1
    2164:	90 e0       	ldi	r25, 0x00	; 0
    2166:	02 2e       	mov	r0, r18
    2168:	02 c0       	rjmp	.+4      	; 0x216e <Port_enuSetPinDirection+0x1b8>
    216a:	88 0f       	add	r24, r24
    216c:	99 1f       	adc	r25, r25
    216e:	0a 94       	dec	r0
    2170:	e2 f7       	brpl	.-8      	; 0x216a <Port_enuSetPinDirection+0x1b4>
    2172:	84 2b       	or	r24, r20
    2174:	8c 93       	st	X, r24
    2176:	14 c0       	rjmp	.+40     	; 0x21a0 <Port_enuSetPinDirection+0x1ea>
				}
				else
				{
					CLR_BIT(DDRD,Loc_u8Pin);
    2178:	a1 e3       	ldi	r26, 0x31	; 49
    217a:	b0 e0       	ldi	r27, 0x00	; 0
    217c:	e1 e3       	ldi	r30, 0x31	; 49
    217e:	f0 e0       	ldi	r31, 0x00	; 0
    2180:	80 81       	ld	r24, Z
    2182:	48 2f       	mov	r20, r24
    2184:	89 81       	ldd	r24, Y+1	; 0x01
    2186:	28 2f       	mov	r18, r24
    2188:	30 e0       	ldi	r19, 0x00	; 0
    218a:	81 e0       	ldi	r24, 0x01	; 1
    218c:	90 e0       	ldi	r25, 0x00	; 0
    218e:	02 2e       	mov	r0, r18
    2190:	02 c0       	rjmp	.+4      	; 0x2196 <Port_enuSetPinDirection+0x1e0>
    2192:	88 0f       	add	r24, r24
    2194:	99 1f       	adc	r25, r25
    2196:	0a 94       	dec	r0
    2198:	e2 f7       	brpl	.-8      	; 0x2192 <Port_enuSetPinDirection+0x1dc>
    219a:	80 95       	com	r24
    219c:	84 23       	and	r24, r20
    219e:	8c 93       	st	X, r24
			}
		}
	}


	return Loc_enuReturnStatus;
    21a0:	8b 81       	ldd	r24, Y+3	; 0x03
}
    21a2:	27 96       	adiw	r28, 0x07	; 7
    21a4:	0f b6       	in	r0, 0x3f	; 63
    21a6:	f8 94       	cli
    21a8:	de bf       	out	0x3e, r29	; 62
    21aa:	0f be       	out	0x3f, r0	; 63
    21ac:	cd bf       	out	0x3d, r28	; 61
    21ae:	cf 91       	pop	r28
    21b0:	df 91       	pop	r29
    21b2:	08 95       	ret

000021b4 <Port_enuSetPinMode>:


Port_tenuErrorStatus Port_enuSetPinMode(u8 Copy_u8PinNum, u8 Copy_u8PinMode)
{
    21b4:	df 93       	push	r29
    21b6:	cf 93       	push	r28
    21b8:	cd b7       	in	r28, 0x3d	; 61
    21ba:	de b7       	in	r29, 0x3e	; 62
    21bc:	2f 97       	sbiw	r28, 0x0f	; 15
    21be:	0f b6       	in	r0, 0x3f	; 63
    21c0:	f8 94       	cli
    21c2:	de bf       	out	0x3e, r29	; 62
    21c4:	0f be       	out	0x3f, r0	; 63
    21c6:	cd bf       	out	0x3d, r28	; 61
    21c8:	8c 83       	std	Y+4, r24	; 0x04
    21ca:	6d 83       	std	Y+5, r22	; 0x05
	Port_tenuErrorStatus Loc_enuReturnStatus=Port_enuOk;
    21cc:	82 e0       	ldi	r24, 0x02	; 2
    21ce:	8b 83       	std	Y+3, r24	; 0x03
		u8 Loc_u8Port;
		u8 Loc_u8Pin;
		if( Copy_u8PinNum >= PORT_u8NUMBER_OF_PINS )
    21d0:	8c 81       	ldd	r24, Y+4	; 0x04
    21d2:	80 32       	cpi	r24, 0x20	; 32
    21d4:	10 f0       	brcs	.+4      	; 0x21da <Port_enuSetPinMode+0x26>
		{
			Loc_enuReturnStatus=Port_enuPinError;
    21d6:	1b 82       	std	Y+3, r1	; 0x03
    21d8:	31 c3       	rjmp	.+1634   	; 0x283c <Port_enuSetPinMode+0x688>
		}
		else if( ( Copy_u8PinMode!= PORT_u8INPUT_HIGHIMPEDANCE ) && ( Copy_u8PinMode!= PORT_u8INPUT_PULLUP ) && ( Copy_u8PinMode!= PORT_u8OUTPUT_HIGH ) )
    21da:	8d 81       	ldd	r24, Y+5	; 0x05
    21dc:	88 23       	and	r24, r24
    21de:	49 f0       	breq	.+18     	; 0x21f2 <Port_enuSetPinMode+0x3e>
    21e0:	8d 81       	ldd	r24, Y+5	; 0x05
    21e2:	81 30       	cpi	r24, 0x01	; 1
    21e4:	31 f0       	breq	.+12     	; 0x21f2 <Port_enuSetPinMode+0x3e>
    21e6:	8d 81       	ldd	r24, Y+5	; 0x05
    21e8:	82 30       	cpi	r24, 0x02	; 2
    21ea:	19 f0       	breq	.+6      	; 0x21f2 <Port_enuSetPinMode+0x3e>
		{
			Loc_enuReturnStatus=Port_enuModeError;
    21ec:	83 e0       	ldi	r24, 0x03	; 3
    21ee:	8b 83       	std	Y+3, r24	; 0x03
    21f0:	25 c3       	rjmp	.+1610   	; 0x283c <Port_enuSetPinMode+0x688>
		}
		else
		{
			Loc_u8Port = Copy_u8PinNum / 8 ;
    21f2:	8c 81       	ldd	r24, Y+4	; 0x04
    21f4:	86 95       	lsr	r24
    21f6:	86 95       	lsr	r24
    21f8:	86 95       	lsr	r24
    21fa:	8a 83       	std	Y+2, r24	; 0x02
			Loc_u8Pin = Copy_u8PinNum % 8 ;
    21fc:	8c 81       	ldd	r24, Y+4	; 0x04
    21fe:	87 70       	andi	r24, 0x07	; 7
    2200:	89 83       	std	Y+1, r24	; 0x01

			switch(Loc_u8Port)
    2202:	8a 81       	ldd	r24, Y+2	; 0x02
    2204:	28 2f       	mov	r18, r24
    2206:	30 e0       	ldi	r19, 0x00	; 0
    2208:	3f 87       	std	Y+15, r19	; 0x0f
    220a:	2e 87       	std	Y+14, r18	; 0x0e
    220c:	8e 85       	ldd	r24, Y+14	; 0x0e
    220e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2210:	81 30       	cpi	r24, 0x01	; 1
    2212:	91 05       	cpc	r25, r1
    2214:	09 f4       	brne	.+2      	; 0x2218 <Port_enuSetPinMode+0x64>
    2216:	d6 c0       	rjmp	.+428    	; 0x23c4 <Port_enuSetPinMode+0x210>
    2218:	2e 85       	ldd	r18, Y+14	; 0x0e
    221a:	3f 85       	ldd	r19, Y+15	; 0x0f
    221c:	22 30       	cpi	r18, 0x02	; 2
    221e:	31 05       	cpc	r19, r1
    2220:	2c f4       	brge	.+10     	; 0x222c <Port_enuSetPinMode+0x78>
    2222:	8e 85       	ldd	r24, Y+14	; 0x0e
    2224:	9f 85       	ldd	r25, Y+15	; 0x0f
    2226:	00 97       	sbiw	r24, 0x00	; 0
    2228:	71 f0       	breq	.+28     	; 0x2246 <Port_enuSetPinMode+0x92>
    222a:	08 c3       	rjmp	.+1552   	; 0x283c <Port_enuSetPinMode+0x688>
    222c:	2e 85       	ldd	r18, Y+14	; 0x0e
    222e:	3f 85       	ldd	r19, Y+15	; 0x0f
    2230:	22 30       	cpi	r18, 0x02	; 2
    2232:	31 05       	cpc	r19, r1
    2234:	09 f4       	brne	.+2      	; 0x2238 <Port_enuSetPinMode+0x84>
    2236:	85 c1       	rjmp	.+778    	; 0x2542 <Port_enuSetPinMode+0x38e>
    2238:	8e 85       	ldd	r24, Y+14	; 0x0e
    223a:	9f 85       	ldd	r25, Y+15	; 0x0f
    223c:	83 30       	cpi	r24, 0x03	; 3
    223e:	91 05       	cpc	r25, r1
    2240:	09 f4       	brne	.+2      	; 0x2244 <Port_enuSetPinMode+0x90>
    2242:	3e c2       	rjmp	.+1148   	; 0x26c0 <Port_enuSetPinMode+0x50c>
    2244:	fb c2       	rjmp	.+1526   	; 0x283c <Port_enuSetPinMode+0x688>
			{
				case PORT_u8PORT_A:
				{
					switch(Copy_u8PinMode)
    2246:	8d 81       	ldd	r24, Y+5	; 0x05
    2248:	28 2f       	mov	r18, r24
    224a:	30 e0       	ldi	r19, 0x00	; 0
    224c:	3d 87       	std	Y+13, r19	; 0x0d
    224e:	2c 87       	std	Y+12, r18	; 0x0c
    2250:	8c 85       	ldd	r24, Y+12	; 0x0c
    2252:	9d 85       	ldd	r25, Y+13	; 0x0d
    2254:	81 30       	cpi	r24, 0x01	; 1
    2256:	91 05       	cpc	r25, r1
    2258:	09 f4       	brne	.+2      	; 0x225c <Port_enuSetPinMode+0xa8>
    225a:	3f c0       	rjmp	.+126    	; 0x22da <Port_enuSetPinMode+0x126>
    225c:	2c 85       	ldd	r18, Y+12	; 0x0c
    225e:	3d 85       	ldd	r19, Y+13	; 0x0d
    2260:	22 30       	cpi	r18, 0x02	; 2
    2262:	31 05       	cpc	r19, r1
    2264:	2c f4       	brge	.+10     	; 0x2270 <Port_enuSetPinMode+0xbc>
    2266:	8c 85       	ldd	r24, Y+12	; 0x0c
    2268:	9d 85       	ldd	r25, Y+13	; 0x0d
    226a:	00 97       	sbiw	r24, 0x00	; 0
    226c:	71 f0       	breq	.+28     	; 0x228a <Port_enuSetPinMode+0xd6>
    226e:	e6 c2       	rjmp	.+1484   	; 0x283c <Port_enuSetPinMode+0x688>
    2270:	2c 85       	ldd	r18, Y+12	; 0x0c
    2272:	3d 85       	ldd	r19, Y+13	; 0x0d
    2274:	22 30       	cpi	r18, 0x02	; 2
    2276:	31 05       	cpc	r19, r1
    2278:	09 f4       	brne	.+2      	; 0x227c <Port_enuSetPinMode+0xc8>
    227a:	56 c0       	rjmp	.+172    	; 0x2328 <Port_enuSetPinMode+0x174>
    227c:	8c 85       	ldd	r24, Y+12	; 0x0c
    227e:	9d 85       	ldd	r25, Y+13	; 0x0d
    2280:	83 30       	cpi	r24, 0x03	; 3
    2282:	91 05       	cpc	r25, r1
    2284:	09 f4       	brne	.+2      	; 0x2288 <Port_enuSetPinMode+0xd4>
    2286:	76 c0       	rjmp	.+236    	; 0x2374 <Port_enuSetPinMode+0x1c0>
    2288:	d9 c2       	rjmp	.+1458   	; 0x283c <Port_enuSetPinMode+0x688>
					{
						case PORT_u8INPUT_HIGHIMPEDANCE:
						{
							CLR_BIT(DDRA,Loc_u8Pin);
    228a:	aa e3       	ldi	r26, 0x3A	; 58
    228c:	b0 e0       	ldi	r27, 0x00	; 0
    228e:	ea e3       	ldi	r30, 0x3A	; 58
    2290:	f0 e0       	ldi	r31, 0x00	; 0
    2292:	80 81       	ld	r24, Z
    2294:	48 2f       	mov	r20, r24
    2296:	89 81       	ldd	r24, Y+1	; 0x01
    2298:	28 2f       	mov	r18, r24
    229a:	30 e0       	ldi	r19, 0x00	; 0
    229c:	81 e0       	ldi	r24, 0x01	; 1
    229e:	90 e0       	ldi	r25, 0x00	; 0
    22a0:	02 c0       	rjmp	.+4      	; 0x22a6 <Port_enuSetPinMode+0xf2>
    22a2:	88 0f       	add	r24, r24
    22a4:	99 1f       	adc	r25, r25
    22a6:	2a 95       	dec	r18
    22a8:	e2 f7       	brpl	.-8      	; 0x22a2 <Port_enuSetPinMode+0xee>
    22aa:	80 95       	com	r24
    22ac:	84 23       	and	r24, r20
    22ae:	8c 93       	st	X, r24
							CLR_BIT(PORTA,Loc_u8Pin);
    22b0:	ab e3       	ldi	r26, 0x3B	; 59
    22b2:	b0 e0       	ldi	r27, 0x00	; 0
    22b4:	eb e3       	ldi	r30, 0x3B	; 59
    22b6:	f0 e0       	ldi	r31, 0x00	; 0
    22b8:	80 81       	ld	r24, Z
    22ba:	48 2f       	mov	r20, r24
    22bc:	89 81       	ldd	r24, Y+1	; 0x01
    22be:	28 2f       	mov	r18, r24
    22c0:	30 e0       	ldi	r19, 0x00	; 0
    22c2:	81 e0       	ldi	r24, 0x01	; 1
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	02 2e       	mov	r0, r18
    22c8:	02 c0       	rjmp	.+4      	; 0x22ce <Port_enuSetPinMode+0x11a>
    22ca:	88 0f       	add	r24, r24
    22cc:	99 1f       	adc	r25, r25
    22ce:	0a 94       	dec	r0
    22d0:	e2 f7       	brpl	.-8      	; 0x22ca <Port_enuSetPinMode+0x116>
    22d2:	80 95       	com	r24
    22d4:	84 23       	and	r24, r20
    22d6:	8c 93       	st	X, r24
    22d8:	b1 c2       	rjmp	.+1378   	; 0x283c <Port_enuSetPinMode+0x688>
							break;
						}
						case PORT_u8INPUT_PULLUP:
						{
							CLR_BIT(DDRA,Loc_u8Pin);
    22da:	aa e3       	ldi	r26, 0x3A	; 58
    22dc:	b0 e0       	ldi	r27, 0x00	; 0
    22de:	ea e3       	ldi	r30, 0x3A	; 58
    22e0:	f0 e0       	ldi	r31, 0x00	; 0
    22e2:	80 81       	ld	r24, Z
    22e4:	48 2f       	mov	r20, r24
    22e6:	89 81       	ldd	r24, Y+1	; 0x01
    22e8:	28 2f       	mov	r18, r24
    22ea:	30 e0       	ldi	r19, 0x00	; 0
    22ec:	81 e0       	ldi	r24, 0x01	; 1
    22ee:	90 e0       	ldi	r25, 0x00	; 0
    22f0:	02 c0       	rjmp	.+4      	; 0x22f6 <Port_enuSetPinMode+0x142>
    22f2:	88 0f       	add	r24, r24
    22f4:	99 1f       	adc	r25, r25
    22f6:	2a 95       	dec	r18
    22f8:	e2 f7       	brpl	.-8      	; 0x22f2 <Port_enuSetPinMode+0x13e>
    22fa:	80 95       	com	r24
    22fc:	84 23       	and	r24, r20
    22fe:	8c 93       	st	X, r24
							SET_BIT(PORTA,Loc_u8Pin);
    2300:	ab e3       	ldi	r26, 0x3B	; 59
    2302:	b0 e0       	ldi	r27, 0x00	; 0
    2304:	eb e3       	ldi	r30, 0x3B	; 59
    2306:	f0 e0       	ldi	r31, 0x00	; 0
    2308:	80 81       	ld	r24, Z
    230a:	48 2f       	mov	r20, r24
    230c:	89 81       	ldd	r24, Y+1	; 0x01
    230e:	28 2f       	mov	r18, r24
    2310:	30 e0       	ldi	r19, 0x00	; 0
    2312:	81 e0       	ldi	r24, 0x01	; 1
    2314:	90 e0       	ldi	r25, 0x00	; 0
    2316:	02 2e       	mov	r0, r18
    2318:	02 c0       	rjmp	.+4      	; 0x231e <Port_enuSetPinMode+0x16a>
    231a:	88 0f       	add	r24, r24
    231c:	99 1f       	adc	r25, r25
    231e:	0a 94       	dec	r0
    2320:	e2 f7       	brpl	.-8      	; 0x231a <Port_enuSetPinMode+0x166>
    2322:	84 2b       	or	r24, r20
    2324:	8c 93       	st	X, r24
    2326:	8a c2       	rjmp	.+1300   	; 0x283c <Port_enuSetPinMode+0x688>
							break;
						}
						case PORT_u8OUTPUT_HIGH:
						{
							SET_BIT(DDRA,Loc_u8Pin);
    2328:	aa e3       	ldi	r26, 0x3A	; 58
    232a:	b0 e0       	ldi	r27, 0x00	; 0
    232c:	ea e3       	ldi	r30, 0x3A	; 58
    232e:	f0 e0       	ldi	r31, 0x00	; 0
    2330:	80 81       	ld	r24, Z
    2332:	48 2f       	mov	r20, r24
    2334:	89 81       	ldd	r24, Y+1	; 0x01
    2336:	28 2f       	mov	r18, r24
    2338:	30 e0       	ldi	r19, 0x00	; 0
    233a:	81 e0       	ldi	r24, 0x01	; 1
    233c:	90 e0       	ldi	r25, 0x00	; 0
    233e:	02 c0       	rjmp	.+4      	; 0x2344 <Port_enuSetPinMode+0x190>
    2340:	88 0f       	add	r24, r24
    2342:	99 1f       	adc	r25, r25
    2344:	2a 95       	dec	r18
    2346:	e2 f7       	brpl	.-8      	; 0x2340 <Port_enuSetPinMode+0x18c>
    2348:	84 2b       	or	r24, r20
    234a:	8c 93       	st	X, r24
							SET_BIT(PORTA,Loc_u8Pin);
    234c:	ab e3       	ldi	r26, 0x3B	; 59
    234e:	b0 e0       	ldi	r27, 0x00	; 0
    2350:	eb e3       	ldi	r30, 0x3B	; 59
    2352:	f0 e0       	ldi	r31, 0x00	; 0
    2354:	80 81       	ld	r24, Z
    2356:	48 2f       	mov	r20, r24
    2358:	89 81       	ldd	r24, Y+1	; 0x01
    235a:	28 2f       	mov	r18, r24
    235c:	30 e0       	ldi	r19, 0x00	; 0
    235e:	81 e0       	ldi	r24, 0x01	; 1
    2360:	90 e0       	ldi	r25, 0x00	; 0
    2362:	02 2e       	mov	r0, r18
    2364:	02 c0       	rjmp	.+4      	; 0x236a <Port_enuSetPinMode+0x1b6>
    2366:	88 0f       	add	r24, r24
    2368:	99 1f       	adc	r25, r25
    236a:	0a 94       	dec	r0
    236c:	e2 f7       	brpl	.-8      	; 0x2366 <Port_enuSetPinMode+0x1b2>
    236e:	84 2b       	or	r24, r20
    2370:	8c 93       	st	X, r24
    2372:	64 c2       	rjmp	.+1224   	; 0x283c <Port_enuSetPinMode+0x688>
							break;
						}
						case PORT_u8OUTPUT_LOW:
						{
							CLR_BIT(DDRA,Loc_u8Pin);
    2374:	aa e3       	ldi	r26, 0x3A	; 58
    2376:	b0 e0       	ldi	r27, 0x00	; 0
    2378:	ea e3       	ldi	r30, 0x3A	; 58
    237a:	f0 e0       	ldi	r31, 0x00	; 0
    237c:	80 81       	ld	r24, Z
    237e:	48 2f       	mov	r20, r24
    2380:	89 81       	ldd	r24, Y+1	; 0x01
    2382:	28 2f       	mov	r18, r24
    2384:	30 e0       	ldi	r19, 0x00	; 0
    2386:	81 e0       	ldi	r24, 0x01	; 1
    2388:	90 e0       	ldi	r25, 0x00	; 0
    238a:	02 c0       	rjmp	.+4      	; 0x2390 <Port_enuSetPinMode+0x1dc>
    238c:	88 0f       	add	r24, r24
    238e:	99 1f       	adc	r25, r25
    2390:	2a 95       	dec	r18
    2392:	e2 f7       	brpl	.-8      	; 0x238c <Port_enuSetPinMode+0x1d8>
    2394:	80 95       	com	r24
    2396:	84 23       	and	r24, r20
    2398:	8c 93       	st	X, r24
							CLR_BIT(PORTA,Loc_u8Pin);
    239a:	ab e3       	ldi	r26, 0x3B	; 59
    239c:	b0 e0       	ldi	r27, 0x00	; 0
    239e:	eb e3       	ldi	r30, 0x3B	; 59
    23a0:	f0 e0       	ldi	r31, 0x00	; 0
    23a2:	80 81       	ld	r24, Z
    23a4:	48 2f       	mov	r20, r24
    23a6:	89 81       	ldd	r24, Y+1	; 0x01
    23a8:	28 2f       	mov	r18, r24
    23aa:	30 e0       	ldi	r19, 0x00	; 0
    23ac:	81 e0       	ldi	r24, 0x01	; 1
    23ae:	90 e0       	ldi	r25, 0x00	; 0
    23b0:	02 2e       	mov	r0, r18
    23b2:	02 c0       	rjmp	.+4      	; 0x23b8 <Port_enuSetPinMode+0x204>
    23b4:	88 0f       	add	r24, r24
    23b6:	99 1f       	adc	r25, r25
    23b8:	0a 94       	dec	r0
    23ba:	e2 f7       	brpl	.-8      	; 0x23b4 <Port_enuSetPinMode+0x200>
    23bc:	80 95       	com	r24
    23be:	84 23       	and	r24, r20
    23c0:	8c 93       	st	X, r24
    23c2:	3c c2       	rjmp	.+1144   	; 0x283c <Port_enuSetPinMode+0x688>
					}
					break;
				}
				case PORT_u8PORT_B:
				{
					switch(Copy_u8PinMode)
    23c4:	8d 81       	ldd	r24, Y+5	; 0x05
    23c6:	28 2f       	mov	r18, r24
    23c8:	30 e0       	ldi	r19, 0x00	; 0
    23ca:	3b 87       	std	Y+11, r19	; 0x0b
    23cc:	2a 87       	std	Y+10, r18	; 0x0a
    23ce:	8a 85       	ldd	r24, Y+10	; 0x0a
    23d0:	9b 85       	ldd	r25, Y+11	; 0x0b
    23d2:	81 30       	cpi	r24, 0x01	; 1
    23d4:	91 05       	cpc	r25, r1
    23d6:	09 f4       	brne	.+2      	; 0x23da <Port_enuSetPinMode+0x226>
    23d8:	3f c0       	rjmp	.+126    	; 0x2458 <Port_enuSetPinMode+0x2a4>
    23da:	2a 85       	ldd	r18, Y+10	; 0x0a
    23dc:	3b 85       	ldd	r19, Y+11	; 0x0b
    23de:	22 30       	cpi	r18, 0x02	; 2
    23e0:	31 05       	cpc	r19, r1
    23e2:	2c f4       	brge	.+10     	; 0x23ee <Port_enuSetPinMode+0x23a>
    23e4:	8a 85       	ldd	r24, Y+10	; 0x0a
    23e6:	9b 85       	ldd	r25, Y+11	; 0x0b
    23e8:	00 97       	sbiw	r24, 0x00	; 0
    23ea:	71 f0       	breq	.+28     	; 0x2408 <Port_enuSetPinMode+0x254>
    23ec:	27 c2       	rjmp	.+1102   	; 0x283c <Port_enuSetPinMode+0x688>
    23ee:	2a 85       	ldd	r18, Y+10	; 0x0a
    23f0:	3b 85       	ldd	r19, Y+11	; 0x0b
    23f2:	22 30       	cpi	r18, 0x02	; 2
    23f4:	31 05       	cpc	r19, r1
    23f6:	09 f4       	brne	.+2      	; 0x23fa <Port_enuSetPinMode+0x246>
    23f8:	56 c0       	rjmp	.+172    	; 0x24a6 <Port_enuSetPinMode+0x2f2>
    23fa:	8a 85       	ldd	r24, Y+10	; 0x0a
    23fc:	9b 85       	ldd	r25, Y+11	; 0x0b
    23fe:	83 30       	cpi	r24, 0x03	; 3
    2400:	91 05       	cpc	r25, r1
    2402:	09 f4       	brne	.+2      	; 0x2406 <Port_enuSetPinMode+0x252>
    2404:	76 c0       	rjmp	.+236    	; 0x24f2 <Port_enuSetPinMode+0x33e>
    2406:	1a c2       	rjmp	.+1076   	; 0x283c <Port_enuSetPinMode+0x688>
					{
						case PORT_u8INPUT_HIGHIMPEDANCE:
						{
							CLR_BIT(DDRB,Loc_u8Pin);
    2408:	a7 e3       	ldi	r26, 0x37	; 55
    240a:	b0 e0       	ldi	r27, 0x00	; 0
    240c:	e7 e3       	ldi	r30, 0x37	; 55
    240e:	f0 e0       	ldi	r31, 0x00	; 0
    2410:	80 81       	ld	r24, Z
    2412:	48 2f       	mov	r20, r24
    2414:	89 81       	ldd	r24, Y+1	; 0x01
    2416:	28 2f       	mov	r18, r24
    2418:	30 e0       	ldi	r19, 0x00	; 0
    241a:	81 e0       	ldi	r24, 0x01	; 1
    241c:	90 e0       	ldi	r25, 0x00	; 0
    241e:	02 c0       	rjmp	.+4      	; 0x2424 <Port_enuSetPinMode+0x270>
    2420:	88 0f       	add	r24, r24
    2422:	99 1f       	adc	r25, r25
    2424:	2a 95       	dec	r18
    2426:	e2 f7       	brpl	.-8      	; 0x2420 <Port_enuSetPinMode+0x26c>
    2428:	80 95       	com	r24
    242a:	84 23       	and	r24, r20
    242c:	8c 93       	st	X, r24
							CLR_BIT(PORTB,Loc_u8Pin);
    242e:	a8 e3       	ldi	r26, 0x38	; 56
    2430:	b0 e0       	ldi	r27, 0x00	; 0
    2432:	e8 e3       	ldi	r30, 0x38	; 56
    2434:	f0 e0       	ldi	r31, 0x00	; 0
    2436:	80 81       	ld	r24, Z
    2438:	48 2f       	mov	r20, r24
    243a:	89 81       	ldd	r24, Y+1	; 0x01
    243c:	28 2f       	mov	r18, r24
    243e:	30 e0       	ldi	r19, 0x00	; 0
    2440:	81 e0       	ldi	r24, 0x01	; 1
    2442:	90 e0       	ldi	r25, 0x00	; 0
    2444:	02 2e       	mov	r0, r18
    2446:	02 c0       	rjmp	.+4      	; 0x244c <Port_enuSetPinMode+0x298>
    2448:	88 0f       	add	r24, r24
    244a:	99 1f       	adc	r25, r25
    244c:	0a 94       	dec	r0
    244e:	e2 f7       	brpl	.-8      	; 0x2448 <Port_enuSetPinMode+0x294>
    2450:	80 95       	com	r24
    2452:	84 23       	and	r24, r20
    2454:	8c 93       	st	X, r24
    2456:	f2 c1       	rjmp	.+996    	; 0x283c <Port_enuSetPinMode+0x688>
							break;
						}
						case PORT_u8INPUT_PULLUP:
						{
							CLR_BIT(DDRB,Loc_u8Pin);
    2458:	a7 e3       	ldi	r26, 0x37	; 55
    245a:	b0 e0       	ldi	r27, 0x00	; 0
    245c:	e7 e3       	ldi	r30, 0x37	; 55
    245e:	f0 e0       	ldi	r31, 0x00	; 0
    2460:	80 81       	ld	r24, Z
    2462:	48 2f       	mov	r20, r24
    2464:	89 81       	ldd	r24, Y+1	; 0x01
    2466:	28 2f       	mov	r18, r24
    2468:	30 e0       	ldi	r19, 0x00	; 0
    246a:	81 e0       	ldi	r24, 0x01	; 1
    246c:	90 e0       	ldi	r25, 0x00	; 0
    246e:	02 c0       	rjmp	.+4      	; 0x2474 <Port_enuSetPinMode+0x2c0>
    2470:	88 0f       	add	r24, r24
    2472:	99 1f       	adc	r25, r25
    2474:	2a 95       	dec	r18
    2476:	e2 f7       	brpl	.-8      	; 0x2470 <Port_enuSetPinMode+0x2bc>
    2478:	80 95       	com	r24
    247a:	84 23       	and	r24, r20
    247c:	8c 93       	st	X, r24
							SET_BIT(PORTB,Loc_u8Pin);
    247e:	a8 e3       	ldi	r26, 0x38	; 56
    2480:	b0 e0       	ldi	r27, 0x00	; 0
    2482:	e8 e3       	ldi	r30, 0x38	; 56
    2484:	f0 e0       	ldi	r31, 0x00	; 0
    2486:	80 81       	ld	r24, Z
    2488:	48 2f       	mov	r20, r24
    248a:	89 81       	ldd	r24, Y+1	; 0x01
    248c:	28 2f       	mov	r18, r24
    248e:	30 e0       	ldi	r19, 0x00	; 0
    2490:	81 e0       	ldi	r24, 0x01	; 1
    2492:	90 e0       	ldi	r25, 0x00	; 0
    2494:	02 2e       	mov	r0, r18
    2496:	02 c0       	rjmp	.+4      	; 0x249c <Port_enuSetPinMode+0x2e8>
    2498:	88 0f       	add	r24, r24
    249a:	99 1f       	adc	r25, r25
    249c:	0a 94       	dec	r0
    249e:	e2 f7       	brpl	.-8      	; 0x2498 <Port_enuSetPinMode+0x2e4>
    24a0:	84 2b       	or	r24, r20
    24a2:	8c 93       	st	X, r24
    24a4:	cb c1       	rjmp	.+918    	; 0x283c <Port_enuSetPinMode+0x688>
							break;
						}
						case PORT_u8OUTPUT_HIGH:
						{
							SET_BIT(DDRB,Loc_u8Pin);
    24a6:	a7 e3       	ldi	r26, 0x37	; 55
    24a8:	b0 e0       	ldi	r27, 0x00	; 0
    24aa:	e7 e3       	ldi	r30, 0x37	; 55
    24ac:	f0 e0       	ldi	r31, 0x00	; 0
    24ae:	80 81       	ld	r24, Z
    24b0:	48 2f       	mov	r20, r24
    24b2:	89 81       	ldd	r24, Y+1	; 0x01
    24b4:	28 2f       	mov	r18, r24
    24b6:	30 e0       	ldi	r19, 0x00	; 0
    24b8:	81 e0       	ldi	r24, 0x01	; 1
    24ba:	90 e0       	ldi	r25, 0x00	; 0
    24bc:	02 c0       	rjmp	.+4      	; 0x24c2 <Port_enuSetPinMode+0x30e>
    24be:	88 0f       	add	r24, r24
    24c0:	99 1f       	adc	r25, r25
    24c2:	2a 95       	dec	r18
    24c4:	e2 f7       	brpl	.-8      	; 0x24be <Port_enuSetPinMode+0x30a>
    24c6:	84 2b       	or	r24, r20
    24c8:	8c 93       	st	X, r24
							SET_BIT(PORTB,Loc_u8Pin);
    24ca:	a8 e3       	ldi	r26, 0x38	; 56
    24cc:	b0 e0       	ldi	r27, 0x00	; 0
    24ce:	e8 e3       	ldi	r30, 0x38	; 56
    24d0:	f0 e0       	ldi	r31, 0x00	; 0
    24d2:	80 81       	ld	r24, Z
    24d4:	48 2f       	mov	r20, r24
    24d6:	89 81       	ldd	r24, Y+1	; 0x01
    24d8:	28 2f       	mov	r18, r24
    24da:	30 e0       	ldi	r19, 0x00	; 0
    24dc:	81 e0       	ldi	r24, 0x01	; 1
    24de:	90 e0       	ldi	r25, 0x00	; 0
    24e0:	02 2e       	mov	r0, r18
    24e2:	02 c0       	rjmp	.+4      	; 0x24e8 <Port_enuSetPinMode+0x334>
    24e4:	88 0f       	add	r24, r24
    24e6:	99 1f       	adc	r25, r25
    24e8:	0a 94       	dec	r0
    24ea:	e2 f7       	brpl	.-8      	; 0x24e4 <Port_enuSetPinMode+0x330>
    24ec:	84 2b       	or	r24, r20
    24ee:	8c 93       	st	X, r24
    24f0:	a5 c1       	rjmp	.+842    	; 0x283c <Port_enuSetPinMode+0x688>
							break;
						}
						case PORT_u8OUTPUT_LOW:
						{
							CLR_BIT(DDRB,Loc_u8Pin);
    24f2:	a7 e3       	ldi	r26, 0x37	; 55
    24f4:	b0 e0       	ldi	r27, 0x00	; 0
    24f6:	e7 e3       	ldi	r30, 0x37	; 55
    24f8:	f0 e0       	ldi	r31, 0x00	; 0
    24fa:	80 81       	ld	r24, Z
    24fc:	48 2f       	mov	r20, r24
    24fe:	89 81       	ldd	r24, Y+1	; 0x01
    2500:	28 2f       	mov	r18, r24
    2502:	30 e0       	ldi	r19, 0x00	; 0
    2504:	81 e0       	ldi	r24, 0x01	; 1
    2506:	90 e0       	ldi	r25, 0x00	; 0
    2508:	02 c0       	rjmp	.+4      	; 0x250e <Port_enuSetPinMode+0x35a>
    250a:	88 0f       	add	r24, r24
    250c:	99 1f       	adc	r25, r25
    250e:	2a 95       	dec	r18
    2510:	e2 f7       	brpl	.-8      	; 0x250a <Port_enuSetPinMode+0x356>
    2512:	80 95       	com	r24
    2514:	84 23       	and	r24, r20
    2516:	8c 93       	st	X, r24
							CLR_BIT(PORTB,Loc_u8Pin);
    2518:	a8 e3       	ldi	r26, 0x38	; 56
    251a:	b0 e0       	ldi	r27, 0x00	; 0
    251c:	e8 e3       	ldi	r30, 0x38	; 56
    251e:	f0 e0       	ldi	r31, 0x00	; 0
    2520:	80 81       	ld	r24, Z
    2522:	48 2f       	mov	r20, r24
    2524:	89 81       	ldd	r24, Y+1	; 0x01
    2526:	28 2f       	mov	r18, r24
    2528:	30 e0       	ldi	r19, 0x00	; 0
    252a:	81 e0       	ldi	r24, 0x01	; 1
    252c:	90 e0       	ldi	r25, 0x00	; 0
    252e:	02 2e       	mov	r0, r18
    2530:	02 c0       	rjmp	.+4      	; 0x2536 <Port_enuSetPinMode+0x382>
    2532:	88 0f       	add	r24, r24
    2534:	99 1f       	adc	r25, r25
    2536:	0a 94       	dec	r0
    2538:	e2 f7       	brpl	.-8      	; 0x2532 <Port_enuSetPinMode+0x37e>
    253a:	80 95       	com	r24
    253c:	84 23       	and	r24, r20
    253e:	8c 93       	st	X, r24
    2540:	7d c1       	rjmp	.+762    	; 0x283c <Port_enuSetPinMode+0x688>
					}
					break;
				}
				case PORT_u8PORT_C:
				{
					switch(Copy_u8PinMode)
    2542:	8d 81       	ldd	r24, Y+5	; 0x05
    2544:	28 2f       	mov	r18, r24
    2546:	30 e0       	ldi	r19, 0x00	; 0
    2548:	39 87       	std	Y+9, r19	; 0x09
    254a:	28 87       	std	Y+8, r18	; 0x08
    254c:	88 85       	ldd	r24, Y+8	; 0x08
    254e:	99 85       	ldd	r25, Y+9	; 0x09
    2550:	81 30       	cpi	r24, 0x01	; 1
    2552:	91 05       	cpc	r25, r1
    2554:	09 f4       	brne	.+2      	; 0x2558 <Port_enuSetPinMode+0x3a4>
    2556:	3f c0       	rjmp	.+126    	; 0x25d6 <Port_enuSetPinMode+0x422>
    2558:	28 85       	ldd	r18, Y+8	; 0x08
    255a:	39 85       	ldd	r19, Y+9	; 0x09
    255c:	22 30       	cpi	r18, 0x02	; 2
    255e:	31 05       	cpc	r19, r1
    2560:	2c f4       	brge	.+10     	; 0x256c <Port_enuSetPinMode+0x3b8>
    2562:	88 85       	ldd	r24, Y+8	; 0x08
    2564:	99 85       	ldd	r25, Y+9	; 0x09
    2566:	00 97       	sbiw	r24, 0x00	; 0
    2568:	71 f0       	breq	.+28     	; 0x2586 <Port_enuSetPinMode+0x3d2>
    256a:	68 c1       	rjmp	.+720    	; 0x283c <Port_enuSetPinMode+0x688>
    256c:	28 85       	ldd	r18, Y+8	; 0x08
    256e:	39 85       	ldd	r19, Y+9	; 0x09
    2570:	22 30       	cpi	r18, 0x02	; 2
    2572:	31 05       	cpc	r19, r1
    2574:	09 f4       	brne	.+2      	; 0x2578 <Port_enuSetPinMode+0x3c4>
    2576:	56 c0       	rjmp	.+172    	; 0x2624 <Port_enuSetPinMode+0x470>
    2578:	88 85       	ldd	r24, Y+8	; 0x08
    257a:	99 85       	ldd	r25, Y+9	; 0x09
    257c:	83 30       	cpi	r24, 0x03	; 3
    257e:	91 05       	cpc	r25, r1
    2580:	09 f4       	brne	.+2      	; 0x2584 <Port_enuSetPinMode+0x3d0>
    2582:	76 c0       	rjmp	.+236    	; 0x2670 <Port_enuSetPinMode+0x4bc>
    2584:	5b c1       	rjmp	.+694    	; 0x283c <Port_enuSetPinMode+0x688>
					{
						case PORT_u8INPUT_HIGHIMPEDANCE:
						{
							CLR_BIT(DDRC,Loc_u8Pin);
    2586:	a4 e3       	ldi	r26, 0x34	; 52
    2588:	b0 e0       	ldi	r27, 0x00	; 0
    258a:	e4 e3       	ldi	r30, 0x34	; 52
    258c:	f0 e0       	ldi	r31, 0x00	; 0
    258e:	80 81       	ld	r24, Z
    2590:	48 2f       	mov	r20, r24
    2592:	89 81       	ldd	r24, Y+1	; 0x01
    2594:	28 2f       	mov	r18, r24
    2596:	30 e0       	ldi	r19, 0x00	; 0
    2598:	81 e0       	ldi	r24, 0x01	; 1
    259a:	90 e0       	ldi	r25, 0x00	; 0
    259c:	02 c0       	rjmp	.+4      	; 0x25a2 <Port_enuSetPinMode+0x3ee>
    259e:	88 0f       	add	r24, r24
    25a0:	99 1f       	adc	r25, r25
    25a2:	2a 95       	dec	r18
    25a4:	e2 f7       	brpl	.-8      	; 0x259e <Port_enuSetPinMode+0x3ea>
    25a6:	80 95       	com	r24
    25a8:	84 23       	and	r24, r20
    25aa:	8c 93       	st	X, r24
							CLR_BIT(PORTC,Loc_u8Pin);
    25ac:	a5 e3       	ldi	r26, 0x35	; 53
    25ae:	b0 e0       	ldi	r27, 0x00	; 0
    25b0:	e5 e3       	ldi	r30, 0x35	; 53
    25b2:	f0 e0       	ldi	r31, 0x00	; 0
    25b4:	80 81       	ld	r24, Z
    25b6:	48 2f       	mov	r20, r24
    25b8:	89 81       	ldd	r24, Y+1	; 0x01
    25ba:	28 2f       	mov	r18, r24
    25bc:	30 e0       	ldi	r19, 0x00	; 0
    25be:	81 e0       	ldi	r24, 0x01	; 1
    25c0:	90 e0       	ldi	r25, 0x00	; 0
    25c2:	02 2e       	mov	r0, r18
    25c4:	02 c0       	rjmp	.+4      	; 0x25ca <Port_enuSetPinMode+0x416>
    25c6:	88 0f       	add	r24, r24
    25c8:	99 1f       	adc	r25, r25
    25ca:	0a 94       	dec	r0
    25cc:	e2 f7       	brpl	.-8      	; 0x25c6 <Port_enuSetPinMode+0x412>
    25ce:	80 95       	com	r24
    25d0:	84 23       	and	r24, r20
    25d2:	8c 93       	st	X, r24
    25d4:	33 c1       	rjmp	.+614    	; 0x283c <Port_enuSetPinMode+0x688>
							break;
						}
						case PORT_u8INPUT_PULLUP:
						{
							CLR_BIT(DDRC,Loc_u8Pin);
    25d6:	a4 e3       	ldi	r26, 0x34	; 52
    25d8:	b0 e0       	ldi	r27, 0x00	; 0
    25da:	e4 e3       	ldi	r30, 0x34	; 52
    25dc:	f0 e0       	ldi	r31, 0x00	; 0
    25de:	80 81       	ld	r24, Z
    25e0:	48 2f       	mov	r20, r24
    25e2:	89 81       	ldd	r24, Y+1	; 0x01
    25e4:	28 2f       	mov	r18, r24
    25e6:	30 e0       	ldi	r19, 0x00	; 0
    25e8:	81 e0       	ldi	r24, 0x01	; 1
    25ea:	90 e0       	ldi	r25, 0x00	; 0
    25ec:	02 c0       	rjmp	.+4      	; 0x25f2 <Port_enuSetPinMode+0x43e>
    25ee:	88 0f       	add	r24, r24
    25f0:	99 1f       	adc	r25, r25
    25f2:	2a 95       	dec	r18
    25f4:	e2 f7       	brpl	.-8      	; 0x25ee <Port_enuSetPinMode+0x43a>
    25f6:	80 95       	com	r24
    25f8:	84 23       	and	r24, r20
    25fa:	8c 93       	st	X, r24
							SET_BIT(PORTC,Loc_u8Pin);
    25fc:	a5 e3       	ldi	r26, 0x35	; 53
    25fe:	b0 e0       	ldi	r27, 0x00	; 0
    2600:	e5 e3       	ldi	r30, 0x35	; 53
    2602:	f0 e0       	ldi	r31, 0x00	; 0
    2604:	80 81       	ld	r24, Z
    2606:	48 2f       	mov	r20, r24
    2608:	89 81       	ldd	r24, Y+1	; 0x01
    260a:	28 2f       	mov	r18, r24
    260c:	30 e0       	ldi	r19, 0x00	; 0
    260e:	81 e0       	ldi	r24, 0x01	; 1
    2610:	90 e0       	ldi	r25, 0x00	; 0
    2612:	02 2e       	mov	r0, r18
    2614:	02 c0       	rjmp	.+4      	; 0x261a <Port_enuSetPinMode+0x466>
    2616:	88 0f       	add	r24, r24
    2618:	99 1f       	adc	r25, r25
    261a:	0a 94       	dec	r0
    261c:	e2 f7       	brpl	.-8      	; 0x2616 <Port_enuSetPinMode+0x462>
    261e:	84 2b       	or	r24, r20
    2620:	8c 93       	st	X, r24
    2622:	0c c1       	rjmp	.+536    	; 0x283c <Port_enuSetPinMode+0x688>
							break;
						}
						case PORT_u8OUTPUT_HIGH:
						{
							SET_BIT(DDRC,Loc_u8Pin);
    2624:	a4 e3       	ldi	r26, 0x34	; 52
    2626:	b0 e0       	ldi	r27, 0x00	; 0
    2628:	e4 e3       	ldi	r30, 0x34	; 52
    262a:	f0 e0       	ldi	r31, 0x00	; 0
    262c:	80 81       	ld	r24, Z
    262e:	48 2f       	mov	r20, r24
    2630:	89 81       	ldd	r24, Y+1	; 0x01
    2632:	28 2f       	mov	r18, r24
    2634:	30 e0       	ldi	r19, 0x00	; 0
    2636:	81 e0       	ldi	r24, 0x01	; 1
    2638:	90 e0       	ldi	r25, 0x00	; 0
    263a:	02 c0       	rjmp	.+4      	; 0x2640 <Port_enuSetPinMode+0x48c>
    263c:	88 0f       	add	r24, r24
    263e:	99 1f       	adc	r25, r25
    2640:	2a 95       	dec	r18
    2642:	e2 f7       	brpl	.-8      	; 0x263c <Port_enuSetPinMode+0x488>
    2644:	84 2b       	or	r24, r20
    2646:	8c 93       	st	X, r24
							SET_BIT(PORTC,Loc_u8Pin);
    2648:	a5 e3       	ldi	r26, 0x35	; 53
    264a:	b0 e0       	ldi	r27, 0x00	; 0
    264c:	e5 e3       	ldi	r30, 0x35	; 53
    264e:	f0 e0       	ldi	r31, 0x00	; 0
    2650:	80 81       	ld	r24, Z
    2652:	48 2f       	mov	r20, r24
    2654:	89 81       	ldd	r24, Y+1	; 0x01
    2656:	28 2f       	mov	r18, r24
    2658:	30 e0       	ldi	r19, 0x00	; 0
    265a:	81 e0       	ldi	r24, 0x01	; 1
    265c:	90 e0       	ldi	r25, 0x00	; 0
    265e:	02 2e       	mov	r0, r18
    2660:	02 c0       	rjmp	.+4      	; 0x2666 <Port_enuSetPinMode+0x4b2>
    2662:	88 0f       	add	r24, r24
    2664:	99 1f       	adc	r25, r25
    2666:	0a 94       	dec	r0
    2668:	e2 f7       	brpl	.-8      	; 0x2662 <Port_enuSetPinMode+0x4ae>
    266a:	84 2b       	or	r24, r20
    266c:	8c 93       	st	X, r24
    266e:	e6 c0       	rjmp	.+460    	; 0x283c <Port_enuSetPinMode+0x688>
							break;
						}
						case PORT_u8OUTPUT_LOW:
						{
							CLR_BIT(DDRC,Loc_u8Pin);
    2670:	a4 e3       	ldi	r26, 0x34	; 52
    2672:	b0 e0       	ldi	r27, 0x00	; 0
    2674:	e4 e3       	ldi	r30, 0x34	; 52
    2676:	f0 e0       	ldi	r31, 0x00	; 0
    2678:	80 81       	ld	r24, Z
    267a:	48 2f       	mov	r20, r24
    267c:	89 81       	ldd	r24, Y+1	; 0x01
    267e:	28 2f       	mov	r18, r24
    2680:	30 e0       	ldi	r19, 0x00	; 0
    2682:	81 e0       	ldi	r24, 0x01	; 1
    2684:	90 e0       	ldi	r25, 0x00	; 0
    2686:	02 c0       	rjmp	.+4      	; 0x268c <Port_enuSetPinMode+0x4d8>
    2688:	88 0f       	add	r24, r24
    268a:	99 1f       	adc	r25, r25
    268c:	2a 95       	dec	r18
    268e:	e2 f7       	brpl	.-8      	; 0x2688 <Port_enuSetPinMode+0x4d4>
    2690:	80 95       	com	r24
    2692:	84 23       	and	r24, r20
    2694:	8c 93       	st	X, r24
							CLR_BIT(PORTC,Loc_u8Pin);
    2696:	a5 e3       	ldi	r26, 0x35	; 53
    2698:	b0 e0       	ldi	r27, 0x00	; 0
    269a:	e5 e3       	ldi	r30, 0x35	; 53
    269c:	f0 e0       	ldi	r31, 0x00	; 0
    269e:	80 81       	ld	r24, Z
    26a0:	48 2f       	mov	r20, r24
    26a2:	89 81       	ldd	r24, Y+1	; 0x01
    26a4:	28 2f       	mov	r18, r24
    26a6:	30 e0       	ldi	r19, 0x00	; 0
    26a8:	81 e0       	ldi	r24, 0x01	; 1
    26aa:	90 e0       	ldi	r25, 0x00	; 0
    26ac:	02 2e       	mov	r0, r18
    26ae:	02 c0       	rjmp	.+4      	; 0x26b4 <Port_enuSetPinMode+0x500>
    26b0:	88 0f       	add	r24, r24
    26b2:	99 1f       	adc	r25, r25
    26b4:	0a 94       	dec	r0
    26b6:	e2 f7       	brpl	.-8      	; 0x26b0 <Port_enuSetPinMode+0x4fc>
    26b8:	80 95       	com	r24
    26ba:	84 23       	and	r24, r20
    26bc:	8c 93       	st	X, r24
    26be:	be c0       	rjmp	.+380    	; 0x283c <Port_enuSetPinMode+0x688>
					}
					break;
				}
				case PORT_u8PORT_D:
				{
					switch(Copy_u8PinMode)
    26c0:	8d 81       	ldd	r24, Y+5	; 0x05
    26c2:	28 2f       	mov	r18, r24
    26c4:	30 e0       	ldi	r19, 0x00	; 0
    26c6:	3f 83       	std	Y+7, r19	; 0x07
    26c8:	2e 83       	std	Y+6, r18	; 0x06
    26ca:	8e 81       	ldd	r24, Y+6	; 0x06
    26cc:	9f 81       	ldd	r25, Y+7	; 0x07
    26ce:	81 30       	cpi	r24, 0x01	; 1
    26d0:	91 05       	cpc	r25, r1
    26d2:	09 f4       	brne	.+2      	; 0x26d6 <Port_enuSetPinMode+0x522>
    26d4:	3f c0       	rjmp	.+126    	; 0x2754 <Port_enuSetPinMode+0x5a0>
    26d6:	2e 81       	ldd	r18, Y+6	; 0x06
    26d8:	3f 81       	ldd	r19, Y+7	; 0x07
    26da:	22 30       	cpi	r18, 0x02	; 2
    26dc:	31 05       	cpc	r19, r1
    26de:	2c f4       	brge	.+10     	; 0x26ea <Port_enuSetPinMode+0x536>
    26e0:	8e 81       	ldd	r24, Y+6	; 0x06
    26e2:	9f 81       	ldd	r25, Y+7	; 0x07
    26e4:	00 97       	sbiw	r24, 0x00	; 0
    26e6:	71 f0       	breq	.+28     	; 0x2704 <Port_enuSetPinMode+0x550>
    26e8:	a9 c0       	rjmp	.+338    	; 0x283c <Port_enuSetPinMode+0x688>
    26ea:	2e 81       	ldd	r18, Y+6	; 0x06
    26ec:	3f 81       	ldd	r19, Y+7	; 0x07
    26ee:	22 30       	cpi	r18, 0x02	; 2
    26f0:	31 05       	cpc	r19, r1
    26f2:	09 f4       	brne	.+2      	; 0x26f6 <Port_enuSetPinMode+0x542>
    26f4:	56 c0       	rjmp	.+172    	; 0x27a2 <Port_enuSetPinMode+0x5ee>
    26f6:	8e 81       	ldd	r24, Y+6	; 0x06
    26f8:	9f 81       	ldd	r25, Y+7	; 0x07
    26fa:	83 30       	cpi	r24, 0x03	; 3
    26fc:	91 05       	cpc	r25, r1
    26fe:	09 f4       	brne	.+2      	; 0x2702 <Port_enuSetPinMode+0x54e>
    2700:	76 c0       	rjmp	.+236    	; 0x27ee <Port_enuSetPinMode+0x63a>
    2702:	9c c0       	rjmp	.+312    	; 0x283c <Port_enuSetPinMode+0x688>
					{
						case PORT_u8INPUT_HIGHIMPEDANCE:
						{
							CLR_BIT(DDRD,Loc_u8Pin);
    2704:	a1 e3       	ldi	r26, 0x31	; 49
    2706:	b0 e0       	ldi	r27, 0x00	; 0
    2708:	e1 e3       	ldi	r30, 0x31	; 49
    270a:	f0 e0       	ldi	r31, 0x00	; 0
    270c:	80 81       	ld	r24, Z
    270e:	48 2f       	mov	r20, r24
    2710:	89 81       	ldd	r24, Y+1	; 0x01
    2712:	28 2f       	mov	r18, r24
    2714:	30 e0       	ldi	r19, 0x00	; 0
    2716:	81 e0       	ldi	r24, 0x01	; 1
    2718:	90 e0       	ldi	r25, 0x00	; 0
    271a:	02 c0       	rjmp	.+4      	; 0x2720 <Port_enuSetPinMode+0x56c>
    271c:	88 0f       	add	r24, r24
    271e:	99 1f       	adc	r25, r25
    2720:	2a 95       	dec	r18
    2722:	e2 f7       	brpl	.-8      	; 0x271c <Port_enuSetPinMode+0x568>
    2724:	80 95       	com	r24
    2726:	84 23       	and	r24, r20
    2728:	8c 93       	st	X, r24
							CLR_BIT(PORTD,Loc_u8Pin);
    272a:	a2 e3       	ldi	r26, 0x32	; 50
    272c:	b0 e0       	ldi	r27, 0x00	; 0
    272e:	e2 e3       	ldi	r30, 0x32	; 50
    2730:	f0 e0       	ldi	r31, 0x00	; 0
    2732:	80 81       	ld	r24, Z
    2734:	48 2f       	mov	r20, r24
    2736:	89 81       	ldd	r24, Y+1	; 0x01
    2738:	28 2f       	mov	r18, r24
    273a:	30 e0       	ldi	r19, 0x00	; 0
    273c:	81 e0       	ldi	r24, 0x01	; 1
    273e:	90 e0       	ldi	r25, 0x00	; 0
    2740:	02 2e       	mov	r0, r18
    2742:	02 c0       	rjmp	.+4      	; 0x2748 <Port_enuSetPinMode+0x594>
    2744:	88 0f       	add	r24, r24
    2746:	99 1f       	adc	r25, r25
    2748:	0a 94       	dec	r0
    274a:	e2 f7       	brpl	.-8      	; 0x2744 <Port_enuSetPinMode+0x590>
    274c:	80 95       	com	r24
    274e:	84 23       	and	r24, r20
    2750:	8c 93       	st	X, r24
    2752:	74 c0       	rjmp	.+232    	; 0x283c <Port_enuSetPinMode+0x688>
							break;
						}
						case PORT_u8INPUT_PULLUP:
						{
							CLR_BIT(DDRD,Loc_u8Pin);
    2754:	a1 e3       	ldi	r26, 0x31	; 49
    2756:	b0 e0       	ldi	r27, 0x00	; 0
    2758:	e1 e3       	ldi	r30, 0x31	; 49
    275a:	f0 e0       	ldi	r31, 0x00	; 0
    275c:	80 81       	ld	r24, Z
    275e:	48 2f       	mov	r20, r24
    2760:	89 81       	ldd	r24, Y+1	; 0x01
    2762:	28 2f       	mov	r18, r24
    2764:	30 e0       	ldi	r19, 0x00	; 0
    2766:	81 e0       	ldi	r24, 0x01	; 1
    2768:	90 e0       	ldi	r25, 0x00	; 0
    276a:	02 c0       	rjmp	.+4      	; 0x2770 <Port_enuSetPinMode+0x5bc>
    276c:	88 0f       	add	r24, r24
    276e:	99 1f       	adc	r25, r25
    2770:	2a 95       	dec	r18
    2772:	e2 f7       	brpl	.-8      	; 0x276c <Port_enuSetPinMode+0x5b8>
    2774:	80 95       	com	r24
    2776:	84 23       	and	r24, r20
    2778:	8c 93       	st	X, r24
							SET_BIT(PORTD,Loc_u8Pin);
    277a:	a2 e3       	ldi	r26, 0x32	; 50
    277c:	b0 e0       	ldi	r27, 0x00	; 0
    277e:	e2 e3       	ldi	r30, 0x32	; 50
    2780:	f0 e0       	ldi	r31, 0x00	; 0
    2782:	80 81       	ld	r24, Z
    2784:	48 2f       	mov	r20, r24
    2786:	89 81       	ldd	r24, Y+1	; 0x01
    2788:	28 2f       	mov	r18, r24
    278a:	30 e0       	ldi	r19, 0x00	; 0
    278c:	81 e0       	ldi	r24, 0x01	; 1
    278e:	90 e0       	ldi	r25, 0x00	; 0
    2790:	02 2e       	mov	r0, r18
    2792:	02 c0       	rjmp	.+4      	; 0x2798 <Port_enuSetPinMode+0x5e4>
    2794:	88 0f       	add	r24, r24
    2796:	99 1f       	adc	r25, r25
    2798:	0a 94       	dec	r0
    279a:	e2 f7       	brpl	.-8      	; 0x2794 <Port_enuSetPinMode+0x5e0>
    279c:	84 2b       	or	r24, r20
    279e:	8c 93       	st	X, r24
    27a0:	4d c0       	rjmp	.+154    	; 0x283c <Port_enuSetPinMode+0x688>
							break;
						}
						case PORT_u8OUTPUT_HIGH:
						{
							SET_BIT(DDRD,Loc_u8Pin);
    27a2:	a1 e3       	ldi	r26, 0x31	; 49
    27a4:	b0 e0       	ldi	r27, 0x00	; 0
    27a6:	e1 e3       	ldi	r30, 0x31	; 49
    27a8:	f0 e0       	ldi	r31, 0x00	; 0
    27aa:	80 81       	ld	r24, Z
    27ac:	48 2f       	mov	r20, r24
    27ae:	89 81       	ldd	r24, Y+1	; 0x01
    27b0:	28 2f       	mov	r18, r24
    27b2:	30 e0       	ldi	r19, 0x00	; 0
    27b4:	81 e0       	ldi	r24, 0x01	; 1
    27b6:	90 e0       	ldi	r25, 0x00	; 0
    27b8:	02 c0       	rjmp	.+4      	; 0x27be <Port_enuSetPinMode+0x60a>
    27ba:	88 0f       	add	r24, r24
    27bc:	99 1f       	adc	r25, r25
    27be:	2a 95       	dec	r18
    27c0:	e2 f7       	brpl	.-8      	; 0x27ba <Port_enuSetPinMode+0x606>
    27c2:	84 2b       	or	r24, r20
    27c4:	8c 93       	st	X, r24
							SET_BIT(PORTD,Loc_u8Pin);
    27c6:	a2 e3       	ldi	r26, 0x32	; 50
    27c8:	b0 e0       	ldi	r27, 0x00	; 0
    27ca:	e2 e3       	ldi	r30, 0x32	; 50
    27cc:	f0 e0       	ldi	r31, 0x00	; 0
    27ce:	80 81       	ld	r24, Z
    27d0:	48 2f       	mov	r20, r24
    27d2:	89 81       	ldd	r24, Y+1	; 0x01
    27d4:	28 2f       	mov	r18, r24
    27d6:	30 e0       	ldi	r19, 0x00	; 0
    27d8:	81 e0       	ldi	r24, 0x01	; 1
    27da:	90 e0       	ldi	r25, 0x00	; 0
    27dc:	02 2e       	mov	r0, r18
    27de:	02 c0       	rjmp	.+4      	; 0x27e4 <Port_enuSetPinMode+0x630>
    27e0:	88 0f       	add	r24, r24
    27e2:	99 1f       	adc	r25, r25
    27e4:	0a 94       	dec	r0
    27e6:	e2 f7       	brpl	.-8      	; 0x27e0 <Port_enuSetPinMode+0x62c>
    27e8:	84 2b       	or	r24, r20
    27ea:	8c 93       	st	X, r24
    27ec:	27 c0       	rjmp	.+78     	; 0x283c <Port_enuSetPinMode+0x688>
							break;
						}
						case PORT_u8OUTPUT_LOW:
						{
							CLR_BIT(DDRD,Loc_u8Pin);
    27ee:	a1 e3       	ldi	r26, 0x31	; 49
    27f0:	b0 e0       	ldi	r27, 0x00	; 0
    27f2:	e1 e3       	ldi	r30, 0x31	; 49
    27f4:	f0 e0       	ldi	r31, 0x00	; 0
    27f6:	80 81       	ld	r24, Z
    27f8:	48 2f       	mov	r20, r24
    27fa:	89 81       	ldd	r24, Y+1	; 0x01
    27fc:	28 2f       	mov	r18, r24
    27fe:	30 e0       	ldi	r19, 0x00	; 0
    2800:	81 e0       	ldi	r24, 0x01	; 1
    2802:	90 e0       	ldi	r25, 0x00	; 0
    2804:	02 c0       	rjmp	.+4      	; 0x280a <Port_enuSetPinMode+0x656>
    2806:	88 0f       	add	r24, r24
    2808:	99 1f       	adc	r25, r25
    280a:	2a 95       	dec	r18
    280c:	e2 f7       	brpl	.-8      	; 0x2806 <Port_enuSetPinMode+0x652>
    280e:	80 95       	com	r24
    2810:	84 23       	and	r24, r20
    2812:	8c 93       	st	X, r24
							CLR_BIT(PORTD,Loc_u8Pin);
    2814:	a2 e3       	ldi	r26, 0x32	; 50
    2816:	b0 e0       	ldi	r27, 0x00	; 0
    2818:	e2 e3       	ldi	r30, 0x32	; 50
    281a:	f0 e0       	ldi	r31, 0x00	; 0
    281c:	80 81       	ld	r24, Z
    281e:	48 2f       	mov	r20, r24
    2820:	89 81       	ldd	r24, Y+1	; 0x01
    2822:	28 2f       	mov	r18, r24
    2824:	30 e0       	ldi	r19, 0x00	; 0
    2826:	81 e0       	ldi	r24, 0x01	; 1
    2828:	90 e0       	ldi	r25, 0x00	; 0
    282a:	02 2e       	mov	r0, r18
    282c:	02 c0       	rjmp	.+4      	; 0x2832 <Port_enuSetPinMode+0x67e>
    282e:	88 0f       	add	r24, r24
    2830:	99 1f       	adc	r25, r25
    2832:	0a 94       	dec	r0
    2834:	e2 f7       	brpl	.-8      	; 0x282e <Port_enuSetPinMode+0x67a>
    2836:	80 95       	com	r24
    2838:	84 23       	and	r24, r20
    283a:	8c 93       	st	X, r24
					}
					break;
				}
			}
		}
		return Loc_enuReturnStatus;
    283c:	8b 81       	ldd	r24, Y+3	; 0x03
}
    283e:	2f 96       	adiw	r28, 0x0f	; 15
    2840:	0f b6       	in	r0, 0x3f	; 63
    2842:	f8 94       	cli
    2844:	de bf       	out	0x3e, r29	; 62
    2846:	0f be       	out	0x3f, r0	; 63
    2848:	cd bf       	out	0x3d, r28	; 61
    284a:	cf 91       	pop	r28
    284c:	df 91       	pop	r29
    284e:	08 95       	ret

00002850 <power>:
#include <util/delay.h>

#define MAX     8

int power(int base, int exponent)
{
    2850:	df 93       	push	r29
    2852:	cf 93       	push	r28
    2854:	00 d0       	rcall	.+0      	; 0x2856 <power+0x6>
    2856:	00 d0       	rcall	.+0      	; 0x2858 <power+0x8>
    2858:	00 d0       	rcall	.+0      	; 0x285a <power+0xa>
    285a:	cd b7       	in	r28, 0x3d	; 61
    285c:	de b7       	in	r29, 0x3e	; 62
    285e:	9c 83       	std	Y+4, r25	; 0x04
    2860:	8b 83       	std	Y+3, r24	; 0x03
    2862:	7e 83       	std	Y+6, r23	; 0x06
    2864:	6d 83       	std	Y+5, r22	; 0x05
	int result=1;
    2866:	81 e0       	ldi	r24, 0x01	; 1
    2868:	90 e0       	ldi	r25, 0x00	; 0
    286a:	9a 83       	std	Y+2, r25	; 0x02
    286c:	89 83       	std	Y+1, r24	; 0x01
    286e:	13 c0       	rjmp	.+38     	; 0x2896 <power+0x46>
	for (exponent; exponent>0; exponent--)
	{
		result = result * base;
    2870:	29 81       	ldd	r18, Y+1	; 0x01
    2872:	3a 81       	ldd	r19, Y+2	; 0x02
    2874:	8b 81       	ldd	r24, Y+3	; 0x03
    2876:	9c 81       	ldd	r25, Y+4	; 0x04
    2878:	ac 01       	movw	r20, r24
    287a:	24 9f       	mul	r18, r20
    287c:	c0 01       	movw	r24, r0
    287e:	25 9f       	mul	r18, r21
    2880:	90 0d       	add	r25, r0
    2882:	34 9f       	mul	r19, r20
    2884:	90 0d       	add	r25, r0
    2886:	11 24       	eor	r1, r1
    2888:	9a 83       	std	Y+2, r25	; 0x02
    288a:	89 83       	std	Y+1, r24	; 0x01
#define MAX     8

int power(int base, int exponent)
{
	int result=1;
	for (exponent; exponent>0; exponent--)
    288c:	8d 81       	ldd	r24, Y+5	; 0x05
    288e:	9e 81       	ldd	r25, Y+6	; 0x06
    2890:	01 97       	sbiw	r24, 0x01	; 1
    2892:	9e 83       	std	Y+6, r25	; 0x06
    2894:	8d 83       	std	Y+5, r24	; 0x05
    2896:	8d 81       	ldd	r24, Y+5	; 0x05
    2898:	9e 81       	ldd	r25, Y+6	; 0x06
    289a:	18 16       	cp	r1, r24
    289c:	19 06       	cpc	r1, r25
    289e:	44 f3       	brlt	.-48     	; 0x2870 <power+0x20>
	{
		result = result * base;
	}
	return result;
    28a0:	89 81       	ldd	r24, Y+1	; 0x01
    28a2:	9a 81       	ldd	r25, Y+2	; 0x02
}
    28a4:	26 96       	adiw	r28, 0x06	; 6
    28a6:	0f b6       	in	r0, 0x3f	; 63
    28a8:	f8 94       	cli
    28aa:	de bf       	out	0x3e, r29	; 62
    28ac:	0f be       	out	0x3f, r0	; 63
    28ae:	cd bf       	out	0x3d, r28	; 61
    28b0:	cf 91       	pop	r28
    28b2:	df 91       	pop	r29
    28b4:	08 95       	ret

000028b6 <reverse>:

void reverse(char* str, int len)
{
    28b6:	df 93       	push	r29
    28b8:	cf 93       	push	r28
    28ba:	cd b7       	in	r28, 0x3d	; 61
    28bc:	de b7       	in	r29, 0x3e	; 62
    28be:	2a 97       	sbiw	r28, 0x0a	; 10
    28c0:	0f b6       	in	r0, 0x3f	; 63
    28c2:	f8 94       	cli
    28c4:	de bf       	out	0x3e, r29	; 62
    28c6:	0f be       	out	0x3f, r0	; 63
    28c8:	cd bf       	out	0x3d, r28	; 61
    28ca:	98 87       	std	Y+8, r25	; 0x08
    28cc:	8f 83       	std	Y+7, r24	; 0x07
    28ce:	7a 87       	std	Y+10, r23	; 0x0a
    28d0:	69 87       	std	Y+9, r22	; 0x09
    int i = 0, j = len - 1, temp;
    28d2:	1e 82       	std	Y+6, r1	; 0x06
    28d4:	1d 82       	std	Y+5, r1	; 0x05
    28d6:	89 85       	ldd	r24, Y+9	; 0x09
    28d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    28da:	01 97       	sbiw	r24, 0x01	; 1
    28dc:	9c 83       	std	Y+4, r25	; 0x04
    28de:	8b 83       	std	Y+3, r24	; 0x03
    28e0:	2f c0       	rjmp	.+94     	; 0x2940 <reverse+0x8a>
    while (i < j) {
        temp = str[i];
    28e2:	2d 81       	ldd	r18, Y+5	; 0x05
    28e4:	3e 81       	ldd	r19, Y+6	; 0x06
    28e6:	8f 81       	ldd	r24, Y+7	; 0x07
    28e8:	98 85       	ldd	r25, Y+8	; 0x08
    28ea:	fc 01       	movw	r30, r24
    28ec:	e2 0f       	add	r30, r18
    28ee:	f3 1f       	adc	r31, r19
    28f0:	80 81       	ld	r24, Z
    28f2:	88 2f       	mov	r24, r24
    28f4:	90 e0       	ldi	r25, 0x00	; 0
    28f6:	9a 83       	std	Y+2, r25	; 0x02
    28f8:	89 83       	std	Y+1, r24	; 0x01
        str[i] = str[j];
    28fa:	2d 81       	ldd	r18, Y+5	; 0x05
    28fc:	3e 81       	ldd	r19, Y+6	; 0x06
    28fe:	8f 81       	ldd	r24, Y+7	; 0x07
    2900:	98 85       	ldd	r25, Y+8	; 0x08
    2902:	dc 01       	movw	r26, r24
    2904:	a2 0f       	add	r26, r18
    2906:	b3 1f       	adc	r27, r19
    2908:	2b 81       	ldd	r18, Y+3	; 0x03
    290a:	3c 81       	ldd	r19, Y+4	; 0x04
    290c:	8f 81       	ldd	r24, Y+7	; 0x07
    290e:	98 85       	ldd	r25, Y+8	; 0x08
    2910:	fc 01       	movw	r30, r24
    2912:	e2 0f       	add	r30, r18
    2914:	f3 1f       	adc	r31, r19
    2916:	80 81       	ld	r24, Z
    2918:	8c 93       	st	X, r24
        str[j] = temp;
    291a:	2b 81       	ldd	r18, Y+3	; 0x03
    291c:	3c 81       	ldd	r19, Y+4	; 0x04
    291e:	8f 81       	ldd	r24, Y+7	; 0x07
    2920:	98 85       	ldd	r25, Y+8	; 0x08
    2922:	fc 01       	movw	r30, r24
    2924:	e2 0f       	add	r30, r18
    2926:	f3 1f       	adc	r31, r19
    2928:	89 81       	ldd	r24, Y+1	; 0x01
    292a:	80 83       	st	Z, r24
        i++;
    292c:	8d 81       	ldd	r24, Y+5	; 0x05
    292e:	9e 81       	ldd	r25, Y+6	; 0x06
    2930:	01 96       	adiw	r24, 0x01	; 1
    2932:	9e 83       	std	Y+6, r25	; 0x06
    2934:	8d 83       	std	Y+5, r24	; 0x05
        j--;
    2936:	8b 81       	ldd	r24, Y+3	; 0x03
    2938:	9c 81       	ldd	r25, Y+4	; 0x04
    293a:	01 97       	sbiw	r24, 0x01	; 1
    293c:	9c 83       	std	Y+4, r25	; 0x04
    293e:	8b 83       	std	Y+3, r24	; 0x03
}

void reverse(char* str, int len)
{
    int i = 0, j = len - 1, temp;
    while (i < j) {
    2940:	2d 81       	ldd	r18, Y+5	; 0x05
    2942:	3e 81       	ldd	r19, Y+6	; 0x06
    2944:	8b 81       	ldd	r24, Y+3	; 0x03
    2946:	9c 81       	ldd	r25, Y+4	; 0x04
    2948:	28 17       	cp	r18, r24
    294a:	39 07       	cpc	r19, r25
    294c:	54 f2       	brlt	.-108    	; 0x28e2 <reverse+0x2c>
        str[i] = str[j];
        str[j] = temp;
        i++;
        j--;
    }
}
    294e:	2a 96       	adiw	r28, 0x0a	; 10
    2950:	0f b6       	in	r0, 0x3f	; 63
    2952:	f8 94       	cli
    2954:	de bf       	out	0x3e, r29	; 62
    2956:	0f be       	out	0x3f, r0	; 63
    2958:	cd bf       	out	0x3d, r28	; 61
    295a:	cf 91       	pop	r28
    295c:	df 91       	pop	r29
    295e:	08 95       	ret

00002960 <intToStr>:

int intToStr(int x, char str[], int d)
{
    2960:	df 93       	push	r29
    2962:	cf 93       	push	r28
    2964:	cd b7       	in	r28, 0x3d	; 61
    2966:	de b7       	in	r29, 0x3e	; 62
    2968:	28 97       	sbiw	r28, 0x08	; 8
    296a:	0f b6       	in	r0, 0x3f	; 63
    296c:	f8 94       	cli
    296e:	de bf       	out	0x3e, r29	; 62
    2970:	0f be       	out	0x3f, r0	; 63
    2972:	cd bf       	out	0x3d, r28	; 61
    2974:	9c 83       	std	Y+4, r25	; 0x04
    2976:	8b 83       	std	Y+3, r24	; 0x03
    2978:	7e 83       	std	Y+6, r23	; 0x06
    297a:	6d 83       	std	Y+5, r22	; 0x05
    297c:	58 87       	std	Y+8, r21	; 0x08
    297e:	4f 83       	std	Y+7, r20	; 0x07
    int i = 0;
    2980:	1a 82       	std	Y+2, r1	; 0x02
    2982:	19 82       	std	Y+1, r1	; 0x01
    2984:	1f c0       	rjmp	.+62     	; 0x29c4 <intToStr+0x64>
    while (x) {
        str[i++] = (x % 10) + '0';
    2986:	29 81       	ldd	r18, Y+1	; 0x01
    2988:	3a 81       	ldd	r19, Y+2	; 0x02
    298a:	8d 81       	ldd	r24, Y+5	; 0x05
    298c:	9e 81       	ldd	r25, Y+6	; 0x06
    298e:	fc 01       	movw	r30, r24
    2990:	e2 0f       	add	r30, r18
    2992:	f3 1f       	adc	r31, r19
    2994:	8b 81       	ldd	r24, Y+3	; 0x03
    2996:	9c 81       	ldd	r25, Y+4	; 0x04
    2998:	2a e0       	ldi	r18, 0x0A	; 10
    299a:	30 e0       	ldi	r19, 0x00	; 0
    299c:	b9 01       	movw	r22, r18
    299e:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <__divmodhi4>
    29a2:	80 5d       	subi	r24, 0xD0	; 208
    29a4:	80 83       	st	Z, r24
    29a6:	89 81       	ldd	r24, Y+1	; 0x01
    29a8:	9a 81       	ldd	r25, Y+2	; 0x02
    29aa:	01 96       	adiw	r24, 0x01	; 1
    29ac:	9a 83       	std	Y+2, r25	; 0x02
    29ae:	89 83       	std	Y+1, r24	; 0x01
        x = x / 10;
    29b0:	8b 81       	ldd	r24, Y+3	; 0x03
    29b2:	9c 81       	ldd	r25, Y+4	; 0x04
    29b4:	2a e0       	ldi	r18, 0x0A	; 10
    29b6:	30 e0       	ldi	r19, 0x00	; 0
    29b8:	b9 01       	movw	r22, r18
    29ba:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <__divmodhi4>
    29be:	cb 01       	movw	r24, r22
    29c0:	9c 83       	std	Y+4, r25	; 0x04
    29c2:	8b 83       	std	Y+3, r24	; 0x03
}

int intToStr(int x, char str[], int d)
{
    int i = 0;
    while (x) {
    29c4:	8b 81       	ldd	r24, Y+3	; 0x03
    29c6:	9c 81       	ldd	r25, Y+4	; 0x04
    29c8:	00 97       	sbiw	r24, 0x00	; 0
    29ca:	e9 f6       	brne	.-70     	; 0x2986 <intToStr+0x26>
    29cc:	0e c0       	rjmp	.+28     	; 0x29ea <intToStr+0x8a>
    }

    // If number of digits required is more, then
    // add 0s at the beginning
    while (i < d)
        str[i++] = '0';
    29ce:	29 81       	ldd	r18, Y+1	; 0x01
    29d0:	3a 81       	ldd	r19, Y+2	; 0x02
    29d2:	8d 81       	ldd	r24, Y+5	; 0x05
    29d4:	9e 81       	ldd	r25, Y+6	; 0x06
    29d6:	fc 01       	movw	r30, r24
    29d8:	e2 0f       	add	r30, r18
    29da:	f3 1f       	adc	r31, r19
    29dc:	80 e3       	ldi	r24, 0x30	; 48
    29de:	80 83       	st	Z, r24
    29e0:	89 81       	ldd	r24, Y+1	; 0x01
    29e2:	9a 81       	ldd	r25, Y+2	; 0x02
    29e4:	01 96       	adiw	r24, 0x01	; 1
    29e6:	9a 83       	std	Y+2, r25	; 0x02
    29e8:	89 83       	std	Y+1, r24	; 0x01
        x = x / 10;
    }

    // If number of digits required is more, then
    // add 0s at the beginning
    while (i < d)
    29ea:	29 81       	ldd	r18, Y+1	; 0x01
    29ec:	3a 81       	ldd	r19, Y+2	; 0x02
    29ee:	8f 81       	ldd	r24, Y+7	; 0x07
    29f0:	98 85       	ldd	r25, Y+8	; 0x08
    29f2:	28 17       	cp	r18, r24
    29f4:	39 07       	cpc	r19, r25
    29f6:	5c f3       	brlt	.-42     	; 0x29ce <intToStr+0x6e>
        str[i++] = '0';

    reverse(str, i);
    29f8:	8d 81       	ldd	r24, Y+5	; 0x05
    29fa:	9e 81       	ldd	r25, Y+6	; 0x06
    29fc:	29 81       	ldd	r18, Y+1	; 0x01
    29fe:	3a 81       	ldd	r19, Y+2	; 0x02
    2a00:	b9 01       	movw	r22, r18
    2a02:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <reverse>
    str[i] = '\0';
    2a06:	29 81       	ldd	r18, Y+1	; 0x01
    2a08:	3a 81       	ldd	r19, Y+2	; 0x02
    2a0a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a0c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a0e:	fc 01       	movw	r30, r24
    2a10:	e2 0f       	add	r30, r18
    2a12:	f3 1f       	adc	r31, r19
    2a14:	10 82       	st	Z, r1
    return i;
    2a16:	89 81       	ldd	r24, Y+1	; 0x01
    2a18:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2a1a:	28 96       	adiw	r28, 0x08	; 8
    2a1c:	0f b6       	in	r0, 0x3f	; 63
    2a1e:	f8 94       	cli
    2a20:	de bf       	out	0x3e, r29	; 62
    2a22:	0f be       	out	0x3f, r0	; 63
    2a24:	cd bf       	out	0x3d, r28	; 61
    2a26:	cf 91       	pop	r28
    2a28:	df 91       	pop	r29
    2a2a:	08 95       	ret

00002a2c <ftoa>:

void ftoa(float n, char* res, int afterpoint)
{
    2a2c:	df 93       	push	r29
    2a2e:	cf 93       	push	r28
    2a30:	cd b7       	in	r28, 0x3d	; 61
    2a32:	de b7       	in	r29, 0x3e	; 62
    2a34:	60 97       	sbiw	r28, 0x10	; 16
    2a36:	0f b6       	in	r0, 0x3f	; 63
    2a38:	f8 94       	cli
    2a3a:	de bf       	out	0x3e, r29	; 62
    2a3c:	0f be       	out	0x3f, r0	; 63
    2a3e:	cd bf       	out	0x3d, r28	; 61
    2a40:	69 87       	std	Y+9, r22	; 0x09
    2a42:	7a 87       	std	Y+10, r23	; 0x0a
    2a44:	8b 87       	std	Y+11, r24	; 0x0b
    2a46:	9c 87       	std	Y+12, r25	; 0x0c
    2a48:	5e 87       	std	Y+14, r21	; 0x0e
    2a4a:	4d 87       	std	Y+13, r20	; 0x0d
    2a4c:	38 8b       	std	Y+16, r19	; 0x10
    2a4e:	2f 87       	std	Y+15, r18	; 0x0f
    // Extract integer part
    int ipart = (int)n;
    2a50:	69 85       	ldd	r22, Y+9	; 0x09
    2a52:	7a 85       	ldd	r23, Y+10	; 0x0a
    2a54:	8b 85       	ldd	r24, Y+11	; 0x0b
    2a56:	9c 85       	ldd	r25, Y+12	; 0x0c
    2a58:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    2a5c:	dc 01       	movw	r26, r24
    2a5e:	cb 01       	movw	r24, r22
    2a60:	98 87       	std	Y+8, r25	; 0x08
    2a62:	8f 83       	std	Y+7, r24	; 0x07

    // Extract floating part
    float fpart = n - (float)ipart;
    2a64:	8f 81       	ldd	r24, Y+7	; 0x07
    2a66:	98 85       	ldd	r25, Y+8	; 0x08
    2a68:	aa 27       	eor	r26, r26
    2a6a:	97 fd       	sbrc	r25, 7
    2a6c:	a0 95       	com	r26
    2a6e:	ba 2f       	mov	r27, r26
    2a70:	bc 01       	movw	r22, r24
    2a72:	cd 01       	movw	r24, r26
    2a74:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    2a78:	9b 01       	movw	r18, r22
    2a7a:	ac 01       	movw	r20, r24
    2a7c:	69 85       	ldd	r22, Y+9	; 0x09
    2a7e:	7a 85       	ldd	r23, Y+10	; 0x0a
    2a80:	8b 85       	ldd	r24, Y+11	; 0x0b
    2a82:	9c 85       	ldd	r25, Y+12	; 0x0c
    2a84:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    2a88:	dc 01       	movw	r26, r24
    2a8a:	cb 01       	movw	r24, r22
    2a8c:	8b 83       	std	Y+3, r24	; 0x03
    2a8e:	9c 83       	std	Y+4, r25	; 0x04
    2a90:	ad 83       	std	Y+5, r26	; 0x05
    2a92:	be 83       	std	Y+6, r27	; 0x06

    // convert integer part to string
    int i = intToStr(ipart, res, 0);
    2a94:	8f 81       	ldd	r24, Y+7	; 0x07
    2a96:	98 85       	ldd	r25, Y+8	; 0x08
    2a98:	2d 85       	ldd	r18, Y+13	; 0x0d
    2a9a:	3e 85       	ldd	r19, Y+14	; 0x0e
    2a9c:	b9 01       	movw	r22, r18
    2a9e:	40 e0       	ldi	r20, 0x00	; 0
    2aa0:	50 e0       	ldi	r21, 0x00	; 0
    2aa2:	0e 94 b0 14 	call	0x2960	; 0x2960 <intToStr>
    2aa6:	9a 83       	std	Y+2, r25	; 0x02
    2aa8:	89 83       	std	Y+1, r24	; 0x01

    // check for display option after point
    if (afterpoint != 0) {
    2aaa:	8f 85       	ldd	r24, Y+15	; 0x0f
    2aac:	98 89       	ldd	r25, Y+16	; 0x10
    2aae:	00 97       	sbiw	r24, 0x00	; 0
    2ab0:	f1 f1       	breq	.+124    	; 0x2b2e <ftoa+0x102>
        res[i] = '.'; // add dot
    2ab2:	29 81       	ldd	r18, Y+1	; 0x01
    2ab4:	3a 81       	ldd	r19, Y+2	; 0x02
    2ab6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ab8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2aba:	fc 01       	movw	r30, r24
    2abc:	e2 0f       	add	r30, r18
    2abe:	f3 1f       	adc	r31, r19
    2ac0:	8e e2       	ldi	r24, 0x2E	; 46
    2ac2:	80 83       	st	Z, r24

        // Get the value of fraction part upto given no.
        // of points after dot. The third parameter
        // is needed to handle cases like 233.007
        fpart = fpart * power(10, afterpoint);
    2ac4:	2f 85       	ldd	r18, Y+15	; 0x0f
    2ac6:	38 89       	ldd	r19, Y+16	; 0x10
    2ac8:	8a e0       	ldi	r24, 0x0A	; 10
    2aca:	90 e0       	ldi	r25, 0x00	; 0
    2acc:	b9 01       	movw	r22, r18
    2ace:	0e 94 28 14 	call	0x2850	; 0x2850 <power>
    2ad2:	aa 27       	eor	r26, r26
    2ad4:	97 fd       	sbrc	r25, 7
    2ad6:	a0 95       	com	r26
    2ad8:	ba 2f       	mov	r27, r26
    2ada:	bc 01       	movw	r22, r24
    2adc:	cd 01       	movw	r24, r26
    2ade:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    2ae2:	9b 01       	movw	r18, r22
    2ae4:	ac 01       	movw	r20, r24
    2ae6:	6b 81       	ldd	r22, Y+3	; 0x03
    2ae8:	7c 81       	ldd	r23, Y+4	; 0x04
    2aea:	8d 81       	ldd	r24, Y+5	; 0x05
    2aec:	9e 81       	ldd	r25, Y+6	; 0x06
    2aee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2af2:	dc 01       	movw	r26, r24
    2af4:	cb 01       	movw	r24, r22
    2af6:	8b 83       	std	Y+3, r24	; 0x03
    2af8:	9c 83       	std	Y+4, r25	; 0x04
    2afa:	ad 83       	std	Y+5, r26	; 0x05
    2afc:	be 83       	std	Y+6, r27	; 0x06

        intToStr((int)fpart, res + i + 1, afterpoint);
    2afe:	6b 81       	ldd	r22, Y+3	; 0x03
    2b00:	7c 81       	ldd	r23, Y+4	; 0x04
    2b02:	8d 81       	ldd	r24, Y+5	; 0x05
    2b04:	9e 81       	ldd	r25, Y+6	; 0x06
    2b06:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    2b0a:	dc 01       	movw	r26, r24
    2b0c:	cb 01       	movw	r24, r22
    2b0e:	bc 01       	movw	r22, r24
    2b10:	89 81       	ldd	r24, Y+1	; 0x01
    2b12:	9a 81       	ldd	r25, Y+2	; 0x02
    2b14:	9c 01       	movw	r18, r24
    2b16:	2f 5f       	subi	r18, 0xFF	; 255
    2b18:	3f 4f       	sbci	r19, 0xFF	; 255
    2b1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b1e:	28 0f       	add	r18, r24
    2b20:	39 1f       	adc	r19, r25
    2b22:	4f 85       	ldd	r20, Y+15	; 0x0f
    2b24:	58 89       	ldd	r21, Y+16	; 0x10
    2b26:	cb 01       	movw	r24, r22
    2b28:	b9 01       	movw	r22, r18
    2b2a:	0e 94 b0 14 	call	0x2960	; 0x2960 <intToStr>
    }
}
    2b2e:	60 96       	adiw	r28, 0x10	; 16
    2b30:	0f b6       	in	r0, 0x3f	; 63
    2b32:	f8 94       	cli
    2b34:	de bf       	out	0x3e, r29	; 62
    2b36:	0f be       	out	0x3f, r0	; 63
    2b38:	cd bf       	out	0x3d, r28	; 61
    2b3a:	cf 91       	pop	r28
    2b3c:	df 91       	pop	r29
    2b3e:	08 95       	ret

00002b40 <main>:




int main(void)
{
    2b40:	df 93       	push	r29
    2b42:	cf 93       	push	r28
    2b44:	cd b7       	in	r28, 0x3d	; 61
    2b46:	de b7       	in	r29, 0x3e	; 62
    2b48:	af 97       	sbiw	r28, 0x2f	; 47
    2b4a:	0f b6       	in	r0, 0x3f	; 63
    2b4c:	f8 94       	cli
    2b4e:	de bf       	out	0x3e, r29	; 62
    2b50:	0f be       	out	0x3f, r0	; 63
    2b52:	cd bf       	out	0x3d, r28	; 61
	u16 Loc_u16Reading = 0 ;
    2b54:	1e a2       	std	Y+38, r1	; 0x26
    2b56:	1d a2       	std	Y+37, r1	; 0x25
	u16 temp;
	f128 fReading;
	u8 buf[MAX];
	u8 flag=0;
    2b58:	1e 8e       	std	Y+30, r1	; 0x1e
	u8 lastFlag=1;
    2b5a:	81 e0       	ldi	r24, 0x01	; 1
    2b5c:	8d 8f       	std	Y+29, r24	; 0x1d
	u8 readSwitch = 1 ;
    2b5e:	81 e0       	ldi	r24, 0x01	; 1
    2b60:	8f a7       	std	Y+47, r24	; 0x2f

	Port_enuSetPinDirection( LCD_u8DATA_PIN_0 , PORT_u8PIN_OUTPUT );
    2b62:	88 e1       	ldi	r24, 0x18	; 24
    2b64:	61 e0       	ldi	r22, 0x01	; 1
    2b66:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <Port_enuSetPinDirection>
	Port_enuSetPinDirection( LCD_u8DATA_PIN_1 , PORT_u8PIN_OUTPUT );
    2b6a:	89 e1       	ldi	r24, 0x19	; 25
    2b6c:	61 e0       	ldi	r22, 0x01	; 1
    2b6e:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <Port_enuSetPinDirection>
	Port_enuSetPinDirection( LCD_u8DATA_PIN_2 , PORT_u8PIN_OUTPUT );
    2b72:	8a e1       	ldi	r24, 0x1A	; 26
    2b74:	61 e0       	ldi	r22, 0x01	; 1
    2b76:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <Port_enuSetPinDirection>
	Port_enuSetPinDirection( LCD_u8DATA_PIN_3 , PORT_u8PIN_OUTPUT );
    2b7a:	8b e1       	ldi	r24, 0x1B	; 27
    2b7c:	61 e0       	ldi	r22, 0x01	; 1
    2b7e:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <Port_enuSetPinDirection>
	Port_enuSetPinDirection( LCD_u8DATA_PIN_4 , PORT_u8PIN_OUTPUT );
    2b82:	8c e1       	ldi	r24, 0x1C	; 28
    2b84:	61 e0       	ldi	r22, 0x01	; 1
    2b86:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <Port_enuSetPinDirection>
	Port_enuSetPinDirection( LCD_u8DATA_PIN_5 , PORT_u8PIN_OUTPUT );
    2b8a:	8d e1       	ldi	r24, 0x1D	; 29
    2b8c:	61 e0       	ldi	r22, 0x01	; 1
    2b8e:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <Port_enuSetPinDirection>
	Port_enuSetPinDirection( LCD_u8DATA_PIN_6 , PORT_u8PIN_OUTPUT );
    2b92:	8e e1       	ldi	r24, 0x1E	; 30
    2b94:	61 e0       	ldi	r22, 0x01	; 1
    2b96:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <Port_enuSetPinDirection>
	Port_enuSetPinDirection( LCD_u8DATA_PIN_7 , PORT_u8PIN_OUTPUT );
    2b9a:	8f e1       	ldi	r24, 0x1F	; 31
    2b9c:	61 e0       	ldi	r22, 0x01	; 1
    2b9e:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <Port_enuSetPinDirection>
	Port_enuSetPinDirection( LCD_u8RW , PORT_u8PIN_OUTPUT );
    2ba2:	88 e0       	ldi	r24, 0x08	; 8
    2ba4:	61 e0       	ldi	r22, 0x01	; 1
    2ba6:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <Port_enuSetPinDirection>
	Port_enuSetPinDirection( LCD_u8RS , PORT_u8PIN_OUTPUT );
    2baa:	89 e0       	ldi	r24, 0x09	; 9
    2bac:	61 e0       	ldi	r22, 0x01	; 1
    2bae:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <Port_enuSetPinDirection>
	Port_enuSetPinDirection( LCD_u8ENABLE , PORT_u8PIN_OUTPUT );
    2bb2:	8a e0       	ldi	r24, 0x0A	; 10
    2bb4:	61 e0       	ldi	r22, 0x01	; 1
    2bb6:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <Port_enuSetPinDirection>

	Port_enuSetPinDirection(PORT_u8PIN_0,PORT_u8PIN_INPUT);
    2bba:	80 e0       	ldi	r24, 0x00	; 0
    2bbc:	60 e0       	ldi	r22, 0x00	; 0
    2bbe:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <Port_enuSetPinDirection>

	Port_enuSetPinMode( PORT_u8PIN_1 , PORT_u8INPUT_PULLUP );
    2bc2:	81 e0       	ldi	r24, 0x01	; 1
    2bc4:	61 e0       	ldi	r22, 0x01	; 1
    2bc6:	0e 94 da 10 	call	0x21b4	; 0x21b4 <Port_enuSetPinMode>

	Adc_vidInit();
    2bca:	0e 94 75 07 	call	0xeea	; 0xeea <Adc_vidInit>
	Lcd_vidInit();
    2bce:	0e 94 90 0a 	call	0x1520	; 0x1520 <Lcd_vidInit>


	Lcd_vidSendCommand(LCD_u8CLEAR_DISPLAY);
    2bd2:	81 e0       	ldi	r24, 0x01	; 1
    2bd4:	0e 94 77 0c 	call	0x18ee	; 0x18ee <Lcd_vidSendCommand>
	Lcd_vidDisplayString("Voltage=");
    2bd8:	84 e6       	ldi	r24, 0x64	; 100
    2bda:	90 e0       	ldi	r25, 0x00	; 0
    2bdc:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <Lcd_vidDisplayString>

	while(1)
	{

		DIO_enuReadChannel( DIO_u8PIN_1 , &readSwitch );
    2be0:	9e 01       	movw	r18, r28
    2be2:	21 5d       	subi	r18, 0xD1	; 209
    2be4:	3f 4f       	sbci	r19, 0xFF	; 255
    2be6:	81 e0       	ldi	r24, 0x01	; 1
    2be8:	b9 01       	movw	r22, r18
    2bea:	0e 94 cb 08 	call	0x1196	; 0x1196 <DIO_enuReadChannel>
    2bee:	80 e0       	ldi	r24, 0x00	; 0
    2bf0:	90 e0       	ldi	r25, 0x00	; 0
    2bf2:	a0 e2       	ldi	r26, 0x20	; 32
    2bf4:	b1 e4       	ldi	r27, 0x41	; 65
    2bf6:	89 8f       	std	Y+25, r24	; 0x19
    2bf8:	9a 8f       	std	Y+26, r25	; 0x1a
    2bfa:	ab 8f       	std	Y+27, r26	; 0x1b
    2bfc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bfe:	69 8d       	ldd	r22, Y+25	; 0x19
    2c00:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c02:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c04:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c06:	20 e0       	ldi	r18, 0x00	; 0
    2c08:	30 e0       	ldi	r19, 0x00	; 0
    2c0a:	4a e7       	ldi	r20, 0x7A	; 122
    2c0c:	55 e4       	ldi	r21, 0x45	; 69
    2c0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c12:	dc 01       	movw	r26, r24
    2c14:	cb 01       	movw	r24, r22
    2c16:	8d 8b       	std	Y+21, r24	; 0x15
    2c18:	9e 8b       	std	Y+22, r25	; 0x16
    2c1a:	af 8b       	std	Y+23, r26	; 0x17
    2c1c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2c1e:	6d 89       	ldd	r22, Y+21	; 0x15
    2c20:	7e 89       	ldd	r23, Y+22	; 0x16
    2c22:	8f 89       	ldd	r24, Y+23	; 0x17
    2c24:	98 8d       	ldd	r25, Y+24	; 0x18
    2c26:	20 e0       	ldi	r18, 0x00	; 0
    2c28:	30 e0       	ldi	r19, 0x00	; 0
    2c2a:	40 e8       	ldi	r20, 0x80	; 128
    2c2c:	5f e3       	ldi	r21, 0x3F	; 63
    2c2e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c32:	88 23       	and	r24, r24
    2c34:	2c f4       	brge	.+10     	; 0x2c40 <main+0x100>
		__ticks = 1;
    2c36:	81 e0       	ldi	r24, 0x01	; 1
    2c38:	90 e0       	ldi	r25, 0x00	; 0
    2c3a:	9c 8b       	std	Y+20, r25	; 0x14
    2c3c:	8b 8b       	std	Y+19, r24	; 0x13
    2c3e:	3f c0       	rjmp	.+126    	; 0x2cbe <main+0x17e>
	else if (__tmp > 65535)
    2c40:	6d 89       	ldd	r22, Y+21	; 0x15
    2c42:	7e 89       	ldd	r23, Y+22	; 0x16
    2c44:	8f 89       	ldd	r24, Y+23	; 0x17
    2c46:	98 8d       	ldd	r25, Y+24	; 0x18
    2c48:	20 e0       	ldi	r18, 0x00	; 0
    2c4a:	3f ef       	ldi	r19, 0xFF	; 255
    2c4c:	4f e7       	ldi	r20, 0x7F	; 127
    2c4e:	57 e4       	ldi	r21, 0x47	; 71
    2c50:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c54:	18 16       	cp	r1, r24
    2c56:	4c f5       	brge	.+82     	; 0x2caa <main+0x16a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c58:	69 8d       	ldd	r22, Y+25	; 0x19
    2c5a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c5c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c5e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c60:	20 e0       	ldi	r18, 0x00	; 0
    2c62:	30 e0       	ldi	r19, 0x00	; 0
    2c64:	40 e2       	ldi	r20, 0x20	; 32
    2c66:	51 e4       	ldi	r21, 0x41	; 65
    2c68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c6c:	dc 01       	movw	r26, r24
    2c6e:	cb 01       	movw	r24, r22
    2c70:	bc 01       	movw	r22, r24
    2c72:	cd 01       	movw	r24, r26
    2c74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c78:	dc 01       	movw	r26, r24
    2c7a:	cb 01       	movw	r24, r22
    2c7c:	9c 8b       	std	Y+20, r25	; 0x14
    2c7e:	8b 8b       	std	Y+19, r24	; 0x13
    2c80:	0f c0       	rjmp	.+30     	; 0x2ca0 <main+0x160>
    2c82:	80 e9       	ldi	r24, 0x90	; 144
    2c84:	91 e0       	ldi	r25, 0x01	; 1
    2c86:	9a 8b       	std	Y+18, r25	; 0x12
    2c88:	89 8b       	std	Y+17, r24	; 0x11
    2c8a:	89 89       	ldd	r24, Y+17	; 0x11
    2c8c:	9a 89       	ldd	r25, Y+18	; 0x12
    2c8e:	01 97       	sbiw	r24, 0x01	; 1
    2c90:	f1 f7       	brne	.-4      	; 0x2c8e <main+0x14e>
    2c92:	9a 8b       	std	Y+18, r25	; 0x12
    2c94:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c96:	8b 89       	ldd	r24, Y+19	; 0x13
    2c98:	9c 89       	ldd	r25, Y+20	; 0x14
    2c9a:	01 97       	sbiw	r24, 0x01	; 1
    2c9c:	9c 8b       	std	Y+20, r25	; 0x14
    2c9e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ca0:	8b 89       	ldd	r24, Y+19	; 0x13
    2ca2:	9c 89       	ldd	r25, Y+20	; 0x14
    2ca4:	00 97       	sbiw	r24, 0x00	; 0
    2ca6:	69 f7       	brne	.-38     	; 0x2c82 <main+0x142>
    2ca8:	14 c0       	rjmp	.+40     	; 0x2cd2 <main+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2caa:	6d 89       	ldd	r22, Y+21	; 0x15
    2cac:	7e 89       	ldd	r23, Y+22	; 0x16
    2cae:	8f 89       	ldd	r24, Y+23	; 0x17
    2cb0:	98 8d       	ldd	r25, Y+24	; 0x18
    2cb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cb6:	dc 01       	movw	r26, r24
    2cb8:	cb 01       	movw	r24, r22
    2cba:	9c 8b       	std	Y+20, r25	; 0x14
    2cbc:	8b 8b       	std	Y+19, r24	; 0x13
    2cbe:	8b 89       	ldd	r24, Y+19	; 0x13
    2cc0:	9c 89       	ldd	r25, Y+20	; 0x14
    2cc2:	98 8b       	std	Y+16, r25	; 0x10
    2cc4:	8f 87       	std	Y+15, r24	; 0x0f
    2cc6:	8f 85       	ldd	r24, Y+15	; 0x0f
    2cc8:	98 89       	ldd	r25, Y+16	; 0x10
    2cca:	01 97       	sbiw	r24, 0x01	; 1
    2ccc:	f1 f7       	brne	.-4      	; 0x2cca <main+0x18a>
    2cce:	98 8b       	std	Y+16, r25	; 0x10
    2cd0:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(10);

		if(readSwitch == 0)
    2cd2:	8f a5       	ldd	r24, Y+47	; 0x2f
    2cd4:	88 23       	and	r24, r24
    2cd6:	39 f4       	brne	.+14     	; 0x2ce6 <main+0x1a6>
		{
			if(flag == 1)
    2cd8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2cda:	81 30       	cpi	r24, 0x01	; 1
    2cdc:	11 f4       	brne	.+4      	; 0x2ce2 <main+0x1a2>
				flag=0;
    2cde:	1e 8e       	std	Y+30, r1	; 0x1e
    2ce0:	02 c0       	rjmp	.+4      	; 0x2ce6 <main+0x1a6>
			else
				flag=1;
    2ce2:	81 e0       	ldi	r24, 0x01	; 1
    2ce4:	8e 8f       	std	Y+30, r24	; 0x1e
		}

		Adc_enuGetReading( &Loc_u16Reading );
    2ce6:	ce 01       	movw	r24, r28
    2ce8:	85 96       	adiw	r24, 0x25	; 37
    2cea:	0e 94 8a 07 	call	0xf14	; 0xf14 <Adc_enuGetReading>
		Loc_u16Reading *= (5000 / 1024);
    2cee:	8d a1       	ldd	r24, Y+37	; 0x25
    2cf0:	9e a1       	ldd	r25, Y+38	; 0x26
    2cf2:	88 0f       	add	r24, r24
    2cf4:	99 1f       	adc	r25, r25
    2cf6:	88 0f       	add	r24, r24
    2cf8:	99 1f       	adc	r25, r25
    2cfa:	9e a3       	std	Y+38, r25	; 0x26
    2cfc:	8d a3       	std	Y+37, r24	; 0x25
		fReading = ( f128 )  Loc_u16Reading / 1000.0 ;
    2cfe:	8d a1       	ldd	r24, Y+37	; 0x25
    2d00:	9e a1       	ldd	r25, Y+38	; 0x26
    2d02:	cc 01       	movw	r24, r24
    2d04:	a0 e0       	ldi	r26, 0x00	; 0
    2d06:	b0 e0       	ldi	r27, 0x00	; 0
    2d08:	bc 01       	movw	r22, r24
    2d0a:	cd 01       	movw	r24, r26
    2d0c:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    2d10:	dc 01       	movw	r26, r24
    2d12:	cb 01       	movw	r24, r22
    2d14:	bc 01       	movw	r22, r24
    2d16:	cd 01       	movw	r24, r26
    2d18:	20 e0       	ldi	r18, 0x00	; 0
    2d1a:	30 e0       	ldi	r19, 0x00	; 0
    2d1c:	4a e7       	ldi	r20, 0x7A	; 122
    2d1e:	54 e4       	ldi	r21, 0x44	; 68
    2d20:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2d24:	dc 01       	movw	r26, r24
    2d26:	cb 01       	movw	r24, r22
    2d28:	8f 8f       	std	Y+31, r24	; 0x1f
    2d2a:	98 a3       	std	Y+32, r25	; 0x20
    2d2c:	a9 a3       	std	Y+33, r26	; 0x21
    2d2e:	ba a3       	std	Y+34, r27	; 0x22
		ftoa(fReading, buf, 4);
    2d30:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2d32:	98 a1       	ldd	r25, Y+32	; 0x20
    2d34:	a9 a1       	ldd	r26, Y+33	; 0x21
    2d36:	ba a1       	ldd	r27, Y+34	; 0x22
    2d38:	9e 01       	movw	r18, r28
    2d3a:	29 5d       	subi	r18, 0xD9	; 217
    2d3c:	3f 4f       	sbci	r19, 0xFF	; 255
    2d3e:	bc 01       	movw	r22, r24
    2d40:	cd 01       	movw	r24, r26
    2d42:	a9 01       	movw	r20, r18
    2d44:	24 e0       	ldi	r18, 0x04	; 4
    2d46:	30 e0       	ldi	r19, 0x00	; 0
    2d48:	0e 94 16 15 	call	0x2a2c	; 0x2a2c <ftoa>

		if(flag == 0 && lastFlag == 1)
    2d4c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2d4e:	88 23       	and	r24, r24
    2d50:	a1 f4       	brne	.+40     	; 0x2d7a <main+0x23a>
    2d52:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d54:	81 30       	cpi	r24, 0x01	; 1
    2d56:	89 f4       	brne	.+34     	; 0x2d7a <main+0x23a>
		{
			Lcd_vidGoTo(LCD_u8ROW_2 , LCD_u8COL_13 );
    2d58:	80 ec       	ldi	r24, 0xC0	; 192
    2d5a:	6d e0       	ldi	r22, 0x0D	; 13
    2d5c:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <Lcd_vidGoTo>
			Lcd_vidDisplayString("          ");
    2d60:	8d e6       	ldi	r24, 0x6D	; 109
    2d62:	90 e0       	ldi	r25, 0x00	; 0
    2d64:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <Lcd_vidDisplayString>

			Lcd_vidGoTo(LCD_u8ROW_2 , LCD_u8COL_13 );
    2d68:	80 ec       	ldi	r24, 0xC0	; 192
    2d6a:	6d e0       	ldi	r22, 0x0D	; 13
    2d6c:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <Lcd_vidGoTo>
			Lcd_vidDisplayString("Volt");
    2d70:	88 e7       	ldi	r24, 0x78	; 120
    2d72:	90 e0       	ldi	r25, 0x00	; 0
    2d74:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <Lcd_vidDisplayString>
    2d78:	16 c0       	rjmp	.+44     	; 0x2da6 <main+0x266>
		}
		else if(flag == 1 && lastFlag == 0)
    2d7a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2d7c:	81 30       	cpi	r24, 0x01	; 1
    2d7e:	99 f4       	brne	.+38     	; 0x2da6 <main+0x266>
    2d80:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d82:	88 23       	and	r24, r24
    2d84:	81 f4       	brne	.+32     	; 0x2da6 <main+0x266>
		{
			Lcd_vidGoTo(LCD_u8ROW_2 , LCD_u8COL_13 );
    2d86:	80 ec       	ldi	r24, 0xC0	; 192
    2d88:	6d e0       	ldi	r22, 0x0D	; 13
    2d8a:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <Lcd_vidGoTo>
			Lcd_vidDisplayString("          ");
    2d8e:	8d e6       	ldi	r24, 0x6D	; 109
    2d90:	90 e0       	ldi	r25, 0x00	; 0
    2d92:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <Lcd_vidDisplayString>

			Lcd_vidGoTo(LCD_u8ROW_2 , LCD_u8COL_13 );
    2d96:	80 ec       	ldi	r24, 0xC0	; 192
    2d98:	6d e0       	ldi	r22, 0x0D	; 13
    2d9a:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <Lcd_vidGoTo>
			Lcd_vidDisplayString("mV");
    2d9e:	8d e7       	ldi	r24, 0x7D	; 125
    2da0:	90 e0       	ldi	r25, 0x00	; 0
    2da2:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <Lcd_vidDisplayString>
		}

		if(Loc_u16Reading != temp || flag != lastFlag )
    2da6:	2d a1       	ldd	r18, Y+37	; 0x25
    2da8:	3e a1       	ldd	r19, Y+38	; 0x26
    2daa:	8b a1       	ldd	r24, Y+35	; 0x23
    2dac:	9c a1       	ldd	r25, Y+36	; 0x24
    2dae:	28 17       	cp	r18, r24
    2db0:	39 07       	cpc	r19, r25
    2db2:	21 f4       	brne	.+8      	; 0x2dbc <main+0x27c>
    2db4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2db6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2db8:	98 17       	cp	r25, r24
    2dba:	e9 f0       	breq	.+58     	; 0x2df6 <main+0x2b6>
		{
			Lcd_vidGoTo(LCD_u8ROW_1 , LCD_u8COL_9 );
    2dbc:	80 e8       	ldi	r24, 0x80	; 128
    2dbe:	69 e0       	ldi	r22, 0x09	; 9
    2dc0:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <Lcd_vidGoTo>
			Lcd_vidDisplayString("          ");
    2dc4:	8d e6       	ldi	r24, 0x6D	; 109
    2dc6:	90 e0       	ldi	r25, 0x00	; 0
    2dc8:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <Lcd_vidDisplayString>

			Lcd_vidGoTo(LCD_u8ROW_1 , LCD_u8COL_9 );
    2dcc:	80 e8       	ldi	r24, 0x80	; 128
    2dce:	69 e0       	ldi	r22, 0x09	; 9
    2dd0:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <Lcd_vidGoTo>

			if(flag == 0)
    2dd4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2dd6:	88 23       	and	r24, r24
    2dd8:	51 f4       	brne	.+20     	; 0x2dee <main+0x2ae>
				Lcd_vidDisplayNumber(Loc_u16Reading);
    2dda:	8d a1       	ldd	r24, Y+37	; 0x25
    2ddc:	9e a1       	ldd	r25, Y+38	; 0x26
    2dde:	cc 01       	movw	r24, r24
    2de0:	a0 e0       	ldi	r26, 0x00	; 0
    2de2:	b0 e0       	ldi	r27, 0x00	; 0
    2de4:	bc 01       	movw	r22, r24
    2de6:	cd 01       	movw	r24, r26
    2de8:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <Lcd_vidDisplayNumber>
    2dec:	04 c0       	rjmp	.+8      	; 0x2df6 <main+0x2b6>
			else
				Lcd_vidDisplayString(buf);
    2dee:	ce 01       	movw	r24, r28
    2df0:	87 96       	adiw	r24, 0x27	; 39
    2df2:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <Lcd_vidDisplayString>
		}

		temp = Loc_u16Reading;
    2df6:	8d a1       	ldd	r24, Y+37	; 0x25
    2df8:	9e a1       	ldd	r25, Y+38	; 0x26
    2dfa:	9c a3       	std	Y+36, r25	; 0x24
    2dfc:	8b a3       	std	Y+35, r24	; 0x23
		lastFlag = flag ;
    2dfe:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2e00:	8d 8f       	std	Y+29, r24	; 0x1d
    2e02:	80 e0       	ldi	r24, 0x00	; 0
    2e04:	90 e0       	ldi	r25, 0x00	; 0
    2e06:	a0 e2       	ldi	r26, 0x20	; 32
    2e08:	b1 e4       	ldi	r27, 0x41	; 65
    2e0a:	8b 87       	std	Y+11, r24	; 0x0b
    2e0c:	9c 87       	std	Y+12, r25	; 0x0c
    2e0e:	ad 87       	std	Y+13, r26	; 0x0d
    2e10:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e12:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e14:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e16:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e18:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e1a:	20 e0       	ldi	r18, 0x00	; 0
    2e1c:	30 e0       	ldi	r19, 0x00	; 0
    2e1e:	4a e7       	ldi	r20, 0x7A	; 122
    2e20:	55 e4       	ldi	r21, 0x45	; 69
    2e22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e26:	dc 01       	movw	r26, r24
    2e28:	cb 01       	movw	r24, r22
    2e2a:	8f 83       	std	Y+7, r24	; 0x07
    2e2c:	98 87       	std	Y+8, r25	; 0x08
    2e2e:	a9 87       	std	Y+9, r26	; 0x09
    2e30:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e32:	6f 81       	ldd	r22, Y+7	; 0x07
    2e34:	78 85       	ldd	r23, Y+8	; 0x08
    2e36:	89 85       	ldd	r24, Y+9	; 0x09
    2e38:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e3a:	20 e0       	ldi	r18, 0x00	; 0
    2e3c:	30 e0       	ldi	r19, 0x00	; 0
    2e3e:	40 e8       	ldi	r20, 0x80	; 128
    2e40:	5f e3       	ldi	r21, 0x3F	; 63
    2e42:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e46:	88 23       	and	r24, r24
    2e48:	2c f4       	brge	.+10     	; 0x2e54 <main+0x314>
		__ticks = 1;
    2e4a:	81 e0       	ldi	r24, 0x01	; 1
    2e4c:	90 e0       	ldi	r25, 0x00	; 0
    2e4e:	9e 83       	std	Y+6, r25	; 0x06
    2e50:	8d 83       	std	Y+5, r24	; 0x05
    2e52:	3f c0       	rjmp	.+126    	; 0x2ed2 <main+0x392>
	else if (__tmp > 65535)
    2e54:	6f 81       	ldd	r22, Y+7	; 0x07
    2e56:	78 85       	ldd	r23, Y+8	; 0x08
    2e58:	89 85       	ldd	r24, Y+9	; 0x09
    2e5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e5c:	20 e0       	ldi	r18, 0x00	; 0
    2e5e:	3f ef       	ldi	r19, 0xFF	; 255
    2e60:	4f e7       	ldi	r20, 0x7F	; 127
    2e62:	57 e4       	ldi	r21, 0x47	; 71
    2e64:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e68:	18 16       	cp	r1, r24
    2e6a:	4c f5       	brge	.+82     	; 0x2ebe <main+0x37e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e6c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e6e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e70:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e72:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e74:	20 e0       	ldi	r18, 0x00	; 0
    2e76:	30 e0       	ldi	r19, 0x00	; 0
    2e78:	40 e2       	ldi	r20, 0x20	; 32
    2e7a:	51 e4       	ldi	r21, 0x41	; 65
    2e7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e80:	dc 01       	movw	r26, r24
    2e82:	cb 01       	movw	r24, r22
    2e84:	bc 01       	movw	r22, r24
    2e86:	cd 01       	movw	r24, r26
    2e88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e8c:	dc 01       	movw	r26, r24
    2e8e:	cb 01       	movw	r24, r22
    2e90:	9e 83       	std	Y+6, r25	; 0x06
    2e92:	8d 83       	std	Y+5, r24	; 0x05
    2e94:	0f c0       	rjmp	.+30     	; 0x2eb4 <main+0x374>
    2e96:	80 e9       	ldi	r24, 0x90	; 144
    2e98:	91 e0       	ldi	r25, 0x01	; 1
    2e9a:	9c 83       	std	Y+4, r25	; 0x04
    2e9c:	8b 83       	std	Y+3, r24	; 0x03
    2e9e:	8b 81       	ldd	r24, Y+3	; 0x03
    2ea0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ea2:	01 97       	sbiw	r24, 0x01	; 1
    2ea4:	f1 f7       	brne	.-4      	; 0x2ea2 <main+0x362>
    2ea6:	9c 83       	std	Y+4, r25	; 0x04
    2ea8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2eaa:	8d 81       	ldd	r24, Y+5	; 0x05
    2eac:	9e 81       	ldd	r25, Y+6	; 0x06
    2eae:	01 97       	sbiw	r24, 0x01	; 1
    2eb0:	9e 83       	std	Y+6, r25	; 0x06
    2eb2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2eb4:	8d 81       	ldd	r24, Y+5	; 0x05
    2eb6:	9e 81       	ldd	r25, Y+6	; 0x06
    2eb8:	00 97       	sbiw	r24, 0x00	; 0
    2eba:	69 f7       	brne	.-38     	; 0x2e96 <main+0x356>
    2ebc:	91 ce       	rjmp	.-734    	; 0x2be0 <main+0xa0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ebe:	6f 81       	ldd	r22, Y+7	; 0x07
    2ec0:	78 85       	ldd	r23, Y+8	; 0x08
    2ec2:	89 85       	ldd	r24, Y+9	; 0x09
    2ec4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ec6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eca:	dc 01       	movw	r26, r24
    2ecc:	cb 01       	movw	r24, r22
    2ece:	9e 83       	std	Y+6, r25	; 0x06
    2ed0:	8d 83       	std	Y+5, r24	; 0x05
    2ed2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ed4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ed6:	9a 83       	std	Y+2, r25	; 0x02
    2ed8:	89 83       	std	Y+1, r24	; 0x01
    2eda:	89 81       	ldd	r24, Y+1	; 0x01
    2edc:	9a 81       	ldd	r25, Y+2	; 0x02
    2ede:	01 97       	sbiw	r24, 0x01	; 1
    2ee0:	f1 f7       	brne	.-4      	; 0x2ede <main+0x39e>
    2ee2:	9a 83       	std	Y+2, r25	; 0x02
    2ee4:	89 83       	std	Y+1, r24	; 0x01
    2ee6:	7c ce       	rjmp	.-776    	; 0x2be0 <main+0xa0>

00002ee8 <__divmodhi4>:
    2ee8:	97 fb       	bst	r25, 7
    2eea:	09 2e       	mov	r0, r25
    2eec:	07 26       	eor	r0, r23
    2eee:	0a d0       	rcall	.+20     	; 0x2f04 <__divmodhi4_neg1>
    2ef0:	77 fd       	sbrc	r23, 7
    2ef2:	04 d0       	rcall	.+8      	; 0x2efc <__divmodhi4_neg2>
    2ef4:	0c d0       	rcall	.+24     	; 0x2f0e <__udivmodhi4>
    2ef6:	06 d0       	rcall	.+12     	; 0x2f04 <__divmodhi4_neg1>
    2ef8:	00 20       	and	r0, r0
    2efa:	1a f4       	brpl	.+6      	; 0x2f02 <__divmodhi4_exit>

00002efc <__divmodhi4_neg2>:
    2efc:	70 95       	com	r23
    2efe:	61 95       	neg	r22
    2f00:	7f 4f       	sbci	r23, 0xFF	; 255

00002f02 <__divmodhi4_exit>:
    2f02:	08 95       	ret

00002f04 <__divmodhi4_neg1>:
    2f04:	f6 f7       	brtc	.-4      	; 0x2f02 <__divmodhi4_exit>
    2f06:	90 95       	com	r25
    2f08:	81 95       	neg	r24
    2f0a:	9f 4f       	sbci	r25, 0xFF	; 255
    2f0c:	08 95       	ret

00002f0e <__udivmodhi4>:
    2f0e:	aa 1b       	sub	r26, r26
    2f10:	bb 1b       	sub	r27, r27
    2f12:	51 e1       	ldi	r21, 0x11	; 17
    2f14:	07 c0       	rjmp	.+14     	; 0x2f24 <__udivmodhi4_ep>

00002f16 <__udivmodhi4_loop>:
    2f16:	aa 1f       	adc	r26, r26
    2f18:	bb 1f       	adc	r27, r27
    2f1a:	a6 17       	cp	r26, r22
    2f1c:	b7 07       	cpc	r27, r23
    2f1e:	10 f0       	brcs	.+4      	; 0x2f24 <__udivmodhi4_ep>
    2f20:	a6 1b       	sub	r26, r22
    2f22:	b7 0b       	sbc	r27, r23

00002f24 <__udivmodhi4_ep>:
    2f24:	88 1f       	adc	r24, r24
    2f26:	99 1f       	adc	r25, r25
    2f28:	5a 95       	dec	r21
    2f2a:	a9 f7       	brne	.-22     	; 0x2f16 <__udivmodhi4_loop>
    2f2c:	80 95       	com	r24
    2f2e:	90 95       	com	r25
    2f30:	bc 01       	movw	r22, r24
    2f32:	cd 01       	movw	r24, r26
    2f34:	08 95       	ret

00002f36 <__prologue_saves__>:
    2f36:	2f 92       	push	r2
    2f38:	3f 92       	push	r3
    2f3a:	4f 92       	push	r4
    2f3c:	5f 92       	push	r5
    2f3e:	6f 92       	push	r6
    2f40:	7f 92       	push	r7
    2f42:	8f 92       	push	r8
    2f44:	9f 92       	push	r9
    2f46:	af 92       	push	r10
    2f48:	bf 92       	push	r11
    2f4a:	cf 92       	push	r12
    2f4c:	df 92       	push	r13
    2f4e:	ef 92       	push	r14
    2f50:	ff 92       	push	r15
    2f52:	0f 93       	push	r16
    2f54:	1f 93       	push	r17
    2f56:	cf 93       	push	r28
    2f58:	df 93       	push	r29
    2f5a:	cd b7       	in	r28, 0x3d	; 61
    2f5c:	de b7       	in	r29, 0x3e	; 62
    2f5e:	ca 1b       	sub	r28, r26
    2f60:	db 0b       	sbc	r29, r27
    2f62:	0f b6       	in	r0, 0x3f	; 63
    2f64:	f8 94       	cli
    2f66:	de bf       	out	0x3e, r29	; 62
    2f68:	0f be       	out	0x3f, r0	; 63
    2f6a:	cd bf       	out	0x3d, r28	; 61
    2f6c:	09 94       	ijmp

00002f6e <__epilogue_restores__>:
    2f6e:	2a 88       	ldd	r2, Y+18	; 0x12
    2f70:	39 88       	ldd	r3, Y+17	; 0x11
    2f72:	48 88       	ldd	r4, Y+16	; 0x10
    2f74:	5f 84       	ldd	r5, Y+15	; 0x0f
    2f76:	6e 84       	ldd	r6, Y+14	; 0x0e
    2f78:	7d 84       	ldd	r7, Y+13	; 0x0d
    2f7a:	8c 84       	ldd	r8, Y+12	; 0x0c
    2f7c:	9b 84       	ldd	r9, Y+11	; 0x0b
    2f7e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2f80:	b9 84       	ldd	r11, Y+9	; 0x09
    2f82:	c8 84       	ldd	r12, Y+8	; 0x08
    2f84:	df 80       	ldd	r13, Y+7	; 0x07
    2f86:	ee 80       	ldd	r14, Y+6	; 0x06
    2f88:	fd 80       	ldd	r15, Y+5	; 0x05
    2f8a:	0c 81       	ldd	r16, Y+4	; 0x04
    2f8c:	1b 81       	ldd	r17, Y+3	; 0x03
    2f8e:	aa 81       	ldd	r26, Y+2	; 0x02
    2f90:	b9 81       	ldd	r27, Y+1	; 0x01
    2f92:	ce 0f       	add	r28, r30
    2f94:	d1 1d       	adc	r29, r1
    2f96:	0f b6       	in	r0, 0x3f	; 63
    2f98:	f8 94       	cli
    2f9a:	de bf       	out	0x3e, r29	; 62
    2f9c:	0f be       	out	0x3f, r0	; 63
    2f9e:	cd bf       	out	0x3d, r28	; 61
    2fa0:	ed 01       	movw	r28, r26
    2fa2:	08 95       	ret

00002fa4 <malloc>:
    2fa4:	cf 93       	push	r28
    2fa6:	df 93       	push	r29
    2fa8:	bc 01       	movw	r22, r24
    2faa:	82 30       	cpi	r24, 0x02	; 2
    2fac:	91 05       	cpc	r25, r1
    2fae:	10 f4       	brcc	.+4      	; 0x2fb4 <malloc+0x10>
    2fb0:	62 e0       	ldi	r22, 0x02	; 2
    2fb2:	70 e0       	ldi	r23, 0x00	; 0
    2fb4:	a0 91 90 01 	lds	r26, 0x0190
    2fb8:	b0 91 91 01 	lds	r27, 0x0191
    2fbc:	ed 01       	movw	r28, r26
    2fbe:	e0 e0       	ldi	r30, 0x00	; 0
    2fc0:	f0 e0       	ldi	r31, 0x00	; 0
    2fc2:	40 e0       	ldi	r20, 0x00	; 0
    2fc4:	50 e0       	ldi	r21, 0x00	; 0
    2fc6:	21 c0       	rjmp	.+66     	; 0x300a <malloc+0x66>
    2fc8:	88 81       	ld	r24, Y
    2fca:	99 81       	ldd	r25, Y+1	; 0x01
    2fcc:	86 17       	cp	r24, r22
    2fce:	97 07       	cpc	r25, r23
    2fd0:	69 f4       	brne	.+26     	; 0x2fec <malloc+0x48>
    2fd2:	8a 81       	ldd	r24, Y+2	; 0x02
    2fd4:	9b 81       	ldd	r25, Y+3	; 0x03
    2fd6:	30 97       	sbiw	r30, 0x00	; 0
    2fd8:	19 f0       	breq	.+6      	; 0x2fe0 <malloc+0x3c>
    2fda:	93 83       	std	Z+3, r25	; 0x03
    2fdc:	82 83       	std	Z+2, r24	; 0x02
    2fde:	04 c0       	rjmp	.+8      	; 0x2fe8 <malloc+0x44>
    2fe0:	90 93 91 01 	sts	0x0191, r25
    2fe4:	80 93 90 01 	sts	0x0190, r24
    2fe8:	fe 01       	movw	r30, r28
    2fea:	34 c0       	rjmp	.+104    	; 0x3054 <malloc+0xb0>
    2fec:	68 17       	cp	r22, r24
    2fee:	79 07       	cpc	r23, r25
    2ff0:	38 f4       	brcc	.+14     	; 0x3000 <malloc+0x5c>
    2ff2:	41 15       	cp	r20, r1
    2ff4:	51 05       	cpc	r21, r1
    2ff6:	19 f0       	breq	.+6      	; 0x2ffe <malloc+0x5a>
    2ff8:	84 17       	cp	r24, r20
    2ffa:	95 07       	cpc	r25, r21
    2ffc:	08 f4       	brcc	.+2      	; 0x3000 <malloc+0x5c>
    2ffe:	ac 01       	movw	r20, r24
    3000:	fe 01       	movw	r30, r28
    3002:	8a 81       	ldd	r24, Y+2	; 0x02
    3004:	9b 81       	ldd	r25, Y+3	; 0x03
    3006:	9c 01       	movw	r18, r24
    3008:	e9 01       	movw	r28, r18
    300a:	20 97       	sbiw	r28, 0x00	; 0
    300c:	e9 f6       	brne	.-70     	; 0x2fc8 <malloc+0x24>
    300e:	41 15       	cp	r20, r1
    3010:	51 05       	cpc	r21, r1
    3012:	a9 f1       	breq	.+106    	; 0x307e <malloc+0xda>
    3014:	ca 01       	movw	r24, r20
    3016:	86 1b       	sub	r24, r22
    3018:	97 0b       	sbc	r25, r23
    301a:	04 97       	sbiw	r24, 0x04	; 4
    301c:	08 f4       	brcc	.+2      	; 0x3020 <malloc+0x7c>
    301e:	ba 01       	movw	r22, r20
    3020:	e0 e0       	ldi	r30, 0x00	; 0
    3022:	f0 e0       	ldi	r31, 0x00	; 0
    3024:	2a c0       	rjmp	.+84     	; 0x307a <malloc+0xd6>
    3026:	8d 91       	ld	r24, X+
    3028:	9c 91       	ld	r25, X
    302a:	11 97       	sbiw	r26, 0x01	; 1
    302c:	84 17       	cp	r24, r20
    302e:	95 07       	cpc	r25, r21
    3030:	f9 f4       	brne	.+62     	; 0x3070 <malloc+0xcc>
    3032:	64 17       	cp	r22, r20
    3034:	75 07       	cpc	r23, r21
    3036:	81 f4       	brne	.+32     	; 0x3058 <malloc+0xb4>
    3038:	12 96       	adiw	r26, 0x02	; 2
    303a:	8d 91       	ld	r24, X+
    303c:	9c 91       	ld	r25, X
    303e:	13 97       	sbiw	r26, 0x03	; 3
    3040:	30 97       	sbiw	r30, 0x00	; 0
    3042:	19 f0       	breq	.+6      	; 0x304a <malloc+0xa6>
    3044:	93 83       	std	Z+3, r25	; 0x03
    3046:	82 83       	std	Z+2, r24	; 0x02
    3048:	04 c0       	rjmp	.+8      	; 0x3052 <malloc+0xae>
    304a:	90 93 91 01 	sts	0x0191, r25
    304e:	80 93 90 01 	sts	0x0190, r24
    3052:	fd 01       	movw	r30, r26
    3054:	32 96       	adiw	r30, 0x02	; 2
    3056:	4f c0       	rjmp	.+158    	; 0x30f6 <malloc+0x152>
    3058:	ca 01       	movw	r24, r20
    305a:	86 1b       	sub	r24, r22
    305c:	97 0b       	sbc	r25, r23
    305e:	fd 01       	movw	r30, r26
    3060:	e8 0f       	add	r30, r24
    3062:	f9 1f       	adc	r31, r25
    3064:	61 93       	st	Z+, r22
    3066:	71 93       	st	Z+, r23
    3068:	02 97       	sbiw	r24, 0x02	; 2
    306a:	8d 93       	st	X+, r24
    306c:	9c 93       	st	X, r25
    306e:	43 c0       	rjmp	.+134    	; 0x30f6 <malloc+0x152>
    3070:	fd 01       	movw	r30, r26
    3072:	82 81       	ldd	r24, Z+2	; 0x02
    3074:	93 81       	ldd	r25, Z+3	; 0x03
    3076:	9c 01       	movw	r18, r24
    3078:	d9 01       	movw	r26, r18
    307a:	10 97       	sbiw	r26, 0x00	; 0
    307c:	a1 f6       	brne	.-88     	; 0x3026 <malloc+0x82>
    307e:	80 91 8e 01 	lds	r24, 0x018E
    3082:	90 91 8f 01 	lds	r25, 0x018F
    3086:	89 2b       	or	r24, r25
    3088:	41 f4       	brne	.+16     	; 0x309a <malloc+0xf6>
    308a:	80 91 8a 01 	lds	r24, 0x018A
    308e:	90 91 8b 01 	lds	r25, 0x018B
    3092:	90 93 8f 01 	sts	0x018F, r25
    3096:	80 93 8e 01 	sts	0x018E, r24
    309a:	40 91 8c 01 	lds	r20, 0x018C
    309e:	50 91 8d 01 	lds	r21, 0x018D
    30a2:	41 15       	cp	r20, r1
    30a4:	51 05       	cpc	r21, r1
    30a6:	41 f4       	brne	.+16     	; 0x30b8 <malloc+0x114>
    30a8:	4d b7       	in	r20, 0x3d	; 61
    30aa:	5e b7       	in	r21, 0x3e	; 62
    30ac:	80 91 88 01 	lds	r24, 0x0188
    30b0:	90 91 89 01 	lds	r25, 0x0189
    30b4:	48 1b       	sub	r20, r24
    30b6:	59 0b       	sbc	r21, r25
    30b8:	20 91 8e 01 	lds	r18, 0x018E
    30bc:	30 91 8f 01 	lds	r19, 0x018F
    30c0:	24 17       	cp	r18, r20
    30c2:	35 07       	cpc	r19, r21
    30c4:	b0 f4       	brcc	.+44     	; 0x30f2 <malloc+0x14e>
    30c6:	ca 01       	movw	r24, r20
    30c8:	82 1b       	sub	r24, r18
    30ca:	93 0b       	sbc	r25, r19
    30cc:	86 17       	cp	r24, r22
    30ce:	97 07       	cpc	r25, r23
    30d0:	80 f0       	brcs	.+32     	; 0x30f2 <malloc+0x14e>
    30d2:	ab 01       	movw	r20, r22
    30d4:	4e 5f       	subi	r20, 0xFE	; 254
    30d6:	5f 4f       	sbci	r21, 0xFF	; 255
    30d8:	84 17       	cp	r24, r20
    30da:	95 07       	cpc	r25, r21
    30dc:	50 f0       	brcs	.+20     	; 0x30f2 <malloc+0x14e>
    30de:	42 0f       	add	r20, r18
    30e0:	53 1f       	adc	r21, r19
    30e2:	50 93 8f 01 	sts	0x018F, r21
    30e6:	40 93 8e 01 	sts	0x018E, r20
    30ea:	f9 01       	movw	r30, r18
    30ec:	61 93       	st	Z+, r22
    30ee:	71 93       	st	Z+, r23
    30f0:	02 c0       	rjmp	.+4      	; 0x30f6 <malloc+0x152>
    30f2:	e0 e0       	ldi	r30, 0x00	; 0
    30f4:	f0 e0       	ldi	r31, 0x00	; 0
    30f6:	cf 01       	movw	r24, r30
    30f8:	df 91       	pop	r29
    30fa:	cf 91       	pop	r28
    30fc:	08 95       	ret

000030fe <free>:
    30fe:	cf 93       	push	r28
    3100:	df 93       	push	r29
    3102:	00 97       	sbiw	r24, 0x00	; 0
    3104:	09 f4       	brne	.+2      	; 0x3108 <free+0xa>
    3106:	50 c0       	rjmp	.+160    	; 0x31a8 <free+0xaa>
    3108:	ec 01       	movw	r28, r24
    310a:	22 97       	sbiw	r28, 0x02	; 2
    310c:	1b 82       	std	Y+3, r1	; 0x03
    310e:	1a 82       	std	Y+2, r1	; 0x02
    3110:	a0 91 90 01 	lds	r26, 0x0190
    3114:	b0 91 91 01 	lds	r27, 0x0191
    3118:	10 97       	sbiw	r26, 0x00	; 0
    311a:	09 f1       	breq	.+66     	; 0x315e <free+0x60>
    311c:	40 e0       	ldi	r20, 0x00	; 0
    311e:	50 e0       	ldi	r21, 0x00	; 0
    3120:	ac 17       	cp	r26, r28
    3122:	bd 07       	cpc	r27, r29
    3124:	08 f1       	brcs	.+66     	; 0x3168 <free+0x6a>
    3126:	bb 83       	std	Y+3, r27	; 0x03
    3128:	aa 83       	std	Y+2, r26	; 0x02
    312a:	fe 01       	movw	r30, r28
    312c:	21 91       	ld	r18, Z+
    312e:	31 91       	ld	r19, Z+
    3130:	e2 0f       	add	r30, r18
    3132:	f3 1f       	adc	r31, r19
    3134:	ae 17       	cp	r26, r30
    3136:	bf 07       	cpc	r27, r31
    3138:	79 f4       	brne	.+30     	; 0x3158 <free+0x5a>
    313a:	8d 91       	ld	r24, X+
    313c:	9c 91       	ld	r25, X
    313e:	11 97       	sbiw	r26, 0x01	; 1
    3140:	28 0f       	add	r18, r24
    3142:	39 1f       	adc	r19, r25
    3144:	2e 5f       	subi	r18, 0xFE	; 254
    3146:	3f 4f       	sbci	r19, 0xFF	; 255
    3148:	39 83       	std	Y+1, r19	; 0x01
    314a:	28 83       	st	Y, r18
    314c:	12 96       	adiw	r26, 0x02	; 2
    314e:	8d 91       	ld	r24, X+
    3150:	9c 91       	ld	r25, X
    3152:	13 97       	sbiw	r26, 0x03	; 3
    3154:	9b 83       	std	Y+3, r25	; 0x03
    3156:	8a 83       	std	Y+2, r24	; 0x02
    3158:	41 15       	cp	r20, r1
    315a:	51 05       	cpc	r21, r1
    315c:	71 f4       	brne	.+28     	; 0x317a <free+0x7c>
    315e:	d0 93 91 01 	sts	0x0191, r29
    3162:	c0 93 90 01 	sts	0x0190, r28
    3166:	20 c0       	rjmp	.+64     	; 0x31a8 <free+0xaa>
    3168:	12 96       	adiw	r26, 0x02	; 2
    316a:	8d 91       	ld	r24, X+
    316c:	9c 91       	ld	r25, X
    316e:	13 97       	sbiw	r26, 0x03	; 3
    3170:	ad 01       	movw	r20, r26
    3172:	00 97       	sbiw	r24, 0x00	; 0
    3174:	11 f0       	breq	.+4      	; 0x317a <free+0x7c>
    3176:	dc 01       	movw	r26, r24
    3178:	d3 cf       	rjmp	.-90     	; 0x3120 <free+0x22>
    317a:	fa 01       	movw	r30, r20
    317c:	d3 83       	std	Z+3, r29	; 0x03
    317e:	c2 83       	std	Z+2, r28	; 0x02
    3180:	21 91       	ld	r18, Z+
    3182:	31 91       	ld	r19, Z+
    3184:	e2 0f       	add	r30, r18
    3186:	f3 1f       	adc	r31, r19
    3188:	ce 17       	cp	r28, r30
    318a:	df 07       	cpc	r29, r31
    318c:	69 f4       	brne	.+26     	; 0x31a8 <free+0xaa>
    318e:	88 81       	ld	r24, Y
    3190:	99 81       	ldd	r25, Y+1	; 0x01
    3192:	28 0f       	add	r18, r24
    3194:	39 1f       	adc	r19, r25
    3196:	2e 5f       	subi	r18, 0xFE	; 254
    3198:	3f 4f       	sbci	r19, 0xFF	; 255
    319a:	fa 01       	movw	r30, r20
    319c:	31 83       	std	Z+1, r19	; 0x01
    319e:	20 83       	st	Z, r18
    31a0:	8a 81       	ldd	r24, Y+2	; 0x02
    31a2:	9b 81       	ldd	r25, Y+3	; 0x03
    31a4:	93 83       	std	Z+3, r25	; 0x03
    31a6:	82 83       	std	Z+2, r24	; 0x02
    31a8:	df 91       	pop	r29
    31aa:	cf 91       	pop	r28
    31ac:	08 95       	ret

000031ae <snprintf>:
    31ae:	ae e0       	ldi	r26, 0x0E	; 14
    31b0:	b0 e0       	ldi	r27, 0x00	; 0
    31b2:	ed ed       	ldi	r30, 0xDD	; 221
    31b4:	f8 e1       	ldi	r31, 0x18	; 24
    31b6:	0c 94 a9 17 	jmp	0x2f52	; 0x2f52 <__prologue_saves__+0x1c>
    31ba:	0d 89       	ldd	r16, Y+21	; 0x15
    31bc:	1e 89       	ldd	r17, Y+22	; 0x16
    31be:	8f 89       	ldd	r24, Y+23	; 0x17
    31c0:	98 8d       	ldd	r25, Y+24	; 0x18
    31c2:	97 ff       	sbrs	r25, 7
    31c4:	02 c0       	rjmp	.+4      	; 0x31ca <snprintf+0x1c>
    31c6:	80 e0       	ldi	r24, 0x00	; 0
    31c8:	90 e8       	ldi	r25, 0x80	; 128
    31ca:	01 97       	sbiw	r24, 0x01	; 1
    31cc:	9e 83       	std	Y+6, r25	; 0x06
    31ce:	8d 83       	std	Y+5, r24	; 0x05
    31d0:	1a 83       	std	Y+2, r17	; 0x02
    31d2:	09 83       	std	Y+1, r16	; 0x01
    31d4:	86 e0       	ldi	r24, 0x06	; 6
    31d6:	8c 83       	std	Y+4, r24	; 0x04
    31d8:	9e 01       	movw	r18, r28
    31da:	25 5e       	subi	r18, 0xE5	; 229
    31dc:	3f 4f       	sbci	r19, 0xFF	; 255
    31de:	ce 01       	movw	r24, r28
    31e0:	01 96       	adiw	r24, 0x01	; 1
    31e2:	69 8d       	ldd	r22, Y+25	; 0x19
    31e4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    31e6:	a9 01       	movw	r20, r18
    31e8:	0e 94 08 19 	call	0x3210	; 0x3210 <vfprintf>
    31ec:	4d 81       	ldd	r20, Y+5	; 0x05
    31ee:	5e 81       	ldd	r21, Y+6	; 0x06
    31f0:	57 fd       	sbrc	r21, 7
    31f2:	0a c0       	rjmp	.+20     	; 0x3208 <snprintf+0x5a>
    31f4:	2f 81       	ldd	r18, Y+7	; 0x07
    31f6:	38 85       	ldd	r19, Y+8	; 0x08
    31f8:	42 17       	cp	r20, r18
    31fa:	53 07       	cpc	r21, r19
    31fc:	0c f4       	brge	.+2      	; 0x3200 <snprintf+0x52>
    31fe:	9a 01       	movw	r18, r20
    3200:	02 0f       	add	r16, r18
    3202:	13 1f       	adc	r17, r19
    3204:	f8 01       	movw	r30, r16
    3206:	10 82       	st	Z, r1
    3208:	2e 96       	adiw	r28, 0x0e	; 14
    320a:	e4 e0       	ldi	r30, 0x04	; 4
    320c:	0c 94 c5 17 	jmp	0x2f8a	; 0x2f8a <__epilogue_restores__+0x1c>

00003210 <vfprintf>:
    3210:	ab e0       	ldi	r26, 0x0B	; 11
    3212:	b0 e0       	ldi	r27, 0x00	; 0
    3214:	ee e0       	ldi	r30, 0x0E	; 14
    3216:	f9 e1       	ldi	r31, 0x19	; 25
    3218:	0c 94 9b 17 	jmp	0x2f36	; 0x2f36 <__prologue_saves__>
    321c:	3c 01       	movw	r6, r24
    321e:	2b 01       	movw	r4, r22
    3220:	5a 01       	movw	r10, r20
    3222:	fc 01       	movw	r30, r24
    3224:	17 82       	std	Z+7, r1	; 0x07
    3226:	16 82       	std	Z+6, r1	; 0x06
    3228:	83 81       	ldd	r24, Z+3	; 0x03
    322a:	81 fd       	sbrc	r24, 1
    322c:	03 c0       	rjmp	.+6      	; 0x3234 <vfprintf+0x24>
    322e:	6f ef       	ldi	r22, 0xFF	; 255
    3230:	7f ef       	ldi	r23, 0xFF	; 255
    3232:	c6 c1       	rjmp	.+908    	; 0x35c0 <vfprintf+0x3b0>
    3234:	9a e0       	ldi	r25, 0x0A	; 10
    3236:	89 2e       	mov	r8, r25
    3238:	1e 01       	movw	r2, r28
    323a:	08 94       	sec
    323c:	21 1c       	adc	r2, r1
    323e:	31 1c       	adc	r3, r1
    3240:	f3 01       	movw	r30, r6
    3242:	23 81       	ldd	r18, Z+3	; 0x03
    3244:	f2 01       	movw	r30, r4
    3246:	23 fd       	sbrc	r18, 3
    3248:	85 91       	lpm	r24, Z+
    324a:	23 ff       	sbrs	r18, 3
    324c:	81 91       	ld	r24, Z+
    324e:	2f 01       	movw	r4, r30
    3250:	88 23       	and	r24, r24
    3252:	09 f4       	brne	.+2      	; 0x3256 <vfprintf+0x46>
    3254:	b2 c1       	rjmp	.+868    	; 0x35ba <vfprintf+0x3aa>
    3256:	85 32       	cpi	r24, 0x25	; 37
    3258:	39 f4       	brne	.+14     	; 0x3268 <vfprintf+0x58>
    325a:	23 fd       	sbrc	r18, 3
    325c:	85 91       	lpm	r24, Z+
    325e:	23 ff       	sbrs	r18, 3
    3260:	81 91       	ld	r24, Z+
    3262:	2f 01       	movw	r4, r30
    3264:	85 32       	cpi	r24, 0x25	; 37
    3266:	29 f4       	brne	.+10     	; 0x3272 <vfprintf+0x62>
    3268:	90 e0       	ldi	r25, 0x00	; 0
    326a:	b3 01       	movw	r22, r6
    326c:	0e 94 fb 1a 	call	0x35f6	; 0x35f6 <fputc>
    3270:	e7 cf       	rjmp	.-50     	; 0x3240 <vfprintf+0x30>
    3272:	98 2f       	mov	r25, r24
    3274:	ff 24       	eor	r15, r15
    3276:	ee 24       	eor	r14, r14
    3278:	99 24       	eor	r9, r9
    327a:	ff e1       	ldi	r31, 0x1F	; 31
    327c:	ff 15       	cp	r31, r15
    327e:	d0 f0       	brcs	.+52     	; 0x32b4 <vfprintf+0xa4>
    3280:	9b 32       	cpi	r25, 0x2B	; 43
    3282:	69 f0       	breq	.+26     	; 0x329e <vfprintf+0x8e>
    3284:	9c 32       	cpi	r25, 0x2C	; 44
    3286:	28 f4       	brcc	.+10     	; 0x3292 <vfprintf+0x82>
    3288:	90 32       	cpi	r25, 0x20	; 32
    328a:	59 f0       	breq	.+22     	; 0x32a2 <vfprintf+0x92>
    328c:	93 32       	cpi	r25, 0x23	; 35
    328e:	91 f4       	brne	.+36     	; 0x32b4 <vfprintf+0xa4>
    3290:	0e c0       	rjmp	.+28     	; 0x32ae <vfprintf+0x9e>
    3292:	9d 32       	cpi	r25, 0x2D	; 45
    3294:	49 f0       	breq	.+18     	; 0x32a8 <vfprintf+0x98>
    3296:	90 33       	cpi	r25, 0x30	; 48
    3298:	69 f4       	brne	.+26     	; 0x32b4 <vfprintf+0xa4>
    329a:	41 e0       	ldi	r20, 0x01	; 1
    329c:	24 c0       	rjmp	.+72     	; 0x32e6 <vfprintf+0xd6>
    329e:	52 e0       	ldi	r21, 0x02	; 2
    32a0:	f5 2a       	or	r15, r21
    32a2:	84 e0       	ldi	r24, 0x04	; 4
    32a4:	f8 2a       	or	r15, r24
    32a6:	28 c0       	rjmp	.+80     	; 0x32f8 <vfprintf+0xe8>
    32a8:	98 e0       	ldi	r25, 0x08	; 8
    32aa:	f9 2a       	or	r15, r25
    32ac:	25 c0       	rjmp	.+74     	; 0x32f8 <vfprintf+0xe8>
    32ae:	e0 e1       	ldi	r30, 0x10	; 16
    32b0:	fe 2a       	or	r15, r30
    32b2:	22 c0       	rjmp	.+68     	; 0x32f8 <vfprintf+0xe8>
    32b4:	f7 fc       	sbrc	r15, 7
    32b6:	29 c0       	rjmp	.+82     	; 0x330a <vfprintf+0xfa>
    32b8:	89 2f       	mov	r24, r25
    32ba:	80 53       	subi	r24, 0x30	; 48
    32bc:	8a 30       	cpi	r24, 0x0A	; 10
    32be:	70 f4       	brcc	.+28     	; 0x32dc <vfprintf+0xcc>
    32c0:	f6 fe       	sbrs	r15, 6
    32c2:	05 c0       	rjmp	.+10     	; 0x32ce <vfprintf+0xbe>
    32c4:	98 9c       	mul	r9, r8
    32c6:	90 2c       	mov	r9, r0
    32c8:	11 24       	eor	r1, r1
    32ca:	98 0e       	add	r9, r24
    32cc:	15 c0       	rjmp	.+42     	; 0x32f8 <vfprintf+0xe8>
    32ce:	e8 9c       	mul	r14, r8
    32d0:	e0 2c       	mov	r14, r0
    32d2:	11 24       	eor	r1, r1
    32d4:	e8 0e       	add	r14, r24
    32d6:	f0 e2       	ldi	r31, 0x20	; 32
    32d8:	ff 2a       	or	r15, r31
    32da:	0e c0       	rjmp	.+28     	; 0x32f8 <vfprintf+0xe8>
    32dc:	9e 32       	cpi	r25, 0x2E	; 46
    32de:	29 f4       	brne	.+10     	; 0x32ea <vfprintf+0xda>
    32e0:	f6 fc       	sbrc	r15, 6
    32e2:	6b c1       	rjmp	.+726    	; 0x35ba <vfprintf+0x3aa>
    32e4:	40 e4       	ldi	r20, 0x40	; 64
    32e6:	f4 2a       	or	r15, r20
    32e8:	07 c0       	rjmp	.+14     	; 0x32f8 <vfprintf+0xe8>
    32ea:	9c 36       	cpi	r25, 0x6C	; 108
    32ec:	19 f4       	brne	.+6      	; 0x32f4 <vfprintf+0xe4>
    32ee:	50 e8       	ldi	r21, 0x80	; 128
    32f0:	f5 2a       	or	r15, r21
    32f2:	02 c0       	rjmp	.+4      	; 0x32f8 <vfprintf+0xe8>
    32f4:	98 36       	cpi	r25, 0x68	; 104
    32f6:	49 f4       	brne	.+18     	; 0x330a <vfprintf+0xfa>
    32f8:	f2 01       	movw	r30, r4
    32fa:	23 fd       	sbrc	r18, 3
    32fc:	95 91       	lpm	r25, Z+
    32fe:	23 ff       	sbrs	r18, 3
    3300:	91 91       	ld	r25, Z+
    3302:	2f 01       	movw	r4, r30
    3304:	99 23       	and	r25, r25
    3306:	09 f0       	breq	.+2      	; 0x330a <vfprintf+0xfa>
    3308:	b8 cf       	rjmp	.-144    	; 0x327a <vfprintf+0x6a>
    330a:	89 2f       	mov	r24, r25
    330c:	85 54       	subi	r24, 0x45	; 69
    330e:	83 30       	cpi	r24, 0x03	; 3
    3310:	18 f0       	brcs	.+6      	; 0x3318 <vfprintf+0x108>
    3312:	80 52       	subi	r24, 0x20	; 32
    3314:	83 30       	cpi	r24, 0x03	; 3
    3316:	38 f4       	brcc	.+14     	; 0x3326 <vfprintf+0x116>
    3318:	44 e0       	ldi	r20, 0x04	; 4
    331a:	50 e0       	ldi	r21, 0x00	; 0
    331c:	a4 0e       	add	r10, r20
    331e:	b5 1e       	adc	r11, r21
    3320:	5f e3       	ldi	r21, 0x3F	; 63
    3322:	59 83       	std	Y+1, r21	; 0x01
    3324:	0f c0       	rjmp	.+30     	; 0x3344 <vfprintf+0x134>
    3326:	93 36       	cpi	r25, 0x63	; 99
    3328:	31 f0       	breq	.+12     	; 0x3336 <vfprintf+0x126>
    332a:	93 37       	cpi	r25, 0x73	; 115
    332c:	79 f0       	breq	.+30     	; 0x334c <vfprintf+0x13c>
    332e:	93 35       	cpi	r25, 0x53	; 83
    3330:	09 f0       	breq	.+2      	; 0x3334 <vfprintf+0x124>
    3332:	56 c0       	rjmp	.+172    	; 0x33e0 <vfprintf+0x1d0>
    3334:	20 c0       	rjmp	.+64     	; 0x3376 <vfprintf+0x166>
    3336:	f5 01       	movw	r30, r10
    3338:	80 81       	ld	r24, Z
    333a:	89 83       	std	Y+1, r24	; 0x01
    333c:	42 e0       	ldi	r20, 0x02	; 2
    333e:	50 e0       	ldi	r21, 0x00	; 0
    3340:	a4 0e       	add	r10, r20
    3342:	b5 1e       	adc	r11, r21
    3344:	61 01       	movw	r12, r2
    3346:	01 e0       	ldi	r16, 0x01	; 1
    3348:	10 e0       	ldi	r17, 0x00	; 0
    334a:	12 c0       	rjmp	.+36     	; 0x3370 <vfprintf+0x160>
    334c:	f5 01       	movw	r30, r10
    334e:	c0 80       	ld	r12, Z
    3350:	d1 80       	ldd	r13, Z+1	; 0x01
    3352:	f6 fc       	sbrc	r15, 6
    3354:	03 c0       	rjmp	.+6      	; 0x335c <vfprintf+0x14c>
    3356:	6f ef       	ldi	r22, 0xFF	; 255
    3358:	7f ef       	ldi	r23, 0xFF	; 255
    335a:	02 c0       	rjmp	.+4      	; 0x3360 <vfprintf+0x150>
    335c:	69 2d       	mov	r22, r9
    335e:	70 e0       	ldi	r23, 0x00	; 0
    3360:	42 e0       	ldi	r20, 0x02	; 2
    3362:	50 e0       	ldi	r21, 0x00	; 0
    3364:	a4 0e       	add	r10, r20
    3366:	b5 1e       	adc	r11, r21
    3368:	c6 01       	movw	r24, r12
    336a:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <strnlen>
    336e:	8c 01       	movw	r16, r24
    3370:	5f e7       	ldi	r21, 0x7F	; 127
    3372:	f5 22       	and	r15, r21
    3374:	14 c0       	rjmp	.+40     	; 0x339e <vfprintf+0x18e>
    3376:	f5 01       	movw	r30, r10
    3378:	c0 80       	ld	r12, Z
    337a:	d1 80       	ldd	r13, Z+1	; 0x01
    337c:	f6 fc       	sbrc	r15, 6
    337e:	03 c0       	rjmp	.+6      	; 0x3386 <vfprintf+0x176>
    3380:	6f ef       	ldi	r22, 0xFF	; 255
    3382:	7f ef       	ldi	r23, 0xFF	; 255
    3384:	02 c0       	rjmp	.+4      	; 0x338a <vfprintf+0x17a>
    3386:	69 2d       	mov	r22, r9
    3388:	70 e0       	ldi	r23, 0x00	; 0
    338a:	42 e0       	ldi	r20, 0x02	; 2
    338c:	50 e0       	ldi	r21, 0x00	; 0
    338e:	a4 0e       	add	r10, r20
    3390:	b5 1e       	adc	r11, r21
    3392:	c6 01       	movw	r24, r12
    3394:	0e 94 e5 1a 	call	0x35ca	; 0x35ca <strnlen_P>
    3398:	8c 01       	movw	r16, r24
    339a:	50 e8       	ldi	r21, 0x80	; 128
    339c:	f5 2a       	or	r15, r21
    339e:	f3 fe       	sbrs	r15, 3
    33a0:	07 c0       	rjmp	.+14     	; 0x33b0 <vfprintf+0x1a0>
    33a2:	1a c0       	rjmp	.+52     	; 0x33d8 <vfprintf+0x1c8>
    33a4:	80 e2       	ldi	r24, 0x20	; 32
    33a6:	90 e0       	ldi	r25, 0x00	; 0
    33a8:	b3 01       	movw	r22, r6
    33aa:	0e 94 fb 1a 	call	0x35f6	; 0x35f6 <fputc>
    33ae:	ea 94       	dec	r14
    33b0:	8e 2d       	mov	r24, r14
    33b2:	90 e0       	ldi	r25, 0x00	; 0
    33b4:	08 17       	cp	r16, r24
    33b6:	19 07       	cpc	r17, r25
    33b8:	a8 f3       	brcs	.-22     	; 0x33a4 <vfprintf+0x194>
    33ba:	0e c0       	rjmp	.+28     	; 0x33d8 <vfprintf+0x1c8>
    33bc:	f6 01       	movw	r30, r12
    33be:	f7 fc       	sbrc	r15, 7
    33c0:	85 91       	lpm	r24, Z+
    33c2:	f7 fe       	sbrs	r15, 7
    33c4:	81 91       	ld	r24, Z+
    33c6:	6f 01       	movw	r12, r30
    33c8:	90 e0       	ldi	r25, 0x00	; 0
    33ca:	b3 01       	movw	r22, r6
    33cc:	0e 94 fb 1a 	call	0x35f6	; 0x35f6 <fputc>
    33d0:	e1 10       	cpse	r14, r1
    33d2:	ea 94       	dec	r14
    33d4:	01 50       	subi	r16, 0x01	; 1
    33d6:	10 40       	sbci	r17, 0x00	; 0
    33d8:	01 15       	cp	r16, r1
    33da:	11 05       	cpc	r17, r1
    33dc:	79 f7       	brne	.-34     	; 0x33bc <vfprintf+0x1ac>
    33de:	ea c0       	rjmp	.+468    	; 0x35b4 <vfprintf+0x3a4>
    33e0:	94 36       	cpi	r25, 0x64	; 100
    33e2:	11 f0       	breq	.+4      	; 0x33e8 <vfprintf+0x1d8>
    33e4:	99 36       	cpi	r25, 0x69	; 105
    33e6:	69 f5       	brne	.+90     	; 0x3442 <vfprintf+0x232>
    33e8:	f7 fe       	sbrs	r15, 7
    33ea:	08 c0       	rjmp	.+16     	; 0x33fc <vfprintf+0x1ec>
    33ec:	f5 01       	movw	r30, r10
    33ee:	20 81       	ld	r18, Z
    33f0:	31 81       	ldd	r19, Z+1	; 0x01
    33f2:	42 81       	ldd	r20, Z+2	; 0x02
    33f4:	53 81       	ldd	r21, Z+3	; 0x03
    33f6:	84 e0       	ldi	r24, 0x04	; 4
    33f8:	90 e0       	ldi	r25, 0x00	; 0
    33fa:	0a c0       	rjmp	.+20     	; 0x3410 <vfprintf+0x200>
    33fc:	f5 01       	movw	r30, r10
    33fe:	80 81       	ld	r24, Z
    3400:	91 81       	ldd	r25, Z+1	; 0x01
    3402:	9c 01       	movw	r18, r24
    3404:	44 27       	eor	r20, r20
    3406:	37 fd       	sbrc	r19, 7
    3408:	40 95       	com	r20
    340a:	54 2f       	mov	r21, r20
    340c:	82 e0       	ldi	r24, 0x02	; 2
    340e:	90 e0       	ldi	r25, 0x00	; 0
    3410:	a8 0e       	add	r10, r24
    3412:	b9 1e       	adc	r11, r25
    3414:	9f e6       	ldi	r25, 0x6F	; 111
    3416:	f9 22       	and	r15, r25
    3418:	57 ff       	sbrs	r21, 7
    341a:	09 c0       	rjmp	.+18     	; 0x342e <vfprintf+0x21e>
    341c:	50 95       	com	r21
    341e:	40 95       	com	r20
    3420:	30 95       	com	r19
    3422:	21 95       	neg	r18
    3424:	3f 4f       	sbci	r19, 0xFF	; 255
    3426:	4f 4f       	sbci	r20, 0xFF	; 255
    3428:	5f 4f       	sbci	r21, 0xFF	; 255
    342a:	e0 e8       	ldi	r30, 0x80	; 128
    342c:	fe 2a       	or	r15, r30
    342e:	ca 01       	movw	r24, r20
    3430:	b9 01       	movw	r22, r18
    3432:	a1 01       	movw	r20, r2
    3434:	2a e0       	ldi	r18, 0x0A	; 10
    3436:	30 e0       	ldi	r19, 0x00	; 0
    3438:	0e 94 27 1b 	call	0x364e	; 0x364e <__ultoa_invert>
    343c:	d8 2e       	mov	r13, r24
    343e:	d2 18       	sub	r13, r2
    3440:	40 c0       	rjmp	.+128    	; 0x34c2 <vfprintf+0x2b2>
    3442:	95 37       	cpi	r25, 0x75	; 117
    3444:	29 f4       	brne	.+10     	; 0x3450 <vfprintf+0x240>
    3446:	1f 2d       	mov	r17, r15
    3448:	1f 7e       	andi	r17, 0xEF	; 239
    344a:	2a e0       	ldi	r18, 0x0A	; 10
    344c:	30 e0       	ldi	r19, 0x00	; 0
    344e:	1d c0       	rjmp	.+58     	; 0x348a <vfprintf+0x27a>
    3450:	1f 2d       	mov	r17, r15
    3452:	19 7f       	andi	r17, 0xF9	; 249
    3454:	9f 36       	cpi	r25, 0x6F	; 111
    3456:	61 f0       	breq	.+24     	; 0x3470 <vfprintf+0x260>
    3458:	90 37       	cpi	r25, 0x70	; 112
    345a:	20 f4       	brcc	.+8      	; 0x3464 <vfprintf+0x254>
    345c:	98 35       	cpi	r25, 0x58	; 88
    345e:	09 f0       	breq	.+2      	; 0x3462 <vfprintf+0x252>
    3460:	ac c0       	rjmp	.+344    	; 0x35ba <vfprintf+0x3aa>
    3462:	0f c0       	rjmp	.+30     	; 0x3482 <vfprintf+0x272>
    3464:	90 37       	cpi	r25, 0x70	; 112
    3466:	39 f0       	breq	.+14     	; 0x3476 <vfprintf+0x266>
    3468:	98 37       	cpi	r25, 0x78	; 120
    346a:	09 f0       	breq	.+2      	; 0x346e <vfprintf+0x25e>
    346c:	a6 c0       	rjmp	.+332    	; 0x35ba <vfprintf+0x3aa>
    346e:	04 c0       	rjmp	.+8      	; 0x3478 <vfprintf+0x268>
    3470:	28 e0       	ldi	r18, 0x08	; 8
    3472:	30 e0       	ldi	r19, 0x00	; 0
    3474:	0a c0       	rjmp	.+20     	; 0x348a <vfprintf+0x27a>
    3476:	10 61       	ori	r17, 0x10	; 16
    3478:	14 fd       	sbrc	r17, 4
    347a:	14 60       	ori	r17, 0x04	; 4
    347c:	20 e1       	ldi	r18, 0x10	; 16
    347e:	30 e0       	ldi	r19, 0x00	; 0
    3480:	04 c0       	rjmp	.+8      	; 0x348a <vfprintf+0x27a>
    3482:	14 fd       	sbrc	r17, 4
    3484:	16 60       	ori	r17, 0x06	; 6
    3486:	20 e1       	ldi	r18, 0x10	; 16
    3488:	32 e0       	ldi	r19, 0x02	; 2
    348a:	17 ff       	sbrs	r17, 7
    348c:	08 c0       	rjmp	.+16     	; 0x349e <vfprintf+0x28e>
    348e:	f5 01       	movw	r30, r10
    3490:	60 81       	ld	r22, Z
    3492:	71 81       	ldd	r23, Z+1	; 0x01
    3494:	82 81       	ldd	r24, Z+2	; 0x02
    3496:	93 81       	ldd	r25, Z+3	; 0x03
    3498:	44 e0       	ldi	r20, 0x04	; 4
    349a:	50 e0       	ldi	r21, 0x00	; 0
    349c:	08 c0       	rjmp	.+16     	; 0x34ae <vfprintf+0x29e>
    349e:	f5 01       	movw	r30, r10
    34a0:	80 81       	ld	r24, Z
    34a2:	91 81       	ldd	r25, Z+1	; 0x01
    34a4:	bc 01       	movw	r22, r24
    34a6:	80 e0       	ldi	r24, 0x00	; 0
    34a8:	90 e0       	ldi	r25, 0x00	; 0
    34aa:	42 e0       	ldi	r20, 0x02	; 2
    34ac:	50 e0       	ldi	r21, 0x00	; 0
    34ae:	a4 0e       	add	r10, r20
    34b0:	b5 1e       	adc	r11, r21
    34b2:	a1 01       	movw	r20, r2
    34b4:	0e 94 27 1b 	call	0x364e	; 0x364e <__ultoa_invert>
    34b8:	d8 2e       	mov	r13, r24
    34ba:	d2 18       	sub	r13, r2
    34bc:	8f e7       	ldi	r24, 0x7F	; 127
    34be:	f8 2e       	mov	r15, r24
    34c0:	f1 22       	and	r15, r17
    34c2:	f6 fe       	sbrs	r15, 6
    34c4:	0b c0       	rjmp	.+22     	; 0x34dc <vfprintf+0x2cc>
    34c6:	5e ef       	ldi	r21, 0xFE	; 254
    34c8:	f5 22       	and	r15, r21
    34ca:	d9 14       	cp	r13, r9
    34cc:	38 f4       	brcc	.+14     	; 0x34dc <vfprintf+0x2cc>
    34ce:	f4 fe       	sbrs	r15, 4
    34d0:	07 c0       	rjmp	.+14     	; 0x34e0 <vfprintf+0x2d0>
    34d2:	f2 fc       	sbrc	r15, 2
    34d4:	05 c0       	rjmp	.+10     	; 0x34e0 <vfprintf+0x2d0>
    34d6:	8f ee       	ldi	r24, 0xEF	; 239
    34d8:	f8 22       	and	r15, r24
    34da:	02 c0       	rjmp	.+4      	; 0x34e0 <vfprintf+0x2d0>
    34dc:	1d 2d       	mov	r17, r13
    34de:	01 c0       	rjmp	.+2      	; 0x34e2 <vfprintf+0x2d2>
    34e0:	19 2d       	mov	r17, r9
    34e2:	f4 fe       	sbrs	r15, 4
    34e4:	0d c0       	rjmp	.+26     	; 0x3500 <vfprintf+0x2f0>
    34e6:	fe 01       	movw	r30, r28
    34e8:	ed 0d       	add	r30, r13
    34ea:	f1 1d       	adc	r31, r1
    34ec:	80 81       	ld	r24, Z
    34ee:	80 33       	cpi	r24, 0x30	; 48
    34f0:	19 f4       	brne	.+6      	; 0x34f8 <vfprintf+0x2e8>
    34f2:	99 ee       	ldi	r25, 0xE9	; 233
    34f4:	f9 22       	and	r15, r25
    34f6:	08 c0       	rjmp	.+16     	; 0x3508 <vfprintf+0x2f8>
    34f8:	1f 5f       	subi	r17, 0xFF	; 255
    34fa:	f2 fe       	sbrs	r15, 2
    34fc:	05 c0       	rjmp	.+10     	; 0x3508 <vfprintf+0x2f8>
    34fe:	03 c0       	rjmp	.+6      	; 0x3506 <vfprintf+0x2f6>
    3500:	8f 2d       	mov	r24, r15
    3502:	86 78       	andi	r24, 0x86	; 134
    3504:	09 f0       	breq	.+2      	; 0x3508 <vfprintf+0x2f8>
    3506:	1f 5f       	subi	r17, 0xFF	; 255
    3508:	0f 2d       	mov	r16, r15
    350a:	f3 fc       	sbrc	r15, 3
    350c:	14 c0       	rjmp	.+40     	; 0x3536 <vfprintf+0x326>
    350e:	f0 fe       	sbrs	r15, 0
    3510:	0f c0       	rjmp	.+30     	; 0x3530 <vfprintf+0x320>
    3512:	1e 15       	cp	r17, r14
    3514:	10 f0       	brcs	.+4      	; 0x351a <vfprintf+0x30a>
    3516:	9d 2c       	mov	r9, r13
    3518:	0b c0       	rjmp	.+22     	; 0x3530 <vfprintf+0x320>
    351a:	9d 2c       	mov	r9, r13
    351c:	9e 0c       	add	r9, r14
    351e:	91 1a       	sub	r9, r17
    3520:	1e 2d       	mov	r17, r14
    3522:	06 c0       	rjmp	.+12     	; 0x3530 <vfprintf+0x320>
    3524:	80 e2       	ldi	r24, 0x20	; 32
    3526:	90 e0       	ldi	r25, 0x00	; 0
    3528:	b3 01       	movw	r22, r6
    352a:	0e 94 fb 1a 	call	0x35f6	; 0x35f6 <fputc>
    352e:	1f 5f       	subi	r17, 0xFF	; 255
    3530:	1e 15       	cp	r17, r14
    3532:	c0 f3       	brcs	.-16     	; 0x3524 <vfprintf+0x314>
    3534:	04 c0       	rjmp	.+8      	; 0x353e <vfprintf+0x32e>
    3536:	1e 15       	cp	r17, r14
    3538:	10 f4       	brcc	.+4      	; 0x353e <vfprintf+0x32e>
    353a:	e1 1a       	sub	r14, r17
    353c:	01 c0       	rjmp	.+2      	; 0x3540 <vfprintf+0x330>
    353e:	ee 24       	eor	r14, r14
    3540:	04 ff       	sbrs	r16, 4
    3542:	0f c0       	rjmp	.+30     	; 0x3562 <vfprintf+0x352>
    3544:	80 e3       	ldi	r24, 0x30	; 48
    3546:	90 e0       	ldi	r25, 0x00	; 0
    3548:	b3 01       	movw	r22, r6
    354a:	0e 94 fb 1a 	call	0x35f6	; 0x35f6 <fputc>
    354e:	02 ff       	sbrs	r16, 2
    3550:	1d c0       	rjmp	.+58     	; 0x358c <vfprintf+0x37c>
    3552:	01 fd       	sbrc	r16, 1
    3554:	03 c0       	rjmp	.+6      	; 0x355c <vfprintf+0x34c>
    3556:	88 e7       	ldi	r24, 0x78	; 120
    3558:	90 e0       	ldi	r25, 0x00	; 0
    355a:	0e c0       	rjmp	.+28     	; 0x3578 <vfprintf+0x368>
    355c:	88 e5       	ldi	r24, 0x58	; 88
    355e:	90 e0       	ldi	r25, 0x00	; 0
    3560:	0b c0       	rjmp	.+22     	; 0x3578 <vfprintf+0x368>
    3562:	80 2f       	mov	r24, r16
    3564:	86 78       	andi	r24, 0x86	; 134
    3566:	91 f0       	breq	.+36     	; 0x358c <vfprintf+0x37c>
    3568:	01 ff       	sbrs	r16, 1
    356a:	02 c0       	rjmp	.+4      	; 0x3570 <vfprintf+0x360>
    356c:	8b e2       	ldi	r24, 0x2B	; 43
    356e:	01 c0       	rjmp	.+2      	; 0x3572 <vfprintf+0x362>
    3570:	80 e2       	ldi	r24, 0x20	; 32
    3572:	f7 fc       	sbrc	r15, 7
    3574:	8d e2       	ldi	r24, 0x2D	; 45
    3576:	90 e0       	ldi	r25, 0x00	; 0
    3578:	b3 01       	movw	r22, r6
    357a:	0e 94 fb 1a 	call	0x35f6	; 0x35f6 <fputc>
    357e:	06 c0       	rjmp	.+12     	; 0x358c <vfprintf+0x37c>
    3580:	80 e3       	ldi	r24, 0x30	; 48
    3582:	90 e0       	ldi	r25, 0x00	; 0
    3584:	b3 01       	movw	r22, r6
    3586:	0e 94 fb 1a 	call	0x35f6	; 0x35f6 <fputc>
    358a:	9a 94       	dec	r9
    358c:	d9 14       	cp	r13, r9
    358e:	c0 f3       	brcs	.-16     	; 0x3580 <vfprintf+0x370>
    3590:	da 94       	dec	r13
    3592:	f1 01       	movw	r30, r2
    3594:	ed 0d       	add	r30, r13
    3596:	f1 1d       	adc	r31, r1
    3598:	80 81       	ld	r24, Z
    359a:	90 e0       	ldi	r25, 0x00	; 0
    359c:	b3 01       	movw	r22, r6
    359e:	0e 94 fb 1a 	call	0x35f6	; 0x35f6 <fputc>
    35a2:	dd 20       	and	r13, r13
    35a4:	a9 f7       	brne	.-22     	; 0x3590 <vfprintf+0x380>
    35a6:	06 c0       	rjmp	.+12     	; 0x35b4 <vfprintf+0x3a4>
    35a8:	80 e2       	ldi	r24, 0x20	; 32
    35aa:	90 e0       	ldi	r25, 0x00	; 0
    35ac:	b3 01       	movw	r22, r6
    35ae:	0e 94 fb 1a 	call	0x35f6	; 0x35f6 <fputc>
    35b2:	ea 94       	dec	r14
    35b4:	ee 20       	and	r14, r14
    35b6:	c1 f7       	brne	.-16     	; 0x35a8 <vfprintf+0x398>
    35b8:	43 ce       	rjmp	.-890    	; 0x3240 <vfprintf+0x30>
    35ba:	f3 01       	movw	r30, r6
    35bc:	66 81       	ldd	r22, Z+6	; 0x06
    35be:	77 81       	ldd	r23, Z+7	; 0x07
    35c0:	cb 01       	movw	r24, r22
    35c2:	2b 96       	adiw	r28, 0x0b	; 11
    35c4:	e2 e1       	ldi	r30, 0x12	; 18
    35c6:	0c 94 b7 17 	jmp	0x2f6e	; 0x2f6e <__epilogue_restores__>

000035ca <strnlen_P>:
    35ca:	fc 01       	movw	r30, r24
    35cc:	05 90       	lpm	r0, Z+
    35ce:	61 50       	subi	r22, 0x01	; 1
    35d0:	70 40       	sbci	r23, 0x00	; 0
    35d2:	01 10       	cpse	r0, r1
    35d4:	d8 f7       	brcc	.-10     	; 0x35cc <strnlen_P+0x2>
    35d6:	80 95       	com	r24
    35d8:	90 95       	com	r25
    35da:	8e 0f       	add	r24, r30
    35dc:	9f 1f       	adc	r25, r31
    35de:	08 95       	ret

000035e0 <strnlen>:
    35e0:	fc 01       	movw	r30, r24
    35e2:	61 50       	subi	r22, 0x01	; 1
    35e4:	70 40       	sbci	r23, 0x00	; 0
    35e6:	01 90       	ld	r0, Z+
    35e8:	01 10       	cpse	r0, r1
    35ea:	d8 f7       	brcc	.-10     	; 0x35e2 <strnlen+0x2>
    35ec:	80 95       	com	r24
    35ee:	90 95       	com	r25
    35f0:	8e 0f       	add	r24, r30
    35f2:	9f 1f       	adc	r25, r31
    35f4:	08 95       	ret

000035f6 <fputc>:
    35f6:	0f 93       	push	r16
    35f8:	1f 93       	push	r17
    35fa:	cf 93       	push	r28
    35fc:	df 93       	push	r29
    35fe:	8c 01       	movw	r16, r24
    3600:	eb 01       	movw	r28, r22
    3602:	8b 81       	ldd	r24, Y+3	; 0x03
    3604:	81 ff       	sbrs	r24, 1
    3606:	1b c0       	rjmp	.+54     	; 0x363e <fputc+0x48>
    3608:	82 ff       	sbrs	r24, 2
    360a:	0d c0       	rjmp	.+26     	; 0x3626 <fputc+0x30>
    360c:	2e 81       	ldd	r18, Y+6	; 0x06
    360e:	3f 81       	ldd	r19, Y+7	; 0x07
    3610:	8c 81       	ldd	r24, Y+4	; 0x04
    3612:	9d 81       	ldd	r25, Y+5	; 0x05
    3614:	28 17       	cp	r18, r24
    3616:	39 07       	cpc	r19, r25
    3618:	64 f4       	brge	.+24     	; 0x3632 <fputc+0x3c>
    361a:	e8 81       	ld	r30, Y
    361c:	f9 81       	ldd	r31, Y+1	; 0x01
    361e:	01 93       	st	Z+, r16
    3620:	f9 83       	std	Y+1, r31	; 0x01
    3622:	e8 83       	st	Y, r30
    3624:	06 c0       	rjmp	.+12     	; 0x3632 <fputc+0x3c>
    3626:	e8 85       	ldd	r30, Y+8	; 0x08
    3628:	f9 85       	ldd	r31, Y+9	; 0x09
    362a:	80 2f       	mov	r24, r16
    362c:	09 95       	icall
    362e:	89 2b       	or	r24, r25
    3630:	31 f4       	brne	.+12     	; 0x363e <fputc+0x48>
    3632:	8e 81       	ldd	r24, Y+6	; 0x06
    3634:	9f 81       	ldd	r25, Y+7	; 0x07
    3636:	01 96       	adiw	r24, 0x01	; 1
    3638:	9f 83       	std	Y+7, r25	; 0x07
    363a:	8e 83       	std	Y+6, r24	; 0x06
    363c:	02 c0       	rjmp	.+4      	; 0x3642 <fputc+0x4c>
    363e:	0f ef       	ldi	r16, 0xFF	; 255
    3640:	1f ef       	ldi	r17, 0xFF	; 255
    3642:	c8 01       	movw	r24, r16
    3644:	df 91       	pop	r29
    3646:	cf 91       	pop	r28
    3648:	1f 91       	pop	r17
    364a:	0f 91       	pop	r16
    364c:	08 95       	ret

0000364e <__ultoa_invert>:
    364e:	fa 01       	movw	r30, r20
    3650:	aa 27       	eor	r26, r26
    3652:	28 30       	cpi	r18, 0x08	; 8
    3654:	51 f1       	breq	.+84     	; 0x36aa <__ultoa_invert+0x5c>
    3656:	20 31       	cpi	r18, 0x10	; 16
    3658:	81 f1       	breq	.+96     	; 0x36ba <__ultoa_invert+0x6c>
    365a:	e8 94       	clt
    365c:	6f 93       	push	r22
    365e:	6e 7f       	andi	r22, 0xFE	; 254
    3660:	6e 5f       	subi	r22, 0xFE	; 254
    3662:	7f 4f       	sbci	r23, 0xFF	; 255
    3664:	8f 4f       	sbci	r24, 0xFF	; 255
    3666:	9f 4f       	sbci	r25, 0xFF	; 255
    3668:	af 4f       	sbci	r26, 0xFF	; 255
    366a:	b1 e0       	ldi	r27, 0x01	; 1
    366c:	3e d0       	rcall	.+124    	; 0x36ea <__ultoa_invert+0x9c>
    366e:	b4 e0       	ldi	r27, 0x04	; 4
    3670:	3c d0       	rcall	.+120    	; 0x36ea <__ultoa_invert+0x9c>
    3672:	67 0f       	add	r22, r23
    3674:	78 1f       	adc	r23, r24
    3676:	89 1f       	adc	r24, r25
    3678:	9a 1f       	adc	r25, r26
    367a:	a1 1d       	adc	r26, r1
    367c:	68 0f       	add	r22, r24
    367e:	79 1f       	adc	r23, r25
    3680:	8a 1f       	adc	r24, r26
    3682:	91 1d       	adc	r25, r1
    3684:	a1 1d       	adc	r26, r1
    3686:	6a 0f       	add	r22, r26
    3688:	71 1d       	adc	r23, r1
    368a:	81 1d       	adc	r24, r1
    368c:	91 1d       	adc	r25, r1
    368e:	a1 1d       	adc	r26, r1
    3690:	20 d0       	rcall	.+64     	; 0x36d2 <__ultoa_invert+0x84>
    3692:	09 f4       	brne	.+2      	; 0x3696 <__ultoa_invert+0x48>
    3694:	68 94       	set
    3696:	3f 91       	pop	r19
    3698:	2a e0       	ldi	r18, 0x0A	; 10
    369a:	26 9f       	mul	r18, r22
    369c:	11 24       	eor	r1, r1
    369e:	30 19       	sub	r19, r0
    36a0:	30 5d       	subi	r19, 0xD0	; 208
    36a2:	31 93       	st	Z+, r19
    36a4:	de f6       	brtc	.-74     	; 0x365c <__ultoa_invert+0xe>
    36a6:	cf 01       	movw	r24, r30
    36a8:	08 95       	ret
    36aa:	46 2f       	mov	r20, r22
    36ac:	47 70       	andi	r20, 0x07	; 7
    36ae:	40 5d       	subi	r20, 0xD0	; 208
    36b0:	41 93       	st	Z+, r20
    36b2:	b3 e0       	ldi	r27, 0x03	; 3
    36b4:	0f d0       	rcall	.+30     	; 0x36d4 <__ultoa_invert+0x86>
    36b6:	c9 f7       	brne	.-14     	; 0x36aa <__ultoa_invert+0x5c>
    36b8:	f6 cf       	rjmp	.-20     	; 0x36a6 <__ultoa_invert+0x58>
    36ba:	46 2f       	mov	r20, r22
    36bc:	4f 70       	andi	r20, 0x0F	; 15
    36be:	40 5d       	subi	r20, 0xD0	; 208
    36c0:	4a 33       	cpi	r20, 0x3A	; 58
    36c2:	18 f0       	brcs	.+6      	; 0x36ca <__ultoa_invert+0x7c>
    36c4:	49 5d       	subi	r20, 0xD9	; 217
    36c6:	31 fd       	sbrc	r19, 1
    36c8:	40 52       	subi	r20, 0x20	; 32
    36ca:	41 93       	st	Z+, r20
    36cc:	02 d0       	rcall	.+4      	; 0x36d2 <__ultoa_invert+0x84>
    36ce:	a9 f7       	brne	.-22     	; 0x36ba <__ultoa_invert+0x6c>
    36d0:	ea cf       	rjmp	.-44     	; 0x36a6 <__ultoa_invert+0x58>
    36d2:	b4 e0       	ldi	r27, 0x04	; 4
    36d4:	a6 95       	lsr	r26
    36d6:	97 95       	ror	r25
    36d8:	87 95       	ror	r24
    36da:	77 95       	ror	r23
    36dc:	67 95       	ror	r22
    36de:	ba 95       	dec	r27
    36e0:	c9 f7       	brne	.-14     	; 0x36d4 <__ultoa_invert+0x86>
    36e2:	00 97       	sbiw	r24, 0x00	; 0
    36e4:	61 05       	cpc	r22, r1
    36e6:	71 05       	cpc	r23, r1
    36e8:	08 95       	ret
    36ea:	9b 01       	movw	r18, r22
    36ec:	ac 01       	movw	r20, r24
    36ee:	0a 2e       	mov	r0, r26
    36f0:	06 94       	lsr	r0
    36f2:	57 95       	ror	r21
    36f4:	47 95       	ror	r20
    36f6:	37 95       	ror	r19
    36f8:	27 95       	ror	r18
    36fa:	ba 95       	dec	r27
    36fc:	c9 f7       	brne	.-14     	; 0x36f0 <__ultoa_invert+0xa2>
    36fe:	62 0f       	add	r22, r18
    3700:	73 1f       	adc	r23, r19
    3702:	84 1f       	adc	r24, r20
    3704:	95 1f       	adc	r25, r21
    3706:	a0 1d       	adc	r26, r0
    3708:	08 95       	ret

0000370a <_exit>:
    370a:	f8 94       	cli

0000370c <__stop_program>:
    370c:	ff cf       	rjmp	.-2      	; 0x370c <__stop_program>
