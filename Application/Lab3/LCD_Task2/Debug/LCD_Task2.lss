
LCD_Task2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002fa6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  00002fa6  0000303a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  0080007e  0080007e  00003058  2**0
                  ALLOC
  3 .stab         00001e48  00000000  00000000  00003058  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010d3  00000000  00000000  00004ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005f73  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000060b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006223  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007e6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008d57  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009b04  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009c64  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009ef1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a6bf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ea       	ldi	r30, 0xA6	; 166
      68:	ff e2       	ldi	r31, 0x2F	; 47
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 37       	cpi	r26, 0x7E	; 126
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae e7       	ldi	r26, 0x7E	; 126
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 38       	cpi	r26, 0x82	; 130
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 46 12 	call	0x248c	; 0x248c <main>
      8a:	0c 94 d1 17 	jmp	0x2fa2	; 0x2fa2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 e7 13 	jmp	0x27ce	; 0x27ce <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e7       	ldi	r26, 0x70	; 112
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 03 14 	jmp	0x2806	; 0x2806 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 f3 13 	jmp	0x27e6	; 0x27e6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 0f 14 	jmp	0x281e	; 0x281e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 f3 13 	jmp	0x27e6	; 0x27e6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 0f 14 	jmp	0x281e	; 0x281e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 e7 13 	jmp	0x27ce	; 0x27ce <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e7       	ldi	r24, 0x70	; 112
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 03 14 	jmp	0x2806	; 0x2806 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 f3 13 	jmp	0x27e6	; 0x27e6 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 0f 14 	jmp	0x281e	; 0x281e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 f3 13 	jmp	0x27e6	; 0x27e6 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 0f 14 	jmp	0x281e	; 0x281e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 f3 13 	jmp	0x27e6	; 0x27e6 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 0f 14 	jmp	0x281e	; 0x281e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 f7 13 	jmp	0x27ee	; 0x27ee <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 13 14 	jmp	0x2826	; 0x2826 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DIO_enuWriteChannel>:
#include <avr/io.h>
#include "Dio.h"
#include "Bit_utils.h"

Dio_tenuErrorStatus DIO_enuWriteChannel(u8 Copy_u8ChannelId, u8 Copy_u8ChannelLevel)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	27 97       	sbiw	r28, 0x07	; 7
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	8c 83       	std	Y+4, r24	; 0x04
     b5c:	6d 83       	std	Y+5, r22	; 0x05
	Dio_tenuErrorStatus Loc_enuReturnStatus = Dio_enuOK;
     b5e:	82 e0       	ldi	r24, 0x02	; 2
     b60:	8b 83       	std	Y+3, r24	; 0x03
	u8 Loc_u8Port;
	u8 Loc_u8Pin;

	if( Copy_u8ChannelId >= DIO_u8NUMBER_OF_PINS )
     b62:	8c 81       	ldd	r24, Y+4	; 0x04
     b64:	80 32       	cpi	r24, 0x20	; 32
     b66:	10 f0       	brcs	.+4      	; 0xb6c <DIO_enuWriteChannel+0x26>
	{
		Loc_enuReturnStatus = DioChannelIdError;
     b68:	1b 82       	std	Y+3, r1	; 0x03
     b6a:	e2 c0       	rjmp	.+452    	; 0xd30 <DIO_enuWriteChannel+0x1ea>
	}
	else if( ( Copy_u8ChannelLevel != DIO_u8LEVEL_ZERO ) && ( Copy_u8ChannelLevel != DIO_u8LEVEL_ONE ) )
     b6c:	8d 81       	ldd	r24, Y+5	; 0x05
     b6e:	88 23       	and	r24, r24
     b70:	31 f0       	breq	.+12     	; 0xb7e <DIO_enuWriteChannel+0x38>
     b72:	8d 81       	ldd	r24, Y+5	; 0x05
     b74:	81 30       	cpi	r24, 0x01	; 1
     b76:	19 f0       	breq	.+6      	; 0xb7e <DIO_enuWriteChannel+0x38>
	{
		Loc_enuReturnStatus = DioLevelError;
     b78:	81 e0       	ldi	r24, 0x01	; 1
     b7a:	8b 83       	std	Y+3, r24	; 0x03
     b7c:	d9 c0       	rjmp	.+434    	; 0xd30 <DIO_enuWriteChannel+0x1ea>
	}
	else
	{
		Loc_u8Port = Copy_u8ChannelId / 8 ;
     b7e:	8c 81       	ldd	r24, Y+4	; 0x04
     b80:	86 95       	lsr	r24
     b82:	86 95       	lsr	r24
     b84:	86 95       	lsr	r24
     b86:	8a 83       	std	Y+2, r24	; 0x02
		Loc_u8Pin = Copy_u8ChannelId % 8 ;
     b88:	8c 81       	ldd	r24, Y+4	; 0x04
     b8a:	87 70       	andi	r24, 0x07	; 7
     b8c:	89 83       	std	Y+1, r24	; 0x01

		switch(Loc_u8Port)
     b8e:	8a 81       	ldd	r24, Y+2	; 0x02
     b90:	28 2f       	mov	r18, r24
     b92:	30 e0       	ldi	r19, 0x00	; 0
     b94:	3f 83       	std	Y+7, r19	; 0x07
     b96:	2e 83       	std	Y+6, r18	; 0x06
     b98:	8e 81       	ldd	r24, Y+6	; 0x06
     b9a:	9f 81       	ldd	r25, Y+7	; 0x07
     b9c:	81 30       	cpi	r24, 0x01	; 1
     b9e:	91 05       	cpc	r25, r1
     ba0:	09 f4       	brne	.+2      	; 0xba4 <DIO_enuWriteChannel+0x5e>
     ba2:	43 c0       	rjmp	.+134    	; 0xc2a <DIO_enuWriteChannel+0xe4>
     ba4:	2e 81       	ldd	r18, Y+6	; 0x06
     ba6:	3f 81       	ldd	r19, Y+7	; 0x07
     ba8:	22 30       	cpi	r18, 0x02	; 2
     baa:	31 05       	cpc	r19, r1
     bac:	2c f4       	brge	.+10     	; 0xbb8 <DIO_enuWriteChannel+0x72>
     bae:	8e 81       	ldd	r24, Y+6	; 0x06
     bb0:	9f 81       	ldd	r25, Y+7	; 0x07
     bb2:	00 97       	sbiw	r24, 0x00	; 0
     bb4:	71 f0       	breq	.+28     	; 0xbd2 <DIO_enuWriteChannel+0x8c>
     bb6:	bc c0       	rjmp	.+376    	; 0xd30 <DIO_enuWriteChannel+0x1ea>
     bb8:	2e 81       	ldd	r18, Y+6	; 0x06
     bba:	3f 81       	ldd	r19, Y+7	; 0x07
     bbc:	22 30       	cpi	r18, 0x02	; 2
     bbe:	31 05       	cpc	r19, r1
     bc0:	09 f4       	brne	.+2      	; 0xbc4 <DIO_enuWriteChannel+0x7e>
     bc2:	5f c0       	rjmp	.+190    	; 0xc82 <DIO_enuWriteChannel+0x13c>
     bc4:	8e 81       	ldd	r24, Y+6	; 0x06
     bc6:	9f 81       	ldd	r25, Y+7	; 0x07
     bc8:	83 30       	cpi	r24, 0x03	; 3
     bca:	91 05       	cpc	r25, r1
     bcc:	09 f4       	brne	.+2      	; 0xbd0 <DIO_enuWriteChannel+0x8a>
     bce:	85 c0       	rjmp	.+266    	; 0xcda <DIO_enuWriteChannel+0x194>
     bd0:	af c0       	rjmp	.+350    	; 0xd30 <DIO_enuWriteChannel+0x1ea>
		{
			case DIO_u8PORT_A:
			{
				if(Copy_u8ChannelLevel == DIO_u8LEVEL_ONE)
     bd2:	8d 81       	ldd	r24, Y+5	; 0x05
     bd4:	81 30       	cpi	r24, 0x01	; 1
     bd6:	a1 f4       	brne	.+40     	; 0xc00 <DIO_enuWriteChannel+0xba>
				{
					SET_BIT(PORTA,Loc_u8Pin);
     bd8:	ab e3       	ldi	r26, 0x3B	; 59
     bda:	b0 e0       	ldi	r27, 0x00	; 0
     bdc:	eb e3       	ldi	r30, 0x3B	; 59
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	80 81       	ld	r24, Z
     be2:	48 2f       	mov	r20, r24
     be4:	89 81       	ldd	r24, Y+1	; 0x01
     be6:	28 2f       	mov	r18, r24
     be8:	30 e0       	ldi	r19, 0x00	; 0
     bea:	81 e0       	ldi	r24, 0x01	; 1
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	02 2e       	mov	r0, r18
     bf0:	02 c0       	rjmp	.+4      	; 0xbf6 <DIO_enuWriteChannel+0xb0>
     bf2:	88 0f       	add	r24, r24
     bf4:	99 1f       	adc	r25, r25
     bf6:	0a 94       	dec	r0
     bf8:	e2 f7       	brpl	.-8      	; 0xbf2 <DIO_enuWriteChannel+0xac>
     bfa:	84 2b       	or	r24, r20
     bfc:	8c 93       	st	X, r24
     bfe:	98 c0       	rjmp	.+304    	; 0xd30 <DIO_enuWriteChannel+0x1ea>
				}

				else
				{
					CLR_BIT(PORTA,Loc_u8Pin);
     c00:	ab e3       	ldi	r26, 0x3B	; 59
     c02:	b0 e0       	ldi	r27, 0x00	; 0
     c04:	eb e3       	ldi	r30, 0x3B	; 59
     c06:	f0 e0       	ldi	r31, 0x00	; 0
     c08:	80 81       	ld	r24, Z
     c0a:	48 2f       	mov	r20, r24
     c0c:	89 81       	ldd	r24, Y+1	; 0x01
     c0e:	28 2f       	mov	r18, r24
     c10:	30 e0       	ldi	r19, 0x00	; 0
     c12:	81 e0       	ldi	r24, 0x01	; 1
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	02 2e       	mov	r0, r18
     c18:	02 c0       	rjmp	.+4      	; 0xc1e <DIO_enuWriteChannel+0xd8>
     c1a:	88 0f       	add	r24, r24
     c1c:	99 1f       	adc	r25, r25
     c1e:	0a 94       	dec	r0
     c20:	e2 f7       	brpl	.-8      	; 0xc1a <DIO_enuWriteChannel+0xd4>
     c22:	80 95       	com	r24
     c24:	84 23       	and	r24, r20
     c26:	8c 93       	st	X, r24
     c28:	83 c0       	rjmp	.+262    	; 0xd30 <DIO_enuWriteChannel+0x1ea>
				break;
			}

			case DIO_u8PORT_B:
			{
				if(Copy_u8ChannelLevel == DIO_u8LEVEL_ONE)
     c2a:	8d 81       	ldd	r24, Y+5	; 0x05
     c2c:	81 30       	cpi	r24, 0x01	; 1
     c2e:	a1 f4       	brne	.+40     	; 0xc58 <DIO_enuWriteChannel+0x112>
				{
					SET_BIT(PORTB,Loc_u8Pin);
     c30:	a8 e3       	ldi	r26, 0x38	; 56
     c32:	b0 e0       	ldi	r27, 0x00	; 0
     c34:	e8 e3       	ldi	r30, 0x38	; 56
     c36:	f0 e0       	ldi	r31, 0x00	; 0
     c38:	80 81       	ld	r24, Z
     c3a:	48 2f       	mov	r20, r24
     c3c:	89 81       	ldd	r24, Y+1	; 0x01
     c3e:	28 2f       	mov	r18, r24
     c40:	30 e0       	ldi	r19, 0x00	; 0
     c42:	81 e0       	ldi	r24, 0x01	; 1
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	02 2e       	mov	r0, r18
     c48:	02 c0       	rjmp	.+4      	; 0xc4e <DIO_enuWriteChannel+0x108>
     c4a:	88 0f       	add	r24, r24
     c4c:	99 1f       	adc	r25, r25
     c4e:	0a 94       	dec	r0
     c50:	e2 f7       	brpl	.-8      	; 0xc4a <DIO_enuWriteChannel+0x104>
     c52:	84 2b       	or	r24, r20
     c54:	8c 93       	st	X, r24
     c56:	6c c0       	rjmp	.+216    	; 0xd30 <DIO_enuWriteChannel+0x1ea>
				}

				else
				{
					CLR_BIT(PORTB,Loc_u8Pin);
     c58:	a8 e3       	ldi	r26, 0x38	; 56
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	e8 e3       	ldi	r30, 0x38	; 56
     c5e:	f0 e0       	ldi	r31, 0x00	; 0
     c60:	80 81       	ld	r24, Z
     c62:	48 2f       	mov	r20, r24
     c64:	89 81       	ldd	r24, Y+1	; 0x01
     c66:	28 2f       	mov	r18, r24
     c68:	30 e0       	ldi	r19, 0x00	; 0
     c6a:	81 e0       	ldi	r24, 0x01	; 1
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	02 2e       	mov	r0, r18
     c70:	02 c0       	rjmp	.+4      	; 0xc76 <DIO_enuWriteChannel+0x130>
     c72:	88 0f       	add	r24, r24
     c74:	99 1f       	adc	r25, r25
     c76:	0a 94       	dec	r0
     c78:	e2 f7       	brpl	.-8      	; 0xc72 <DIO_enuWriteChannel+0x12c>
     c7a:	80 95       	com	r24
     c7c:	84 23       	and	r24, r20
     c7e:	8c 93       	st	X, r24
     c80:	57 c0       	rjmp	.+174    	; 0xd30 <DIO_enuWriteChannel+0x1ea>
				break;
			}

			case DIO_u8PORT_C:
			{
				if(Copy_u8ChannelLevel == DIO_u8LEVEL_ONE)
     c82:	8d 81       	ldd	r24, Y+5	; 0x05
     c84:	81 30       	cpi	r24, 0x01	; 1
     c86:	a1 f4       	brne	.+40     	; 0xcb0 <DIO_enuWriteChannel+0x16a>
				{
					SET_BIT(PORTC,Loc_u8Pin);
     c88:	a5 e3       	ldi	r26, 0x35	; 53
     c8a:	b0 e0       	ldi	r27, 0x00	; 0
     c8c:	e5 e3       	ldi	r30, 0x35	; 53
     c8e:	f0 e0       	ldi	r31, 0x00	; 0
     c90:	80 81       	ld	r24, Z
     c92:	48 2f       	mov	r20, r24
     c94:	89 81       	ldd	r24, Y+1	; 0x01
     c96:	28 2f       	mov	r18, r24
     c98:	30 e0       	ldi	r19, 0x00	; 0
     c9a:	81 e0       	ldi	r24, 0x01	; 1
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	02 2e       	mov	r0, r18
     ca0:	02 c0       	rjmp	.+4      	; 0xca6 <DIO_enuWriteChannel+0x160>
     ca2:	88 0f       	add	r24, r24
     ca4:	99 1f       	adc	r25, r25
     ca6:	0a 94       	dec	r0
     ca8:	e2 f7       	brpl	.-8      	; 0xca2 <DIO_enuWriteChannel+0x15c>
     caa:	84 2b       	or	r24, r20
     cac:	8c 93       	st	X, r24
     cae:	40 c0       	rjmp	.+128    	; 0xd30 <DIO_enuWriteChannel+0x1ea>
				}

				else
				{
					CLR_BIT(PORTC,Loc_u8Pin);
     cb0:	a5 e3       	ldi	r26, 0x35	; 53
     cb2:	b0 e0       	ldi	r27, 0x00	; 0
     cb4:	e5 e3       	ldi	r30, 0x35	; 53
     cb6:	f0 e0       	ldi	r31, 0x00	; 0
     cb8:	80 81       	ld	r24, Z
     cba:	48 2f       	mov	r20, r24
     cbc:	89 81       	ldd	r24, Y+1	; 0x01
     cbe:	28 2f       	mov	r18, r24
     cc0:	30 e0       	ldi	r19, 0x00	; 0
     cc2:	81 e0       	ldi	r24, 0x01	; 1
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	02 2e       	mov	r0, r18
     cc8:	02 c0       	rjmp	.+4      	; 0xcce <DIO_enuWriteChannel+0x188>
     cca:	88 0f       	add	r24, r24
     ccc:	99 1f       	adc	r25, r25
     cce:	0a 94       	dec	r0
     cd0:	e2 f7       	brpl	.-8      	; 0xcca <DIO_enuWriteChannel+0x184>
     cd2:	80 95       	com	r24
     cd4:	84 23       	and	r24, r20
     cd6:	8c 93       	st	X, r24
     cd8:	2b c0       	rjmp	.+86     	; 0xd30 <DIO_enuWriteChannel+0x1ea>
				break;
			}

			case DIO_u8PORT_D:
			{
				if(Copy_u8ChannelLevel == DIO_u8LEVEL_ONE)
     cda:	8d 81       	ldd	r24, Y+5	; 0x05
     cdc:	81 30       	cpi	r24, 0x01	; 1
     cde:	a1 f4       	brne	.+40     	; 0xd08 <DIO_enuWriteChannel+0x1c2>
				{
					SET_BIT(PORTD,Loc_u8Pin);
     ce0:	a2 e3       	ldi	r26, 0x32	; 50
     ce2:	b0 e0       	ldi	r27, 0x00	; 0
     ce4:	e2 e3       	ldi	r30, 0x32	; 50
     ce6:	f0 e0       	ldi	r31, 0x00	; 0
     ce8:	80 81       	ld	r24, Z
     cea:	48 2f       	mov	r20, r24
     cec:	89 81       	ldd	r24, Y+1	; 0x01
     cee:	28 2f       	mov	r18, r24
     cf0:	30 e0       	ldi	r19, 0x00	; 0
     cf2:	81 e0       	ldi	r24, 0x01	; 1
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	02 2e       	mov	r0, r18
     cf8:	02 c0       	rjmp	.+4      	; 0xcfe <DIO_enuWriteChannel+0x1b8>
     cfa:	88 0f       	add	r24, r24
     cfc:	99 1f       	adc	r25, r25
     cfe:	0a 94       	dec	r0
     d00:	e2 f7       	brpl	.-8      	; 0xcfa <DIO_enuWriteChannel+0x1b4>
     d02:	84 2b       	or	r24, r20
     d04:	8c 93       	st	X, r24
     d06:	14 c0       	rjmp	.+40     	; 0xd30 <DIO_enuWriteChannel+0x1ea>
				}

				else
				{
					CLR_BIT(PORTD,Loc_u8Pin);
     d08:	a2 e3       	ldi	r26, 0x32	; 50
     d0a:	b0 e0       	ldi	r27, 0x00	; 0
     d0c:	e2 e3       	ldi	r30, 0x32	; 50
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	80 81       	ld	r24, Z
     d12:	48 2f       	mov	r20, r24
     d14:	89 81       	ldd	r24, Y+1	; 0x01
     d16:	28 2f       	mov	r18, r24
     d18:	30 e0       	ldi	r19, 0x00	; 0
     d1a:	81 e0       	ldi	r24, 0x01	; 1
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	02 2e       	mov	r0, r18
     d20:	02 c0       	rjmp	.+4      	; 0xd26 <DIO_enuWriteChannel+0x1e0>
     d22:	88 0f       	add	r24, r24
     d24:	99 1f       	adc	r25, r25
     d26:	0a 94       	dec	r0
     d28:	e2 f7       	brpl	.-8      	; 0xd22 <DIO_enuWriteChannel+0x1dc>
     d2a:	80 95       	com	r24
     d2c:	84 23       	and	r24, r20
     d2e:	8c 93       	st	X, r24
				}
				break;
			}
		}
	}
	return Loc_enuReturnStatus;
     d30:	8b 81       	ldd	r24, Y+3	; 0x03
}
     d32:	27 96       	adiw	r28, 0x07	; 7
     d34:	0f b6       	in	r0, 0x3f	; 63
     d36:	f8 94       	cli
     d38:	de bf       	out	0x3e, r29	; 62
     d3a:	0f be       	out	0x3f, r0	; 63
     d3c:	cd bf       	out	0x3d, r28	; 61
     d3e:	cf 91       	pop	r28
     d40:	df 91       	pop	r29
     d42:	08 95       	ret

00000d44 <DIO_enuReadChannel>:
Dio_tenuErrorStatus DIO_enuReadChannel(u8 Copy_u8ChannelId, pu8 Copy_pu8ChannelLevel)
{
     d44:	df 93       	push	r29
     d46:	cf 93       	push	r28
     d48:	cd b7       	in	r28, 0x3d	; 61
     d4a:	de b7       	in	r29, 0x3e	; 62
     d4c:	28 97       	sbiw	r28, 0x08	; 8
     d4e:	0f b6       	in	r0, 0x3f	; 63
     d50:	f8 94       	cli
     d52:	de bf       	out	0x3e, r29	; 62
     d54:	0f be       	out	0x3f, r0	; 63
     d56:	cd bf       	out	0x3d, r28	; 61
     d58:	8c 83       	std	Y+4, r24	; 0x04
     d5a:	7e 83       	std	Y+6, r23	; 0x06
     d5c:	6d 83       	std	Y+5, r22	; 0x05
	Dio_tenuErrorStatus Loc_enuReturnStatus = Dio_enuOK;
     d5e:	82 e0       	ldi	r24, 0x02	; 2
     d60:	8b 83       	std	Y+3, r24	; 0x03

	u8 Loc_u8Port;
	u8 Loc_u8Pin;

	if(  Copy_u8ChannelId >= DIO_u8NUMBER_OF_PINS )
     d62:	8c 81       	ldd	r24, Y+4	; 0x04
     d64:	80 32       	cpi	r24, 0x20	; 32
     d66:	10 f0       	brcs	.+4      	; 0xd6c <DIO_enuReadChannel+0x28>
	{
		Loc_enuReturnStatus = DioChannelIdError;
     d68:	1b 82       	std	Y+3, r1	; 0x03
     d6a:	78 c0       	rjmp	.+240    	; 0xe5c <DIO_enuReadChannel+0x118>
	}

	else
	{
		Loc_u8Port = Copy_u8ChannelId / 8 ;
     d6c:	8c 81       	ldd	r24, Y+4	; 0x04
     d6e:	86 95       	lsr	r24
     d70:	86 95       	lsr	r24
     d72:	86 95       	lsr	r24
     d74:	8a 83       	std	Y+2, r24	; 0x02
		Loc_u8Pin = Copy_u8ChannelId % 8 ;
     d76:	8c 81       	ldd	r24, Y+4	; 0x04
     d78:	87 70       	andi	r24, 0x07	; 7
     d7a:	89 83       	std	Y+1, r24	; 0x01

		switch(Loc_u8Port)
     d7c:	8a 81       	ldd	r24, Y+2	; 0x02
     d7e:	28 2f       	mov	r18, r24
     d80:	30 e0       	ldi	r19, 0x00	; 0
     d82:	38 87       	std	Y+8, r19	; 0x08
     d84:	2f 83       	std	Y+7, r18	; 0x07
     d86:	4f 81       	ldd	r20, Y+7	; 0x07
     d88:	58 85       	ldd	r21, Y+8	; 0x08
     d8a:	41 30       	cpi	r20, 0x01	; 1
     d8c:	51 05       	cpc	r21, r1
     d8e:	59 f1       	breq	.+86     	; 0xde6 <DIO_enuReadChannel+0xa2>
     d90:	8f 81       	ldd	r24, Y+7	; 0x07
     d92:	98 85       	ldd	r25, Y+8	; 0x08
     d94:	82 30       	cpi	r24, 0x02	; 2
     d96:	91 05       	cpc	r25, r1
     d98:	34 f4       	brge	.+12     	; 0xda6 <DIO_enuReadChannel+0x62>
     d9a:	2f 81       	ldd	r18, Y+7	; 0x07
     d9c:	38 85       	ldd	r19, Y+8	; 0x08
     d9e:	21 15       	cp	r18, r1
     da0:	31 05       	cpc	r19, r1
     da2:	69 f0       	breq	.+26     	; 0xdbe <DIO_enuReadChannel+0x7a>
     da4:	5b c0       	rjmp	.+182    	; 0xe5c <DIO_enuReadChannel+0x118>
     da6:	4f 81       	ldd	r20, Y+7	; 0x07
     da8:	58 85       	ldd	r21, Y+8	; 0x08
     daa:	42 30       	cpi	r20, 0x02	; 2
     dac:	51 05       	cpc	r21, r1
     dae:	79 f1       	breq	.+94     	; 0xe0e <DIO_enuReadChannel+0xca>
     db0:	8f 81       	ldd	r24, Y+7	; 0x07
     db2:	98 85       	ldd	r25, Y+8	; 0x08
     db4:	83 30       	cpi	r24, 0x03	; 3
     db6:	91 05       	cpc	r25, r1
     db8:	09 f4       	brne	.+2      	; 0xdbc <DIO_enuReadChannel+0x78>
     dba:	3d c0       	rjmp	.+122    	; 0xe36 <DIO_enuReadChannel+0xf2>
     dbc:	4f c0       	rjmp	.+158    	; 0xe5c <DIO_enuReadChannel+0x118>
		{
			case DIO_u8PORT_A:
			{
				*Copy_pu8ChannelLevel = GET_BIT(PINA,Loc_u8Pin);
     dbe:	e9 e3       	ldi	r30, 0x39	; 57
     dc0:	f0 e0       	ldi	r31, 0x00	; 0
     dc2:	80 81       	ld	r24, Z
     dc4:	28 2f       	mov	r18, r24
     dc6:	30 e0       	ldi	r19, 0x00	; 0
     dc8:	89 81       	ldd	r24, Y+1	; 0x01
     dca:	88 2f       	mov	r24, r24
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	a9 01       	movw	r20, r18
     dd0:	02 c0       	rjmp	.+4      	; 0xdd6 <DIO_enuReadChannel+0x92>
     dd2:	55 95       	asr	r21
     dd4:	47 95       	ror	r20
     dd6:	8a 95       	dec	r24
     dd8:	e2 f7       	brpl	.-8      	; 0xdd2 <DIO_enuReadChannel+0x8e>
     dda:	ca 01       	movw	r24, r20
     ddc:	81 70       	andi	r24, 0x01	; 1
     dde:	ed 81       	ldd	r30, Y+5	; 0x05
     de0:	fe 81       	ldd	r31, Y+6	; 0x06
     de2:	80 83       	st	Z, r24
     de4:	3b c0       	rjmp	.+118    	; 0xe5c <DIO_enuReadChannel+0x118>
				break;
			}

			case DIO_u8PORT_B:
			{
				*Copy_pu8ChannelLevel = GET_BIT(PINB,Loc_u8Pin);
     de6:	e6 e3       	ldi	r30, 0x36	; 54
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	28 2f       	mov	r18, r24
     dee:	30 e0       	ldi	r19, 0x00	; 0
     df0:	89 81       	ldd	r24, Y+1	; 0x01
     df2:	88 2f       	mov	r24, r24
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	a9 01       	movw	r20, r18
     df8:	02 c0       	rjmp	.+4      	; 0xdfe <DIO_enuReadChannel+0xba>
     dfa:	55 95       	asr	r21
     dfc:	47 95       	ror	r20
     dfe:	8a 95       	dec	r24
     e00:	e2 f7       	brpl	.-8      	; 0xdfa <DIO_enuReadChannel+0xb6>
     e02:	ca 01       	movw	r24, r20
     e04:	81 70       	andi	r24, 0x01	; 1
     e06:	ed 81       	ldd	r30, Y+5	; 0x05
     e08:	fe 81       	ldd	r31, Y+6	; 0x06
     e0a:	80 83       	st	Z, r24
     e0c:	27 c0       	rjmp	.+78     	; 0xe5c <DIO_enuReadChannel+0x118>
				break;
			}

			case DIO_u8PORT_C:
			{
				*Copy_pu8ChannelLevel = GET_BIT(PINC,Loc_u8Pin);
     e0e:	e3 e3       	ldi	r30, 0x33	; 51
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	28 2f       	mov	r18, r24
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	89 81       	ldd	r24, Y+1	; 0x01
     e1a:	88 2f       	mov	r24, r24
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	a9 01       	movw	r20, r18
     e20:	02 c0       	rjmp	.+4      	; 0xe26 <DIO_enuReadChannel+0xe2>
     e22:	55 95       	asr	r21
     e24:	47 95       	ror	r20
     e26:	8a 95       	dec	r24
     e28:	e2 f7       	brpl	.-8      	; 0xe22 <DIO_enuReadChannel+0xde>
     e2a:	ca 01       	movw	r24, r20
     e2c:	81 70       	andi	r24, 0x01	; 1
     e2e:	ed 81       	ldd	r30, Y+5	; 0x05
     e30:	fe 81       	ldd	r31, Y+6	; 0x06
     e32:	80 83       	st	Z, r24
     e34:	13 c0       	rjmp	.+38     	; 0xe5c <DIO_enuReadChannel+0x118>
				break;
			}

			case DIO_u8PORT_D:
			{
				*Copy_pu8ChannelLevel = GET_BIT(PIND,Loc_u8Pin);
     e36:	e0 e3       	ldi	r30, 0x30	; 48
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	80 81       	ld	r24, Z
     e3c:	28 2f       	mov	r18, r24
     e3e:	30 e0       	ldi	r19, 0x00	; 0
     e40:	89 81       	ldd	r24, Y+1	; 0x01
     e42:	88 2f       	mov	r24, r24
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	a9 01       	movw	r20, r18
     e48:	02 c0       	rjmp	.+4      	; 0xe4e <DIO_enuReadChannel+0x10a>
     e4a:	55 95       	asr	r21
     e4c:	47 95       	ror	r20
     e4e:	8a 95       	dec	r24
     e50:	e2 f7       	brpl	.-8      	; 0xe4a <DIO_enuReadChannel+0x106>
     e52:	ca 01       	movw	r24, r20
     e54:	81 70       	andi	r24, 0x01	; 1
     e56:	ed 81       	ldd	r30, Y+5	; 0x05
     e58:	fe 81       	ldd	r31, Y+6	; 0x06
     e5a:	80 83       	st	Z, r24
				break;
			}
		}
	}
	return Loc_enuReturnStatus;
     e5c:	8b 81       	ldd	r24, Y+3	; 0x03
}
     e5e:	28 96       	adiw	r28, 0x08	; 8
     e60:	0f b6       	in	r0, 0x3f	; 63
     e62:	f8 94       	cli
     e64:	de bf       	out	0x3e, r29	; 62
     e66:	0f be       	out	0x3f, r0	; 63
     e68:	cd bf       	out	0x3d, r28	; 61
     e6a:	cf 91       	pop	r28
     e6c:	df 91       	pop	r29
     e6e:	08 95       	ret

00000e70 <DIO_enuWritePort>:
Dio_tenuErrorStatus DIO_enuWritePort(u8 Copy_u8PortId, u8 Copy_uPortLevel)
{
     e70:	df 93       	push	r29
     e72:	cf 93       	push	r28
     e74:	00 d0       	rcall	.+0      	; 0xe76 <DIO_enuWritePort+0x6>
     e76:	00 d0       	rcall	.+0      	; 0xe78 <DIO_enuWritePort+0x8>
     e78:	0f 92       	push	r0
     e7a:	cd b7       	in	r28, 0x3d	; 61
     e7c:	de b7       	in	r29, 0x3e	; 62
     e7e:	8a 83       	std	Y+2, r24	; 0x02
     e80:	6b 83       	std	Y+3, r22	; 0x03
	Dio_tenuErrorStatus Loc_enuReturnStatus = Dio_enuOK;
     e82:	82 e0       	ldi	r24, 0x02	; 2
     e84:	89 83       	std	Y+1, r24	; 0x01

	if( Copy_u8PortId >= DIO_u8PORT_NUMBER )
     e86:	8a 81       	ldd	r24, Y+2	; 0x02
     e88:	84 30       	cpi	r24, 0x04	; 4
     e8a:	10 f0       	brcs	.+4      	; 0xe90 <DIO_enuWritePort+0x20>
	{
		Loc_enuReturnStatus = DioChannelIdError;
     e8c:	19 82       	std	Y+1, r1	; 0x01
     e8e:	32 c0       	rjmp	.+100    	; 0xef4 <DIO_enuWritePort+0x84>
	}

	else
	{

		switch(Copy_u8PortId)
     e90:	8a 81       	ldd	r24, Y+2	; 0x02
     e92:	28 2f       	mov	r18, r24
     e94:	30 e0       	ldi	r19, 0x00	; 0
     e96:	3d 83       	std	Y+5, r19	; 0x05
     e98:	2c 83       	std	Y+4, r18	; 0x04
     e9a:	8c 81       	ldd	r24, Y+4	; 0x04
     e9c:	9d 81       	ldd	r25, Y+5	; 0x05
     e9e:	81 30       	cpi	r24, 0x01	; 1
     ea0:	91 05       	cpc	r25, r1
     ea2:	d1 f0       	breq	.+52     	; 0xed8 <DIO_enuWritePort+0x68>
     ea4:	2c 81       	ldd	r18, Y+4	; 0x04
     ea6:	3d 81       	ldd	r19, Y+5	; 0x05
     ea8:	22 30       	cpi	r18, 0x02	; 2
     eaa:	31 05       	cpc	r19, r1
     eac:	2c f4       	brge	.+10     	; 0xeb8 <DIO_enuWritePort+0x48>
     eae:	8c 81       	ldd	r24, Y+4	; 0x04
     eb0:	9d 81       	ldd	r25, Y+5	; 0x05
     eb2:	00 97       	sbiw	r24, 0x00	; 0
     eb4:	61 f0       	breq	.+24     	; 0xece <DIO_enuWritePort+0x5e>
     eb6:	1e c0       	rjmp	.+60     	; 0xef4 <DIO_enuWritePort+0x84>
     eb8:	2c 81       	ldd	r18, Y+4	; 0x04
     eba:	3d 81       	ldd	r19, Y+5	; 0x05
     ebc:	22 30       	cpi	r18, 0x02	; 2
     ebe:	31 05       	cpc	r19, r1
     ec0:	81 f0       	breq	.+32     	; 0xee2 <DIO_enuWritePort+0x72>
     ec2:	8c 81       	ldd	r24, Y+4	; 0x04
     ec4:	9d 81       	ldd	r25, Y+5	; 0x05
     ec6:	83 30       	cpi	r24, 0x03	; 3
     ec8:	91 05       	cpc	r25, r1
     eca:	81 f0       	breq	.+32     	; 0xeec <DIO_enuWritePort+0x7c>
     ecc:	13 c0       	rjmp	.+38     	; 0xef4 <DIO_enuWritePort+0x84>
		{
			case DIO_u8PORT_A:
			{
				PORTA = Copy_uPortLevel ;
     ece:	eb e3       	ldi	r30, 0x3B	; 59
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	8b 81       	ldd	r24, Y+3	; 0x03
     ed4:	80 83       	st	Z, r24
     ed6:	0e c0       	rjmp	.+28     	; 0xef4 <DIO_enuWritePort+0x84>
				break;
			}

			case DIO_u8PORT_B:
			{
				PORTB = Copy_uPortLevel ;
     ed8:	e8 e3       	ldi	r30, 0x38	; 56
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	8b 81       	ldd	r24, Y+3	; 0x03
     ede:	80 83       	st	Z, r24
     ee0:	09 c0       	rjmp	.+18     	; 0xef4 <DIO_enuWritePort+0x84>
				break;
			}

			case DIO_u8PORT_C:
			{
				PORTC = Copy_uPortLevel ;
     ee2:	e5 e3       	ldi	r30, 0x35	; 53
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	8b 81       	ldd	r24, Y+3	; 0x03
     ee8:	80 83       	st	Z, r24
     eea:	04 c0       	rjmp	.+8      	; 0xef4 <DIO_enuWritePort+0x84>
				break;
			}

			case DIO_u8PORT_D:
			{
				PORTD = Copy_uPortLevel ;
     eec:	e2 e3       	ldi	r30, 0x32	; 50
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	8b 81       	ldd	r24, Y+3	; 0x03
     ef2:	80 83       	st	Z, r24
				break;
			}
		}
	}
	return Loc_enuReturnStatus;
     ef4:	89 81       	ldd	r24, Y+1	; 0x01
}
     ef6:	0f 90       	pop	r0
     ef8:	0f 90       	pop	r0
     efa:	0f 90       	pop	r0
     efc:	0f 90       	pop	r0
     efe:	0f 90       	pop	r0
     f00:	cf 91       	pop	r28
     f02:	df 91       	pop	r29
     f04:	08 95       	ret

00000f06 <DIO_enuReadPort>:


Dio_tenuErrorStatus DIO_enuReadPort(u8 Copy_u8PortId, pu8 Copy_pu8PortLevel)
{
     f06:	df 93       	push	r29
     f08:	cf 93       	push	r28
     f0a:	00 d0       	rcall	.+0      	; 0xf0c <DIO_enuReadPort+0x6>
     f0c:	00 d0       	rcall	.+0      	; 0xf0e <DIO_enuReadPort+0x8>
     f0e:	00 d0       	rcall	.+0      	; 0xf10 <DIO_enuReadPort+0xa>
     f10:	cd b7       	in	r28, 0x3d	; 61
     f12:	de b7       	in	r29, 0x3e	; 62
     f14:	8a 83       	std	Y+2, r24	; 0x02
     f16:	7c 83       	std	Y+4, r23	; 0x04
     f18:	6b 83       	std	Y+3, r22	; 0x03
	Dio_tenuErrorStatus Loc_enuReturnStatus = Dio_enuOK;
     f1a:	82 e0       	ldi	r24, 0x02	; 2
     f1c:	89 83       	std	Y+1, r24	; 0x01


	if(  Copy_u8PortId >= DIO_u8PORT_NUMBER )
     f1e:	8a 81       	ldd	r24, Y+2	; 0x02
     f20:	84 30       	cpi	r24, 0x04	; 4
     f22:	10 f0       	brcs	.+4      	; 0xf28 <DIO_enuReadPort+0x22>
	{
		Loc_enuReturnStatus = DioChannelIdError;
     f24:	19 82       	std	Y+1, r1	; 0x01
     f26:	3a c0       	rjmp	.+116    	; 0xf9c <DIO_enuReadPort+0x96>
	}

	else
	{
		switch(Copy_u8PortId)
     f28:	8a 81       	ldd	r24, Y+2	; 0x02
     f2a:	28 2f       	mov	r18, r24
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	3e 83       	std	Y+6, r19	; 0x06
     f30:	2d 83       	std	Y+5, r18	; 0x05
     f32:	8d 81       	ldd	r24, Y+5	; 0x05
     f34:	9e 81       	ldd	r25, Y+6	; 0x06
     f36:	81 30       	cpi	r24, 0x01	; 1
     f38:	91 05       	cpc	r25, r1
     f3a:	e1 f0       	breq	.+56     	; 0xf74 <DIO_enuReadPort+0x6e>
     f3c:	2d 81       	ldd	r18, Y+5	; 0x05
     f3e:	3e 81       	ldd	r19, Y+6	; 0x06
     f40:	22 30       	cpi	r18, 0x02	; 2
     f42:	31 05       	cpc	r19, r1
     f44:	2c f4       	brge	.+10     	; 0xf50 <DIO_enuReadPort+0x4a>
     f46:	8d 81       	ldd	r24, Y+5	; 0x05
     f48:	9e 81       	ldd	r25, Y+6	; 0x06
     f4a:	00 97       	sbiw	r24, 0x00	; 0
     f4c:	61 f0       	breq	.+24     	; 0xf66 <DIO_enuReadPort+0x60>
     f4e:	26 c0       	rjmp	.+76     	; 0xf9c <DIO_enuReadPort+0x96>
     f50:	2d 81       	ldd	r18, Y+5	; 0x05
     f52:	3e 81       	ldd	r19, Y+6	; 0x06
     f54:	22 30       	cpi	r18, 0x02	; 2
     f56:	31 05       	cpc	r19, r1
     f58:	a1 f0       	breq	.+40     	; 0xf82 <DIO_enuReadPort+0x7c>
     f5a:	8d 81       	ldd	r24, Y+5	; 0x05
     f5c:	9e 81       	ldd	r25, Y+6	; 0x06
     f5e:	83 30       	cpi	r24, 0x03	; 3
     f60:	91 05       	cpc	r25, r1
     f62:	b1 f0       	breq	.+44     	; 0xf90 <DIO_enuReadPort+0x8a>
     f64:	1b c0       	rjmp	.+54     	; 0xf9c <DIO_enuReadPort+0x96>
		{
			case DIO_u8PORT_A:
			{
				*Copy_pu8PortLevel = PINA;
     f66:	e9 e3       	ldi	r30, 0x39	; 57
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	80 81       	ld	r24, Z
     f6c:	eb 81       	ldd	r30, Y+3	; 0x03
     f6e:	fc 81       	ldd	r31, Y+4	; 0x04
     f70:	80 83       	st	Z, r24
     f72:	14 c0       	rjmp	.+40     	; 0xf9c <DIO_enuReadPort+0x96>
				break;
			}

			case DIO_u8PORT_B:
			{
				*Copy_pu8PortLevel = PINB;
     f74:	e6 e3       	ldi	r30, 0x36	; 54
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	80 81       	ld	r24, Z
     f7a:	eb 81       	ldd	r30, Y+3	; 0x03
     f7c:	fc 81       	ldd	r31, Y+4	; 0x04
     f7e:	80 83       	st	Z, r24
     f80:	0d c0       	rjmp	.+26     	; 0xf9c <DIO_enuReadPort+0x96>
				break;
			}

			case DIO_u8PORT_C:
			{
				*Copy_pu8PortLevel = PINC;
     f82:	e3 e3       	ldi	r30, 0x33	; 51
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	80 81       	ld	r24, Z
     f88:	eb 81       	ldd	r30, Y+3	; 0x03
     f8a:	fc 81       	ldd	r31, Y+4	; 0x04
     f8c:	80 83       	st	Z, r24
     f8e:	06 c0       	rjmp	.+12     	; 0xf9c <DIO_enuReadPort+0x96>
				break;
			}

			case DIO_u8PORT_D:
			{
				*Copy_pu8PortLevel = PIND;
     f90:	e0 e3       	ldi	r30, 0x30	; 48
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 81       	ld	r24, Z
     f96:	eb 81       	ldd	r30, Y+3	; 0x03
     f98:	fc 81       	ldd	r31, Y+4	; 0x04
     f9a:	80 83       	st	Z, r24
				break;
			}
		}
	}
	return Loc_enuReturnStatus;
     f9c:	89 81       	ldd	r24, Y+1	; 0x01
}
     f9e:	26 96       	adiw	r28, 0x06	; 6
     fa0:	0f b6       	in	r0, 0x3f	; 63
     fa2:	f8 94       	cli
     fa4:	de bf       	out	0x3e, r29	; 62
     fa6:	0f be       	out	0x3f, r0	; 63
     fa8:	cd bf       	out	0x3d, r28	; 61
     faa:	cf 91       	pop	r28
     fac:	df 91       	pop	r29
     fae:	08 95       	ret

00000fb0 <DIO_enuFlipChannel>:

Dio_tenuErrorStatus DIO_enuFlipChannel(u8 Copy_u8ChannelId)
{
     fb0:	df 93       	push	r29
     fb2:	cf 93       	push	r28
     fb4:	00 d0       	rcall	.+0      	; 0xfb6 <DIO_enuFlipChannel+0x6>
     fb6:	00 d0       	rcall	.+0      	; 0xfb8 <DIO_enuFlipChannel+0x8>
     fb8:	00 d0       	rcall	.+0      	; 0xfba <DIO_enuFlipChannel+0xa>
     fba:	cd b7       	in	r28, 0x3d	; 61
     fbc:	de b7       	in	r29, 0x3e	; 62
     fbe:	8c 83       	std	Y+4, r24	; 0x04
	Dio_tenuErrorStatus Loc_enuReturnStatus = Dio_enuOK;
     fc0:	82 e0       	ldi	r24, 0x02	; 2
     fc2:	8b 83       	std	Y+3, r24	; 0x03

	u8 Loc_u8Port;
	u8 Loc_u8Pin;

	if(  Copy_u8ChannelId >= DIO_u8NUMBER_OF_PINS  )
     fc4:	8c 81       	ldd	r24, Y+4	; 0x04
     fc6:	80 32       	cpi	r24, 0x20	; 32
     fc8:	10 f0       	brcs	.+4      	; 0xfce <DIO_enuFlipChannel+0x1e>
	{
		Loc_enuReturnStatus = DioChannelIdError;
     fca:	1b 82       	std	Y+3, r1	; 0x03
     fcc:	76 c0       	rjmp	.+236    	; 0x10ba <DIO_enuFlipChannel+0x10a>
	}

	else
	{
		Loc_u8Port = Copy_u8ChannelId / 8 ;
     fce:	8c 81       	ldd	r24, Y+4	; 0x04
     fd0:	86 95       	lsr	r24
     fd2:	86 95       	lsr	r24
     fd4:	86 95       	lsr	r24
     fd6:	8a 83       	std	Y+2, r24	; 0x02
		Loc_u8Pin = Copy_u8ChannelId % 8 ;
     fd8:	8c 81       	ldd	r24, Y+4	; 0x04
     fda:	87 70       	andi	r24, 0x07	; 7
     fdc:	89 83       	std	Y+1, r24	; 0x01

		switch(Loc_u8Port)
     fde:	8a 81       	ldd	r24, Y+2	; 0x02
     fe0:	28 2f       	mov	r18, r24
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	3e 83       	std	Y+6, r19	; 0x06
     fe6:	2d 83       	std	Y+5, r18	; 0x05
     fe8:	8d 81       	ldd	r24, Y+5	; 0x05
     fea:	9e 81       	ldd	r25, Y+6	; 0x06
     fec:	81 30       	cpi	r24, 0x01	; 1
     fee:	91 05       	cpc	r25, r1
     ff0:	49 f1       	breq	.+82     	; 0x1044 <DIO_enuFlipChannel+0x94>
     ff2:	2d 81       	ldd	r18, Y+5	; 0x05
     ff4:	3e 81       	ldd	r19, Y+6	; 0x06
     ff6:	22 30       	cpi	r18, 0x02	; 2
     ff8:	31 05       	cpc	r19, r1
     ffa:	2c f4       	brge	.+10     	; 0x1006 <DIO_enuFlipChannel+0x56>
     ffc:	8d 81       	ldd	r24, Y+5	; 0x05
     ffe:	9e 81       	ldd	r25, Y+6	; 0x06
    1000:	00 97       	sbiw	r24, 0x00	; 0
    1002:	61 f0       	breq	.+24     	; 0x101c <DIO_enuFlipChannel+0x6c>
    1004:	5a c0       	rjmp	.+180    	; 0x10ba <DIO_enuFlipChannel+0x10a>
    1006:	2d 81       	ldd	r18, Y+5	; 0x05
    1008:	3e 81       	ldd	r19, Y+6	; 0x06
    100a:	22 30       	cpi	r18, 0x02	; 2
    100c:	31 05       	cpc	r19, r1
    100e:	71 f1       	breq	.+92     	; 0x106c <DIO_enuFlipChannel+0xbc>
    1010:	8d 81       	ldd	r24, Y+5	; 0x05
    1012:	9e 81       	ldd	r25, Y+6	; 0x06
    1014:	83 30       	cpi	r24, 0x03	; 3
    1016:	91 05       	cpc	r25, r1
    1018:	e9 f1       	breq	.+122    	; 0x1094 <DIO_enuFlipChannel+0xe4>
    101a:	4f c0       	rjmp	.+158    	; 0x10ba <DIO_enuFlipChannel+0x10a>
		{
			case DIO_u8PORT_A:
			{
				TGL_BIT(PINA,Loc_u8Pin);
    101c:	a9 e3       	ldi	r26, 0x39	; 57
    101e:	b0 e0       	ldi	r27, 0x00	; 0
    1020:	e9 e3       	ldi	r30, 0x39	; 57
    1022:	f0 e0       	ldi	r31, 0x00	; 0
    1024:	80 81       	ld	r24, Z
    1026:	48 2f       	mov	r20, r24
    1028:	89 81       	ldd	r24, Y+1	; 0x01
    102a:	28 2f       	mov	r18, r24
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	81 e0       	ldi	r24, 0x01	; 1
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	02 2e       	mov	r0, r18
    1034:	02 c0       	rjmp	.+4      	; 0x103a <DIO_enuFlipChannel+0x8a>
    1036:	88 0f       	add	r24, r24
    1038:	99 1f       	adc	r25, r25
    103a:	0a 94       	dec	r0
    103c:	e2 f7       	brpl	.-8      	; 0x1036 <DIO_enuFlipChannel+0x86>
    103e:	84 27       	eor	r24, r20
    1040:	8c 93       	st	X, r24
    1042:	3b c0       	rjmp	.+118    	; 0x10ba <DIO_enuFlipChannel+0x10a>
				break;
			}

			case DIO_u8PORT_B:
			{
				TGL_BIT(PINB,Loc_u8Pin);
    1044:	a6 e3       	ldi	r26, 0x36	; 54
    1046:	b0 e0       	ldi	r27, 0x00	; 0
    1048:	e6 e3       	ldi	r30, 0x36	; 54
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	80 81       	ld	r24, Z
    104e:	48 2f       	mov	r20, r24
    1050:	89 81       	ldd	r24, Y+1	; 0x01
    1052:	28 2f       	mov	r18, r24
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	81 e0       	ldi	r24, 0x01	; 1
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	02 2e       	mov	r0, r18
    105c:	02 c0       	rjmp	.+4      	; 0x1062 <DIO_enuFlipChannel+0xb2>
    105e:	88 0f       	add	r24, r24
    1060:	99 1f       	adc	r25, r25
    1062:	0a 94       	dec	r0
    1064:	e2 f7       	brpl	.-8      	; 0x105e <DIO_enuFlipChannel+0xae>
    1066:	84 27       	eor	r24, r20
    1068:	8c 93       	st	X, r24
    106a:	27 c0       	rjmp	.+78     	; 0x10ba <DIO_enuFlipChannel+0x10a>
				break;
			}

			case DIO_u8PORT_C:
			{
				TGL_BIT(PINC,Loc_u8Pin);
    106c:	a3 e3       	ldi	r26, 0x33	; 51
    106e:	b0 e0       	ldi	r27, 0x00	; 0
    1070:	e3 e3       	ldi	r30, 0x33	; 51
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	80 81       	ld	r24, Z
    1076:	48 2f       	mov	r20, r24
    1078:	89 81       	ldd	r24, Y+1	; 0x01
    107a:	28 2f       	mov	r18, r24
    107c:	30 e0       	ldi	r19, 0x00	; 0
    107e:	81 e0       	ldi	r24, 0x01	; 1
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	02 2e       	mov	r0, r18
    1084:	02 c0       	rjmp	.+4      	; 0x108a <DIO_enuFlipChannel+0xda>
    1086:	88 0f       	add	r24, r24
    1088:	99 1f       	adc	r25, r25
    108a:	0a 94       	dec	r0
    108c:	e2 f7       	brpl	.-8      	; 0x1086 <DIO_enuFlipChannel+0xd6>
    108e:	84 27       	eor	r24, r20
    1090:	8c 93       	st	X, r24
    1092:	13 c0       	rjmp	.+38     	; 0x10ba <DIO_enuFlipChannel+0x10a>
				break;
			}

			case DIO_u8PORT_D:
			{
				TGL_BIT(PIND,Loc_u8Pin);
    1094:	a0 e3       	ldi	r26, 0x30	; 48
    1096:	b0 e0       	ldi	r27, 0x00	; 0
    1098:	e0 e3       	ldi	r30, 0x30	; 48
    109a:	f0 e0       	ldi	r31, 0x00	; 0
    109c:	80 81       	ld	r24, Z
    109e:	48 2f       	mov	r20, r24
    10a0:	89 81       	ldd	r24, Y+1	; 0x01
    10a2:	28 2f       	mov	r18, r24
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	81 e0       	ldi	r24, 0x01	; 1
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	02 2e       	mov	r0, r18
    10ac:	02 c0       	rjmp	.+4      	; 0x10b2 <DIO_enuFlipChannel+0x102>
    10ae:	88 0f       	add	r24, r24
    10b0:	99 1f       	adc	r25, r25
    10b2:	0a 94       	dec	r0
    10b4:	e2 f7       	brpl	.-8      	; 0x10ae <DIO_enuFlipChannel+0xfe>
    10b6:	84 27       	eor	r24, r20
    10b8:	8c 93       	st	X, r24
				break;
			}
		}
	}

	return Loc_enuReturnStatus;
    10ba:	8b 81       	ldd	r24, Y+3	; 0x03
}
    10bc:	26 96       	adiw	r28, 0x06	; 6
    10be:	0f b6       	in	r0, 0x3f	; 63
    10c0:	f8 94       	cli
    10c2:	de bf       	out	0x3e, r29	; 62
    10c4:	0f be       	out	0x3f, r0	; 63
    10c6:	cd bf       	out	0x3d, r28	; 61
    10c8:	cf 91       	pop	r28
    10ca:	df 91       	pop	r29
    10cc:	08 95       	ret

000010ce <Lcd_vidInit>:
#include <stdio.h>
#include <stdlib.h>

//////////////////////////////////////////////////////////////////////
void Lcd_vidInit()
{
    10ce:	df 93       	push	r29
    10d0:	cf 93       	push	r28
    10d2:	cd b7       	in	r28, 0x3d	; 61
    10d4:	de b7       	in	r29, 0x3e	; 62
    10d6:	e8 97       	sbiw	r28, 0x38	; 56
    10d8:	0f b6       	in	r0, 0x3f	; 63
    10da:	f8 94       	cli
    10dc:	de bf       	out	0x3e, r29	; 62
    10de:	0f be       	out	0x3f, r0	; 63
    10e0:	cd bf       	out	0x3d, r28	; 61
	Port_enuSetPinDirection( LCD_u8RW , PORT_u8PIN_OUTPUT );
    10e2:	8a e0       	ldi	r24, 0x0A	; 10
    10e4:	61 e0       	ldi	r22, 0x01	; 1
    10e6:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <Port_enuSetPinDirection>
	Port_enuSetPinDirection( LCD_u8RS , PORT_u8PIN_OUTPUT );
    10ea:	89 e0       	ldi	r24, 0x09	; 9
    10ec:	61 e0       	ldi	r22, 0x01	; 1
    10ee:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <Port_enuSetPinDirection>
	Port_enuSetPinDirection( LCD_u8ENABLE , PORT_u8PIN_OUTPUT );
    10f2:	88 e0       	ldi	r24, 0x08	; 8
    10f4:	61 e0       	ldi	r22, 0x01	; 1
    10f6:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <Port_enuSetPinDirection>
    10fa:	80 e0       	ldi	r24, 0x00	; 0
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	a8 e4       	ldi	r26, 0x48	; 72
    1100:	b2 e4       	ldi	r27, 0x42	; 66
    1102:	8d ab       	std	Y+53, r24	; 0x35
    1104:	9e ab       	std	Y+54, r25	; 0x36
    1106:	af ab       	std	Y+55, r26	; 0x37
    1108:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    110a:	6d a9       	ldd	r22, Y+53	; 0x35
    110c:	7e a9       	ldd	r23, Y+54	; 0x36
    110e:	8f a9       	ldd	r24, Y+55	; 0x37
    1110:	98 ad       	ldd	r25, Y+56	; 0x38
    1112:	20 e0       	ldi	r18, 0x00	; 0
    1114:	30 e0       	ldi	r19, 0x00	; 0
    1116:	4a e7       	ldi	r20, 0x7A	; 122
    1118:	55 e4       	ldi	r21, 0x45	; 69
    111a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    111e:	dc 01       	movw	r26, r24
    1120:	cb 01       	movw	r24, r22
    1122:	89 ab       	std	Y+49, r24	; 0x31
    1124:	9a ab       	std	Y+50, r25	; 0x32
    1126:	ab ab       	std	Y+51, r26	; 0x33
    1128:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    112a:	69 a9       	ldd	r22, Y+49	; 0x31
    112c:	7a a9       	ldd	r23, Y+50	; 0x32
    112e:	8b a9       	ldd	r24, Y+51	; 0x33
    1130:	9c a9       	ldd	r25, Y+52	; 0x34
    1132:	20 e0       	ldi	r18, 0x00	; 0
    1134:	30 e0       	ldi	r19, 0x00	; 0
    1136:	40 e8       	ldi	r20, 0x80	; 128
    1138:	5f e3       	ldi	r21, 0x3F	; 63
    113a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    113e:	88 23       	and	r24, r24
    1140:	2c f4       	brge	.+10     	; 0x114c <Lcd_vidInit+0x7e>
		__ticks = 1;
    1142:	81 e0       	ldi	r24, 0x01	; 1
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	98 ab       	std	Y+48, r25	; 0x30
    1148:	8f a7       	std	Y+47, r24	; 0x2f
    114a:	3f c0       	rjmp	.+126    	; 0x11ca <Lcd_vidInit+0xfc>
	else if (__tmp > 65535)
    114c:	69 a9       	ldd	r22, Y+49	; 0x31
    114e:	7a a9       	ldd	r23, Y+50	; 0x32
    1150:	8b a9       	ldd	r24, Y+51	; 0x33
    1152:	9c a9       	ldd	r25, Y+52	; 0x34
    1154:	20 e0       	ldi	r18, 0x00	; 0
    1156:	3f ef       	ldi	r19, 0xFF	; 255
    1158:	4f e7       	ldi	r20, 0x7F	; 127
    115a:	57 e4       	ldi	r21, 0x47	; 71
    115c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1160:	18 16       	cp	r1, r24
    1162:	4c f5       	brge	.+82     	; 0x11b6 <Lcd_vidInit+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1164:	6d a9       	ldd	r22, Y+53	; 0x35
    1166:	7e a9       	ldd	r23, Y+54	; 0x36
    1168:	8f a9       	ldd	r24, Y+55	; 0x37
    116a:	98 ad       	ldd	r25, Y+56	; 0x38
    116c:	20 e0       	ldi	r18, 0x00	; 0
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	40 e2       	ldi	r20, 0x20	; 32
    1172:	51 e4       	ldi	r21, 0x41	; 65
    1174:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1178:	dc 01       	movw	r26, r24
    117a:	cb 01       	movw	r24, r22
    117c:	bc 01       	movw	r22, r24
    117e:	cd 01       	movw	r24, r26
    1180:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1184:	dc 01       	movw	r26, r24
    1186:	cb 01       	movw	r24, r22
    1188:	98 ab       	std	Y+48, r25	; 0x30
    118a:	8f a7       	std	Y+47, r24	; 0x2f
    118c:	0f c0       	rjmp	.+30     	; 0x11ac <Lcd_vidInit+0xde>
    118e:	80 e9       	ldi	r24, 0x90	; 144
    1190:	91 e0       	ldi	r25, 0x01	; 1
    1192:	9e a7       	std	Y+46, r25	; 0x2e
    1194:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1196:	8d a5       	ldd	r24, Y+45	; 0x2d
    1198:	9e a5       	ldd	r25, Y+46	; 0x2e
    119a:	01 97       	sbiw	r24, 0x01	; 1
    119c:	f1 f7       	brne	.-4      	; 0x119a <Lcd_vidInit+0xcc>
    119e:	9e a7       	std	Y+46, r25	; 0x2e
    11a0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11a2:	8f a5       	ldd	r24, Y+47	; 0x2f
    11a4:	98 a9       	ldd	r25, Y+48	; 0x30
    11a6:	01 97       	sbiw	r24, 0x01	; 1
    11a8:	98 ab       	std	Y+48, r25	; 0x30
    11aa:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11ac:	8f a5       	ldd	r24, Y+47	; 0x2f
    11ae:	98 a9       	ldd	r25, Y+48	; 0x30
    11b0:	00 97       	sbiw	r24, 0x00	; 0
    11b2:	69 f7       	brne	.-38     	; 0x118e <Lcd_vidInit+0xc0>
    11b4:	14 c0       	rjmp	.+40     	; 0x11de <Lcd_vidInit+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11b6:	69 a9       	ldd	r22, Y+49	; 0x31
    11b8:	7a a9       	ldd	r23, Y+50	; 0x32
    11ba:	8b a9       	ldd	r24, Y+51	; 0x33
    11bc:	9c a9       	ldd	r25, Y+52	; 0x34
    11be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11c2:	dc 01       	movw	r26, r24
    11c4:	cb 01       	movw	r24, r22
    11c6:	98 ab       	std	Y+48, r25	; 0x30
    11c8:	8f a7       	std	Y+47, r24	; 0x2f
    11ca:	8f a5       	ldd	r24, Y+47	; 0x2f
    11cc:	98 a9       	ldd	r25, Y+48	; 0x30
    11ce:	9c a7       	std	Y+44, r25	; 0x2c
    11d0:	8b a7       	std	Y+43, r24	; 0x2b
    11d2:	8b a5       	ldd	r24, Y+43	; 0x2b
    11d4:	9c a5       	ldd	r25, Y+44	; 0x2c
    11d6:	01 97       	sbiw	r24, 0x01	; 1
    11d8:	f1 f7       	brne	.-4      	; 0x11d6 <Lcd_vidInit+0x108>
    11da:	9c a7       	std	Y+44, r25	; 0x2c
    11dc:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(50);
	Lcd_vidSendCommand( LCD_u8EIGHT_BIT_MODE | LCD_u8TWO_LINE_DISPLAY );
    11de:	88 e3       	ldi	r24, 0x38	; 56
    11e0:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <Lcd_vidSendCommand>
    11e4:	80 e0       	ldi	r24, 0x00	; 0
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	a0 e8       	ldi	r26, 0x80	; 128
    11ea:	bf e3       	ldi	r27, 0x3F	; 63
    11ec:	8f a3       	std	Y+39, r24	; 0x27
    11ee:	98 a7       	std	Y+40, r25	; 0x28
    11f0:	a9 a7       	std	Y+41, r26	; 0x29
    11f2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11f4:	6f a1       	ldd	r22, Y+39	; 0x27
    11f6:	78 a5       	ldd	r23, Y+40	; 0x28
    11f8:	89 a5       	ldd	r24, Y+41	; 0x29
    11fa:	9a a5       	ldd	r25, Y+42	; 0x2a
    11fc:	20 e0       	ldi	r18, 0x00	; 0
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	4a e7       	ldi	r20, 0x7A	; 122
    1202:	55 e4       	ldi	r21, 0x45	; 69
    1204:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1208:	dc 01       	movw	r26, r24
    120a:	cb 01       	movw	r24, r22
    120c:	8b a3       	std	Y+35, r24	; 0x23
    120e:	9c a3       	std	Y+36, r25	; 0x24
    1210:	ad a3       	std	Y+37, r26	; 0x25
    1212:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1214:	6b a1       	ldd	r22, Y+35	; 0x23
    1216:	7c a1       	ldd	r23, Y+36	; 0x24
    1218:	8d a1       	ldd	r24, Y+37	; 0x25
    121a:	9e a1       	ldd	r25, Y+38	; 0x26
    121c:	20 e0       	ldi	r18, 0x00	; 0
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	40 e8       	ldi	r20, 0x80	; 128
    1222:	5f e3       	ldi	r21, 0x3F	; 63
    1224:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1228:	88 23       	and	r24, r24
    122a:	2c f4       	brge	.+10     	; 0x1236 <Lcd_vidInit+0x168>
		__ticks = 1;
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	9a a3       	std	Y+34, r25	; 0x22
    1232:	89 a3       	std	Y+33, r24	; 0x21
    1234:	3f c0       	rjmp	.+126    	; 0x12b4 <Lcd_vidInit+0x1e6>
	else if (__tmp > 65535)
    1236:	6b a1       	ldd	r22, Y+35	; 0x23
    1238:	7c a1       	ldd	r23, Y+36	; 0x24
    123a:	8d a1       	ldd	r24, Y+37	; 0x25
    123c:	9e a1       	ldd	r25, Y+38	; 0x26
    123e:	20 e0       	ldi	r18, 0x00	; 0
    1240:	3f ef       	ldi	r19, 0xFF	; 255
    1242:	4f e7       	ldi	r20, 0x7F	; 127
    1244:	57 e4       	ldi	r21, 0x47	; 71
    1246:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    124a:	18 16       	cp	r1, r24
    124c:	4c f5       	brge	.+82     	; 0x12a0 <Lcd_vidInit+0x1d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    124e:	6f a1       	ldd	r22, Y+39	; 0x27
    1250:	78 a5       	ldd	r23, Y+40	; 0x28
    1252:	89 a5       	ldd	r24, Y+41	; 0x29
    1254:	9a a5       	ldd	r25, Y+42	; 0x2a
    1256:	20 e0       	ldi	r18, 0x00	; 0
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	40 e2       	ldi	r20, 0x20	; 32
    125c:	51 e4       	ldi	r21, 0x41	; 65
    125e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1262:	dc 01       	movw	r26, r24
    1264:	cb 01       	movw	r24, r22
    1266:	bc 01       	movw	r22, r24
    1268:	cd 01       	movw	r24, r26
    126a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    126e:	dc 01       	movw	r26, r24
    1270:	cb 01       	movw	r24, r22
    1272:	9a a3       	std	Y+34, r25	; 0x22
    1274:	89 a3       	std	Y+33, r24	; 0x21
    1276:	0f c0       	rjmp	.+30     	; 0x1296 <Lcd_vidInit+0x1c8>
    1278:	80 e9       	ldi	r24, 0x90	; 144
    127a:	91 e0       	ldi	r25, 0x01	; 1
    127c:	98 a3       	std	Y+32, r25	; 0x20
    127e:	8f 8f       	std	Y+31, r24	; 0x1f
    1280:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1282:	98 a1       	ldd	r25, Y+32	; 0x20
    1284:	01 97       	sbiw	r24, 0x01	; 1
    1286:	f1 f7       	brne	.-4      	; 0x1284 <Lcd_vidInit+0x1b6>
    1288:	98 a3       	std	Y+32, r25	; 0x20
    128a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    128c:	89 a1       	ldd	r24, Y+33	; 0x21
    128e:	9a a1       	ldd	r25, Y+34	; 0x22
    1290:	01 97       	sbiw	r24, 0x01	; 1
    1292:	9a a3       	std	Y+34, r25	; 0x22
    1294:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1296:	89 a1       	ldd	r24, Y+33	; 0x21
    1298:	9a a1       	ldd	r25, Y+34	; 0x22
    129a:	00 97       	sbiw	r24, 0x00	; 0
    129c:	69 f7       	brne	.-38     	; 0x1278 <Lcd_vidInit+0x1aa>
    129e:	14 c0       	rjmp	.+40     	; 0x12c8 <Lcd_vidInit+0x1fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12a0:	6b a1       	ldd	r22, Y+35	; 0x23
    12a2:	7c a1       	ldd	r23, Y+36	; 0x24
    12a4:	8d a1       	ldd	r24, Y+37	; 0x25
    12a6:	9e a1       	ldd	r25, Y+38	; 0x26
    12a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12ac:	dc 01       	movw	r26, r24
    12ae:	cb 01       	movw	r24, r22
    12b0:	9a a3       	std	Y+34, r25	; 0x22
    12b2:	89 a3       	std	Y+33, r24	; 0x21
    12b4:	89 a1       	ldd	r24, Y+33	; 0x21
    12b6:	9a a1       	ldd	r25, Y+34	; 0x22
    12b8:	9e 8f       	std	Y+30, r25	; 0x1e
    12ba:	8d 8f       	std	Y+29, r24	; 0x1d
    12bc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    12be:	9e 8d       	ldd	r25, Y+30	; 0x1e
    12c0:	01 97       	sbiw	r24, 0x01	; 1
    12c2:	f1 f7       	brne	.-4      	; 0x12c0 <Lcd_vidInit+0x1f2>
    12c4:	9e 8f       	std	Y+30, r25	; 0x1e
    12c6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	Lcd_vidSendCommand( LCD_u8DISPLAY_ON | LCD_u8CURSOR_OFF | LCD_u8CURSOR_BLINK_OFF );
    12c8:	8c e0       	ldi	r24, 0x0C	; 12
    12ca:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <Lcd_vidSendCommand>
    12ce:	80 e0       	ldi	r24, 0x00	; 0
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	a0 e8       	ldi	r26, 0x80	; 128
    12d4:	bf e3       	ldi	r27, 0x3F	; 63
    12d6:	89 8f       	std	Y+25, r24	; 0x19
    12d8:	9a 8f       	std	Y+26, r25	; 0x1a
    12da:	ab 8f       	std	Y+27, r26	; 0x1b
    12dc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12de:	69 8d       	ldd	r22, Y+25	; 0x19
    12e0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12e2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12e4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12e6:	20 e0       	ldi	r18, 0x00	; 0
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	4a e7       	ldi	r20, 0x7A	; 122
    12ec:	55 e4       	ldi	r21, 0x45	; 69
    12ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12f2:	dc 01       	movw	r26, r24
    12f4:	cb 01       	movw	r24, r22
    12f6:	8d 8b       	std	Y+21, r24	; 0x15
    12f8:	9e 8b       	std	Y+22, r25	; 0x16
    12fa:	af 8b       	std	Y+23, r26	; 0x17
    12fc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    12fe:	6d 89       	ldd	r22, Y+21	; 0x15
    1300:	7e 89       	ldd	r23, Y+22	; 0x16
    1302:	8f 89       	ldd	r24, Y+23	; 0x17
    1304:	98 8d       	ldd	r25, Y+24	; 0x18
    1306:	20 e0       	ldi	r18, 0x00	; 0
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	40 e8       	ldi	r20, 0x80	; 128
    130c:	5f e3       	ldi	r21, 0x3F	; 63
    130e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1312:	88 23       	and	r24, r24
    1314:	2c f4       	brge	.+10     	; 0x1320 <Lcd_vidInit+0x252>
		__ticks = 1;
    1316:	81 e0       	ldi	r24, 0x01	; 1
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	9c 8b       	std	Y+20, r25	; 0x14
    131c:	8b 8b       	std	Y+19, r24	; 0x13
    131e:	3f c0       	rjmp	.+126    	; 0x139e <Lcd_vidInit+0x2d0>
	else if (__tmp > 65535)
    1320:	6d 89       	ldd	r22, Y+21	; 0x15
    1322:	7e 89       	ldd	r23, Y+22	; 0x16
    1324:	8f 89       	ldd	r24, Y+23	; 0x17
    1326:	98 8d       	ldd	r25, Y+24	; 0x18
    1328:	20 e0       	ldi	r18, 0x00	; 0
    132a:	3f ef       	ldi	r19, 0xFF	; 255
    132c:	4f e7       	ldi	r20, 0x7F	; 127
    132e:	57 e4       	ldi	r21, 0x47	; 71
    1330:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1334:	18 16       	cp	r1, r24
    1336:	4c f5       	brge	.+82     	; 0x138a <Lcd_vidInit+0x2bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1338:	69 8d       	ldd	r22, Y+25	; 0x19
    133a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    133c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    133e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1340:	20 e0       	ldi	r18, 0x00	; 0
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	40 e2       	ldi	r20, 0x20	; 32
    1346:	51 e4       	ldi	r21, 0x41	; 65
    1348:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    134c:	dc 01       	movw	r26, r24
    134e:	cb 01       	movw	r24, r22
    1350:	bc 01       	movw	r22, r24
    1352:	cd 01       	movw	r24, r26
    1354:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1358:	dc 01       	movw	r26, r24
    135a:	cb 01       	movw	r24, r22
    135c:	9c 8b       	std	Y+20, r25	; 0x14
    135e:	8b 8b       	std	Y+19, r24	; 0x13
    1360:	0f c0       	rjmp	.+30     	; 0x1380 <Lcd_vidInit+0x2b2>
    1362:	80 e9       	ldi	r24, 0x90	; 144
    1364:	91 e0       	ldi	r25, 0x01	; 1
    1366:	9a 8b       	std	Y+18, r25	; 0x12
    1368:	89 8b       	std	Y+17, r24	; 0x11
    136a:	89 89       	ldd	r24, Y+17	; 0x11
    136c:	9a 89       	ldd	r25, Y+18	; 0x12
    136e:	01 97       	sbiw	r24, 0x01	; 1
    1370:	f1 f7       	brne	.-4      	; 0x136e <Lcd_vidInit+0x2a0>
    1372:	9a 8b       	std	Y+18, r25	; 0x12
    1374:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1376:	8b 89       	ldd	r24, Y+19	; 0x13
    1378:	9c 89       	ldd	r25, Y+20	; 0x14
    137a:	01 97       	sbiw	r24, 0x01	; 1
    137c:	9c 8b       	std	Y+20, r25	; 0x14
    137e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1380:	8b 89       	ldd	r24, Y+19	; 0x13
    1382:	9c 89       	ldd	r25, Y+20	; 0x14
    1384:	00 97       	sbiw	r24, 0x00	; 0
    1386:	69 f7       	brne	.-38     	; 0x1362 <Lcd_vidInit+0x294>
    1388:	14 c0       	rjmp	.+40     	; 0x13b2 <Lcd_vidInit+0x2e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    138a:	6d 89       	ldd	r22, Y+21	; 0x15
    138c:	7e 89       	ldd	r23, Y+22	; 0x16
    138e:	8f 89       	ldd	r24, Y+23	; 0x17
    1390:	98 8d       	ldd	r25, Y+24	; 0x18
    1392:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1396:	dc 01       	movw	r26, r24
    1398:	cb 01       	movw	r24, r22
    139a:	9c 8b       	std	Y+20, r25	; 0x14
    139c:	8b 8b       	std	Y+19, r24	; 0x13
    139e:	8b 89       	ldd	r24, Y+19	; 0x13
    13a0:	9c 89       	ldd	r25, Y+20	; 0x14
    13a2:	98 8b       	std	Y+16, r25	; 0x10
    13a4:	8f 87       	std	Y+15, r24	; 0x0f
    13a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    13a8:	98 89       	ldd	r25, Y+16	; 0x10
    13aa:	01 97       	sbiw	r24, 0x01	; 1
    13ac:	f1 f7       	brne	.-4      	; 0x13aa <Lcd_vidInit+0x2dc>
    13ae:	98 8b       	std	Y+16, r25	; 0x10
    13b0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	Lcd_vidSendCommand( LCD_u8CLEAR_DISPLAY );
    13b2:	81 e0       	ldi	r24, 0x01	; 1
    13b4:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <Lcd_vidSendCommand>
    13b8:	80 e0       	ldi	r24, 0x00	; 0
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	a0 e0       	ldi	r26, 0x00	; 0
    13be:	b0 e4       	ldi	r27, 0x40	; 64
    13c0:	8b 87       	std	Y+11, r24	; 0x0b
    13c2:	9c 87       	std	Y+12, r25	; 0x0c
    13c4:	ad 87       	std	Y+13, r26	; 0x0d
    13c6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    13ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    13cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    13ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    13d0:	20 e0       	ldi	r18, 0x00	; 0
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	4a e7       	ldi	r20, 0x7A	; 122
    13d6:	55 e4       	ldi	r21, 0x45	; 69
    13d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13dc:	dc 01       	movw	r26, r24
    13de:	cb 01       	movw	r24, r22
    13e0:	8f 83       	std	Y+7, r24	; 0x07
    13e2:	98 87       	std	Y+8, r25	; 0x08
    13e4:	a9 87       	std	Y+9, r26	; 0x09
    13e6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13e8:	6f 81       	ldd	r22, Y+7	; 0x07
    13ea:	78 85       	ldd	r23, Y+8	; 0x08
    13ec:	89 85       	ldd	r24, Y+9	; 0x09
    13ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    13f0:	20 e0       	ldi	r18, 0x00	; 0
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	40 e8       	ldi	r20, 0x80	; 128
    13f6:	5f e3       	ldi	r21, 0x3F	; 63
    13f8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13fc:	88 23       	and	r24, r24
    13fe:	2c f4       	brge	.+10     	; 0x140a <Lcd_vidInit+0x33c>
		__ticks = 1;
    1400:	81 e0       	ldi	r24, 0x01	; 1
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	9e 83       	std	Y+6, r25	; 0x06
    1406:	8d 83       	std	Y+5, r24	; 0x05
    1408:	3f c0       	rjmp	.+126    	; 0x1488 <Lcd_vidInit+0x3ba>
	else if (__tmp > 65535)
    140a:	6f 81       	ldd	r22, Y+7	; 0x07
    140c:	78 85       	ldd	r23, Y+8	; 0x08
    140e:	89 85       	ldd	r24, Y+9	; 0x09
    1410:	9a 85       	ldd	r25, Y+10	; 0x0a
    1412:	20 e0       	ldi	r18, 0x00	; 0
    1414:	3f ef       	ldi	r19, 0xFF	; 255
    1416:	4f e7       	ldi	r20, 0x7F	; 127
    1418:	57 e4       	ldi	r21, 0x47	; 71
    141a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    141e:	18 16       	cp	r1, r24
    1420:	4c f5       	brge	.+82     	; 0x1474 <Lcd_vidInit+0x3a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1422:	6b 85       	ldd	r22, Y+11	; 0x0b
    1424:	7c 85       	ldd	r23, Y+12	; 0x0c
    1426:	8d 85       	ldd	r24, Y+13	; 0x0d
    1428:	9e 85       	ldd	r25, Y+14	; 0x0e
    142a:	20 e0       	ldi	r18, 0x00	; 0
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	40 e2       	ldi	r20, 0x20	; 32
    1430:	51 e4       	ldi	r21, 0x41	; 65
    1432:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1436:	dc 01       	movw	r26, r24
    1438:	cb 01       	movw	r24, r22
    143a:	bc 01       	movw	r22, r24
    143c:	cd 01       	movw	r24, r26
    143e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1442:	dc 01       	movw	r26, r24
    1444:	cb 01       	movw	r24, r22
    1446:	9e 83       	std	Y+6, r25	; 0x06
    1448:	8d 83       	std	Y+5, r24	; 0x05
    144a:	0f c0       	rjmp	.+30     	; 0x146a <Lcd_vidInit+0x39c>
    144c:	80 e9       	ldi	r24, 0x90	; 144
    144e:	91 e0       	ldi	r25, 0x01	; 1
    1450:	9c 83       	std	Y+4, r25	; 0x04
    1452:	8b 83       	std	Y+3, r24	; 0x03
    1454:	8b 81       	ldd	r24, Y+3	; 0x03
    1456:	9c 81       	ldd	r25, Y+4	; 0x04
    1458:	01 97       	sbiw	r24, 0x01	; 1
    145a:	f1 f7       	brne	.-4      	; 0x1458 <Lcd_vidInit+0x38a>
    145c:	9c 83       	std	Y+4, r25	; 0x04
    145e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1460:	8d 81       	ldd	r24, Y+5	; 0x05
    1462:	9e 81       	ldd	r25, Y+6	; 0x06
    1464:	01 97       	sbiw	r24, 0x01	; 1
    1466:	9e 83       	std	Y+6, r25	; 0x06
    1468:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    146a:	8d 81       	ldd	r24, Y+5	; 0x05
    146c:	9e 81       	ldd	r25, Y+6	; 0x06
    146e:	00 97       	sbiw	r24, 0x00	; 0
    1470:	69 f7       	brne	.-38     	; 0x144c <Lcd_vidInit+0x37e>
    1472:	14 c0       	rjmp	.+40     	; 0x149c <Lcd_vidInit+0x3ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1474:	6f 81       	ldd	r22, Y+7	; 0x07
    1476:	78 85       	ldd	r23, Y+8	; 0x08
    1478:	89 85       	ldd	r24, Y+9	; 0x09
    147a:	9a 85       	ldd	r25, Y+10	; 0x0a
    147c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1480:	dc 01       	movw	r26, r24
    1482:	cb 01       	movw	r24, r22
    1484:	9e 83       	std	Y+6, r25	; 0x06
    1486:	8d 83       	std	Y+5, r24	; 0x05
    1488:	8d 81       	ldd	r24, Y+5	; 0x05
    148a:	9e 81       	ldd	r25, Y+6	; 0x06
    148c:	9a 83       	std	Y+2, r25	; 0x02
    148e:	89 83       	std	Y+1, r24	; 0x01
    1490:	89 81       	ldd	r24, Y+1	; 0x01
    1492:	9a 81       	ldd	r25, Y+2	; 0x02
    1494:	01 97       	sbiw	r24, 0x01	; 1
    1496:	f1 f7       	brne	.-4      	; 0x1494 <Lcd_vidInit+0x3c6>
    1498:	9a 83       	std	Y+2, r25	; 0x02
    149a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	Lcd_vidSendCommand( LCD_u8CURSOR_LEFT_TO_RIGHT );
    149c:	86 e0       	ldi	r24, 0x06	; 6
    149e:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <Lcd_vidSendCommand>
}
    14a2:	e8 96       	adiw	r28, 0x38	; 56
    14a4:	0f b6       	in	r0, 0x3f	; 63
    14a6:	f8 94       	cli
    14a8:	de bf       	out	0x3e, r29	; 62
    14aa:	0f be       	out	0x3f, r0	; 63
    14ac:	cd bf       	out	0x3d, r28	; 61
    14ae:	cf 91       	pop	r28
    14b0:	df 91       	pop	r29
    14b2:	08 95       	ret

000014b4 <Lcd_vidSendCommand>:

void Lcd_vidSendCommand( u8 Copy_u8Command )
{
    14b4:	df 93       	push	r29
    14b6:	cf 93       	push	r28
    14b8:	cd b7       	in	r28, 0x3d	; 61
    14ba:	de b7       	in	r29, 0x3e	; 62
    14bc:	6d 97       	sbiw	r28, 0x1d	; 29
    14be:	0f b6       	in	r0, 0x3f	; 63
    14c0:	f8 94       	cli
    14c2:	de bf       	out	0x3e, r29	; 62
    14c4:	0f be       	out	0x3f, r0	; 63
    14c6:	cd bf       	out	0x3d, r28	; 61
    14c8:	8d 8f       	std	Y+29, r24	; 0x1d
	Port_enuSetPinDirection( PORT_u8PIN_0 , PORT_u8PIN_OUTPUT );
    14ca:	80 e0       	ldi	r24, 0x00	; 0
    14cc:	61 e0       	ldi	r22, 0x01	; 1
    14ce:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <Port_enuSetPinDirection>
	Port_enuSetPinDirection( PORT_u8PIN_1 , PORT_u8PIN_OUTPUT );
    14d2:	81 e0       	ldi	r24, 0x01	; 1
    14d4:	61 e0       	ldi	r22, 0x01	; 1
    14d6:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <Port_enuSetPinDirection>
	Port_enuSetPinDirection( PORT_u8PIN_2 , PORT_u8PIN_OUTPUT );
    14da:	82 e0       	ldi	r24, 0x02	; 2
    14dc:	61 e0       	ldi	r22, 0x01	; 1
    14de:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <Port_enuSetPinDirection>
	Port_enuSetPinDirection( PORT_u8PIN_3 , PORT_u8PIN_OUTPUT );
    14e2:	83 e0       	ldi	r24, 0x03	; 3
    14e4:	61 e0       	ldi	r22, 0x01	; 1
    14e6:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <Port_enuSetPinDirection>
	Port_enuSetPinDirection( PORT_u8PIN_4 , PORT_u8PIN_OUTPUT );
    14ea:	84 e0       	ldi	r24, 0x04	; 4
    14ec:	61 e0       	ldi	r22, 0x01	; 1
    14ee:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <Port_enuSetPinDirection>
	Port_enuSetPinDirection( PORT_u8PIN_5 , PORT_u8PIN_OUTPUT );
    14f2:	85 e0       	ldi	r24, 0x05	; 5
    14f4:	61 e0       	ldi	r22, 0x01	; 1
    14f6:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <Port_enuSetPinDirection>
	Port_enuSetPinDirection( PORT_u8PIN_6 , PORT_u8PIN_OUTPUT );
    14fa:	86 e0       	ldi	r24, 0x06	; 6
    14fc:	61 e0       	ldi	r22, 0x01	; 1
    14fe:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <Port_enuSetPinDirection>
	Port_enuSetPinDirection( PORT_u8PIN_7 , PORT_u8PIN_OUTPUT );
    1502:	87 e0       	ldi	r24, 0x07	; 7
    1504:	61 e0       	ldi	r22, 0x01	; 1
    1506:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <Port_enuSetPinDirection>


	DIO_enuWritePort( LCD_u8PORT_WRITE , Copy_u8Command );
    150a:	80 e0       	ldi	r24, 0x00	; 0
    150c:	6d 8d       	ldd	r22, Y+29	; 0x1d
    150e:	0e 94 38 07 	call	0xe70	; 0xe70 <DIO_enuWritePort>
	DIO_enuWriteChannel( LCD_u8RW , LCD_u8RW_WRITE );
    1512:	8a e0       	ldi	r24, 0x0A	; 10
    1514:	60 e0       	ldi	r22, 0x00	; 0
    1516:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_enuWriteChannel>
	DIO_enuWriteChannel( LCD_u8RS , LCD_u8RS_COMMAND );
    151a:	89 e0       	ldi	r24, 0x09	; 9
    151c:	60 e0       	ldi	r22, 0x00	; 0
    151e:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_enuWriteChannel>
	DIO_enuWriteChannel( LCD_u8ENABLE , LCD_u8ENABLE_HIGH );
    1522:	88 e0       	ldi	r24, 0x08	; 8
    1524:	61 e0       	ldi	r22, 0x01	; 1
    1526:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_enuWriteChannel>
    152a:	80 e0       	ldi	r24, 0x00	; 0
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	a0 e8       	ldi	r26, 0x80	; 128
    1530:	bf e3       	ldi	r27, 0x3F	; 63
    1532:	89 8f       	std	Y+25, r24	; 0x19
    1534:	9a 8f       	std	Y+26, r25	; 0x1a
    1536:	ab 8f       	std	Y+27, r26	; 0x1b
    1538:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    153a:	69 8d       	ldd	r22, Y+25	; 0x19
    153c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    153e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1540:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1542:	20 e0       	ldi	r18, 0x00	; 0
    1544:	30 e0       	ldi	r19, 0x00	; 0
    1546:	4a e7       	ldi	r20, 0x7A	; 122
    1548:	55 e4       	ldi	r21, 0x45	; 69
    154a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    154e:	dc 01       	movw	r26, r24
    1550:	cb 01       	movw	r24, r22
    1552:	8d 8b       	std	Y+21, r24	; 0x15
    1554:	9e 8b       	std	Y+22, r25	; 0x16
    1556:	af 8b       	std	Y+23, r26	; 0x17
    1558:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    155a:	6d 89       	ldd	r22, Y+21	; 0x15
    155c:	7e 89       	ldd	r23, Y+22	; 0x16
    155e:	8f 89       	ldd	r24, Y+23	; 0x17
    1560:	98 8d       	ldd	r25, Y+24	; 0x18
    1562:	20 e0       	ldi	r18, 0x00	; 0
    1564:	30 e0       	ldi	r19, 0x00	; 0
    1566:	40 e8       	ldi	r20, 0x80	; 128
    1568:	5f e3       	ldi	r21, 0x3F	; 63
    156a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    156e:	88 23       	and	r24, r24
    1570:	2c f4       	brge	.+10     	; 0x157c <Lcd_vidSendCommand+0xc8>
		__ticks = 1;
    1572:	81 e0       	ldi	r24, 0x01	; 1
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	9c 8b       	std	Y+20, r25	; 0x14
    1578:	8b 8b       	std	Y+19, r24	; 0x13
    157a:	3f c0       	rjmp	.+126    	; 0x15fa <Lcd_vidSendCommand+0x146>
	else if (__tmp > 65535)
    157c:	6d 89       	ldd	r22, Y+21	; 0x15
    157e:	7e 89       	ldd	r23, Y+22	; 0x16
    1580:	8f 89       	ldd	r24, Y+23	; 0x17
    1582:	98 8d       	ldd	r25, Y+24	; 0x18
    1584:	20 e0       	ldi	r18, 0x00	; 0
    1586:	3f ef       	ldi	r19, 0xFF	; 255
    1588:	4f e7       	ldi	r20, 0x7F	; 127
    158a:	57 e4       	ldi	r21, 0x47	; 71
    158c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1590:	18 16       	cp	r1, r24
    1592:	4c f5       	brge	.+82     	; 0x15e6 <Lcd_vidSendCommand+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1594:	69 8d       	ldd	r22, Y+25	; 0x19
    1596:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1598:	8b 8d       	ldd	r24, Y+27	; 0x1b
    159a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    159c:	20 e0       	ldi	r18, 0x00	; 0
    159e:	30 e0       	ldi	r19, 0x00	; 0
    15a0:	40 e2       	ldi	r20, 0x20	; 32
    15a2:	51 e4       	ldi	r21, 0x41	; 65
    15a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15a8:	dc 01       	movw	r26, r24
    15aa:	cb 01       	movw	r24, r22
    15ac:	bc 01       	movw	r22, r24
    15ae:	cd 01       	movw	r24, r26
    15b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15b4:	dc 01       	movw	r26, r24
    15b6:	cb 01       	movw	r24, r22
    15b8:	9c 8b       	std	Y+20, r25	; 0x14
    15ba:	8b 8b       	std	Y+19, r24	; 0x13
    15bc:	0f c0       	rjmp	.+30     	; 0x15dc <Lcd_vidSendCommand+0x128>
    15be:	80 e9       	ldi	r24, 0x90	; 144
    15c0:	91 e0       	ldi	r25, 0x01	; 1
    15c2:	9a 8b       	std	Y+18, r25	; 0x12
    15c4:	89 8b       	std	Y+17, r24	; 0x11
    15c6:	89 89       	ldd	r24, Y+17	; 0x11
    15c8:	9a 89       	ldd	r25, Y+18	; 0x12
    15ca:	01 97       	sbiw	r24, 0x01	; 1
    15cc:	f1 f7       	brne	.-4      	; 0x15ca <Lcd_vidSendCommand+0x116>
    15ce:	9a 8b       	std	Y+18, r25	; 0x12
    15d0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15d2:	8b 89       	ldd	r24, Y+19	; 0x13
    15d4:	9c 89       	ldd	r25, Y+20	; 0x14
    15d6:	01 97       	sbiw	r24, 0x01	; 1
    15d8:	9c 8b       	std	Y+20, r25	; 0x14
    15da:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15dc:	8b 89       	ldd	r24, Y+19	; 0x13
    15de:	9c 89       	ldd	r25, Y+20	; 0x14
    15e0:	00 97       	sbiw	r24, 0x00	; 0
    15e2:	69 f7       	brne	.-38     	; 0x15be <Lcd_vidSendCommand+0x10a>
    15e4:	14 c0       	rjmp	.+40     	; 0x160e <Lcd_vidSendCommand+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15e6:	6d 89       	ldd	r22, Y+21	; 0x15
    15e8:	7e 89       	ldd	r23, Y+22	; 0x16
    15ea:	8f 89       	ldd	r24, Y+23	; 0x17
    15ec:	98 8d       	ldd	r25, Y+24	; 0x18
    15ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15f2:	dc 01       	movw	r26, r24
    15f4:	cb 01       	movw	r24, r22
    15f6:	9c 8b       	std	Y+20, r25	; 0x14
    15f8:	8b 8b       	std	Y+19, r24	; 0x13
    15fa:	8b 89       	ldd	r24, Y+19	; 0x13
    15fc:	9c 89       	ldd	r25, Y+20	; 0x14
    15fe:	98 8b       	std	Y+16, r25	; 0x10
    1600:	8f 87       	std	Y+15, r24	; 0x0f
    1602:	8f 85       	ldd	r24, Y+15	; 0x0f
    1604:	98 89       	ldd	r25, Y+16	; 0x10
    1606:	01 97       	sbiw	r24, 0x01	; 1
    1608:	f1 f7       	brne	.-4      	; 0x1606 <Lcd_vidSendCommand+0x152>
    160a:	98 8b       	std	Y+16, r25	; 0x10
    160c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_enuWriteChannel( LCD_u8ENABLE , LCD_u8ENABLE_LOW );
    160e:	88 e0       	ldi	r24, 0x08	; 8
    1610:	60 e0       	ldi	r22, 0x00	; 0
    1612:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_enuWriteChannel>
    1616:	80 e0       	ldi	r24, 0x00	; 0
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	a0 e8       	ldi	r26, 0x80	; 128
    161c:	bf e3       	ldi	r27, 0x3F	; 63
    161e:	8b 87       	std	Y+11, r24	; 0x0b
    1620:	9c 87       	std	Y+12, r25	; 0x0c
    1622:	ad 87       	std	Y+13, r26	; 0x0d
    1624:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1626:	6b 85       	ldd	r22, Y+11	; 0x0b
    1628:	7c 85       	ldd	r23, Y+12	; 0x0c
    162a:	8d 85       	ldd	r24, Y+13	; 0x0d
    162c:	9e 85       	ldd	r25, Y+14	; 0x0e
    162e:	20 e0       	ldi	r18, 0x00	; 0
    1630:	30 e0       	ldi	r19, 0x00	; 0
    1632:	4a e7       	ldi	r20, 0x7A	; 122
    1634:	55 e4       	ldi	r21, 0x45	; 69
    1636:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    163a:	dc 01       	movw	r26, r24
    163c:	cb 01       	movw	r24, r22
    163e:	8f 83       	std	Y+7, r24	; 0x07
    1640:	98 87       	std	Y+8, r25	; 0x08
    1642:	a9 87       	std	Y+9, r26	; 0x09
    1644:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1646:	6f 81       	ldd	r22, Y+7	; 0x07
    1648:	78 85       	ldd	r23, Y+8	; 0x08
    164a:	89 85       	ldd	r24, Y+9	; 0x09
    164c:	9a 85       	ldd	r25, Y+10	; 0x0a
    164e:	20 e0       	ldi	r18, 0x00	; 0
    1650:	30 e0       	ldi	r19, 0x00	; 0
    1652:	40 e8       	ldi	r20, 0x80	; 128
    1654:	5f e3       	ldi	r21, 0x3F	; 63
    1656:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    165a:	88 23       	and	r24, r24
    165c:	2c f4       	brge	.+10     	; 0x1668 <Lcd_vidSendCommand+0x1b4>
		__ticks = 1;
    165e:	81 e0       	ldi	r24, 0x01	; 1
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	9e 83       	std	Y+6, r25	; 0x06
    1664:	8d 83       	std	Y+5, r24	; 0x05
    1666:	3f c0       	rjmp	.+126    	; 0x16e6 <Lcd_vidSendCommand+0x232>
	else if (__tmp > 65535)
    1668:	6f 81       	ldd	r22, Y+7	; 0x07
    166a:	78 85       	ldd	r23, Y+8	; 0x08
    166c:	89 85       	ldd	r24, Y+9	; 0x09
    166e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1670:	20 e0       	ldi	r18, 0x00	; 0
    1672:	3f ef       	ldi	r19, 0xFF	; 255
    1674:	4f e7       	ldi	r20, 0x7F	; 127
    1676:	57 e4       	ldi	r21, 0x47	; 71
    1678:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    167c:	18 16       	cp	r1, r24
    167e:	4c f5       	brge	.+82     	; 0x16d2 <Lcd_vidSendCommand+0x21e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1680:	6b 85       	ldd	r22, Y+11	; 0x0b
    1682:	7c 85       	ldd	r23, Y+12	; 0x0c
    1684:	8d 85       	ldd	r24, Y+13	; 0x0d
    1686:	9e 85       	ldd	r25, Y+14	; 0x0e
    1688:	20 e0       	ldi	r18, 0x00	; 0
    168a:	30 e0       	ldi	r19, 0x00	; 0
    168c:	40 e2       	ldi	r20, 0x20	; 32
    168e:	51 e4       	ldi	r21, 0x41	; 65
    1690:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1694:	dc 01       	movw	r26, r24
    1696:	cb 01       	movw	r24, r22
    1698:	bc 01       	movw	r22, r24
    169a:	cd 01       	movw	r24, r26
    169c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16a0:	dc 01       	movw	r26, r24
    16a2:	cb 01       	movw	r24, r22
    16a4:	9e 83       	std	Y+6, r25	; 0x06
    16a6:	8d 83       	std	Y+5, r24	; 0x05
    16a8:	0f c0       	rjmp	.+30     	; 0x16c8 <Lcd_vidSendCommand+0x214>
    16aa:	80 e9       	ldi	r24, 0x90	; 144
    16ac:	91 e0       	ldi	r25, 0x01	; 1
    16ae:	9c 83       	std	Y+4, r25	; 0x04
    16b0:	8b 83       	std	Y+3, r24	; 0x03
    16b2:	8b 81       	ldd	r24, Y+3	; 0x03
    16b4:	9c 81       	ldd	r25, Y+4	; 0x04
    16b6:	01 97       	sbiw	r24, 0x01	; 1
    16b8:	f1 f7       	brne	.-4      	; 0x16b6 <Lcd_vidSendCommand+0x202>
    16ba:	9c 83       	std	Y+4, r25	; 0x04
    16bc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16be:	8d 81       	ldd	r24, Y+5	; 0x05
    16c0:	9e 81       	ldd	r25, Y+6	; 0x06
    16c2:	01 97       	sbiw	r24, 0x01	; 1
    16c4:	9e 83       	std	Y+6, r25	; 0x06
    16c6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16c8:	8d 81       	ldd	r24, Y+5	; 0x05
    16ca:	9e 81       	ldd	r25, Y+6	; 0x06
    16cc:	00 97       	sbiw	r24, 0x00	; 0
    16ce:	69 f7       	brne	.-38     	; 0x16aa <Lcd_vidSendCommand+0x1f6>
    16d0:	14 c0       	rjmp	.+40     	; 0x16fa <Lcd_vidSendCommand+0x246>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16d2:	6f 81       	ldd	r22, Y+7	; 0x07
    16d4:	78 85       	ldd	r23, Y+8	; 0x08
    16d6:	89 85       	ldd	r24, Y+9	; 0x09
    16d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    16da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16de:	dc 01       	movw	r26, r24
    16e0:	cb 01       	movw	r24, r22
    16e2:	9e 83       	std	Y+6, r25	; 0x06
    16e4:	8d 83       	std	Y+5, r24	; 0x05
    16e6:	8d 81       	ldd	r24, Y+5	; 0x05
    16e8:	9e 81       	ldd	r25, Y+6	; 0x06
    16ea:	9a 83       	std	Y+2, r25	; 0x02
    16ec:	89 83       	std	Y+1, r24	; 0x01
    16ee:	89 81       	ldd	r24, Y+1	; 0x01
    16f0:	9a 81       	ldd	r25, Y+2	; 0x02
    16f2:	01 97       	sbiw	r24, 0x01	; 1
    16f4:	f1 f7       	brne	.-4      	; 0x16f2 <Lcd_vidSendCommand+0x23e>
    16f6:	9a 83       	std	Y+2, r25	; 0x02
    16f8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    16fa:	6d 96       	adiw	r28, 0x1d	; 29
    16fc:	0f b6       	in	r0, 0x3f	; 63
    16fe:	f8 94       	cli
    1700:	de bf       	out	0x3e, r29	; 62
    1702:	0f be       	out	0x3f, r0	; 63
    1704:	cd bf       	out	0x3d, r28	; 61
    1706:	cf 91       	pop	r28
    1708:	df 91       	pop	r29
    170a:	08 95       	ret

0000170c <Lcd_vidDisplayCharacter>:
void Lcd_vidDisplayCharacter( u8 Copy_u8Character )
{
    170c:	df 93       	push	r29
    170e:	cf 93       	push	r28
    1710:	cd b7       	in	r28, 0x3d	; 61
    1712:	de b7       	in	r29, 0x3e	; 62
    1714:	6d 97       	sbiw	r28, 0x1d	; 29
    1716:	0f b6       	in	r0, 0x3f	; 63
    1718:	f8 94       	cli
    171a:	de bf       	out	0x3e, r29	; 62
    171c:	0f be       	out	0x3f, r0	; 63
    171e:	cd bf       	out	0x3d, r28	; 61
    1720:	8d 8f       	std	Y+29, r24	; 0x1d
	Port_enuSetPinDirection( PORT_u8PIN_0 , PORT_u8PIN_OUTPUT );
    1722:	80 e0       	ldi	r24, 0x00	; 0
    1724:	61 e0       	ldi	r22, 0x01	; 1
    1726:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <Port_enuSetPinDirection>
	Port_enuSetPinDirection( PORT_u8PIN_1 , PORT_u8PIN_OUTPUT );
    172a:	81 e0       	ldi	r24, 0x01	; 1
    172c:	61 e0       	ldi	r22, 0x01	; 1
    172e:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <Port_enuSetPinDirection>
	Port_enuSetPinDirection( PORT_u8PIN_2 , PORT_u8PIN_OUTPUT );
    1732:	82 e0       	ldi	r24, 0x02	; 2
    1734:	61 e0       	ldi	r22, 0x01	; 1
    1736:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <Port_enuSetPinDirection>
	Port_enuSetPinDirection( PORT_u8PIN_3 , PORT_u8PIN_OUTPUT );
    173a:	83 e0       	ldi	r24, 0x03	; 3
    173c:	61 e0       	ldi	r22, 0x01	; 1
    173e:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <Port_enuSetPinDirection>
	Port_enuSetPinDirection( PORT_u8PIN_4 , PORT_u8PIN_OUTPUT );
    1742:	84 e0       	ldi	r24, 0x04	; 4
    1744:	61 e0       	ldi	r22, 0x01	; 1
    1746:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <Port_enuSetPinDirection>
	Port_enuSetPinDirection( PORT_u8PIN_5 , PORT_u8PIN_OUTPUT );
    174a:	85 e0       	ldi	r24, 0x05	; 5
    174c:	61 e0       	ldi	r22, 0x01	; 1
    174e:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <Port_enuSetPinDirection>
	Port_enuSetPinDirection( PORT_u8PIN_6 , PORT_u8PIN_OUTPUT );
    1752:	86 e0       	ldi	r24, 0x06	; 6
    1754:	61 e0       	ldi	r22, 0x01	; 1
    1756:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <Port_enuSetPinDirection>
	Port_enuSetPinDirection( PORT_u8PIN_7 , PORT_u8PIN_OUTPUT );
    175a:	87 e0       	ldi	r24, 0x07	; 7
    175c:	61 e0       	ldi	r22, 0x01	; 1
    175e:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <Port_enuSetPinDirection>

	DIO_enuWritePort( LCD_u8PORT_WRITE , Copy_u8Character );
    1762:	80 e0       	ldi	r24, 0x00	; 0
    1764:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1766:	0e 94 38 07 	call	0xe70	; 0xe70 <DIO_enuWritePort>
	DIO_enuWriteChannel( LCD_u8RW , LCD_u8RW_WRITE );
    176a:	8a e0       	ldi	r24, 0x0A	; 10
    176c:	60 e0       	ldi	r22, 0x00	; 0
    176e:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_enuWriteChannel>
	DIO_enuWriteChannel( LCD_u8RS , LCD_u8RS_DATA );
    1772:	89 e0       	ldi	r24, 0x09	; 9
    1774:	61 e0       	ldi	r22, 0x01	; 1
    1776:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_enuWriteChannel>
	DIO_enuWriteChannel( LCD_u8ENABLE , LCD_u8ENABLE_HIGH );
    177a:	88 e0       	ldi	r24, 0x08	; 8
    177c:	61 e0       	ldi	r22, 0x01	; 1
    177e:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_enuWriteChannel>
    1782:	80 e0       	ldi	r24, 0x00	; 0
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	a0 e8       	ldi	r26, 0x80	; 128
    1788:	bf e3       	ldi	r27, 0x3F	; 63
    178a:	89 8f       	std	Y+25, r24	; 0x19
    178c:	9a 8f       	std	Y+26, r25	; 0x1a
    178e:	ab 8f       	std	Y+27, r26	; 0x1b
    1790:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1792:	69 8d       	ldd	r22, Y+25	; 0x19
    1794:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1796:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1798:	9c 8d       	ldd	r25, Y+28	; 0x1c
    179a:	20 e0       	ldi	r18, 0x00	; 0
    179c:	30 e0       	ldi	r19, 0x00	; 0
    179e:	4a e7       	ldi	r20, 0x7A	; 122
    17a0:	55 e4       	ldi	r21, 0x45	; 69
    17a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17a6:	dc 01       	movw	r26, r24
    17a8:	cb 01       	movw	r24, r22
    17aa:	8d 8b       	std	Y+21, r24	; 0x15
    17ac:	9e 8b       	std	Y+22, r25	; 0x16
    17ae:	af 8b       	std	Y+23, r26	; 0x17
    17b0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    17b2:	6d 89       	ldd	r22, Y+21	; 0x15
    17b4:	7e 89       	ldd	r23, Y+22	; 0x16
    17b6:	8f 89       	ldd	r24, Y+23	; 0x17
    17b8:	98 8d       	ldd	r25, Y+24	; 0x18
    17ba:	20 e0       	ldi	r18, 0x00	; 0
    17bc:	30 e0       	ldi	r19, 0x00	; 0
    17be:	40 e8       	ldi	r20, 0x80	; 128
    17c0:	5f e3       	ldi	r21, 0x3F	; 63
    17c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17c6:	88 23       	and	r24, r24
    17c8:	2c f4       	brge	.+10     	; 0x17d4 <Lcd_vidDisplayCharacter+0xc8>
		__ticks = 1;
    17ca:	81 e0       	ldi	r24, 0x01	; 1
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	9c 8b       	std	Y+20, r25	; 0x14
    17d0:	8b 8b       	std	Y+19, r24	; 0x13
    17d2:	3f c0       	rjmp	.+126    	; 0x1852 <Lcd_vidDisplayCharacter+0x146>
	else if (__tmp > 65535)
    17d4:	6d 89       	ldd	r22, Y+21	; 0x15
    17d6:	7e 89       	ldd	r23, Y+22	; 0x16
    17d8:	8f 89       	ldd	r24, Y+23	; 0x17
    17da:	98 8d       	ldd	r25, Y+24	; 0x18
    17dc:	20 e0       	ldi	r18, 0x00	; 0
    17de:	3f ef       	ldi	r19, 0xFF	; 255
    17e0:	4f e7       	ldi	r20, 0x7F	; 127
    17e2:	57 e4       	ldi	r21, 0x47	; 71
    17e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17e8:	18 16       	cp	r1, r24
    17ea:	4c f5       	brge	.+82     	; 0x183e <Lcd_vidDisplayCharacter+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17ec:	69 8d       	ldd	r22, Y+25	; 0x19
    17ee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17f2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17f4:	20 e0       	ldi	r18, 0x00	; 0
    17f6:	30 e0       	ldi	r19, 0x00	; 0
    17f8:	40 e2       	ldi	r20, 0x20	; 32
    17fa:	51 e4       	ldi	r21, 0x41	; 65
    17fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1800:	dc 01       	movw	r26, r24
    1802:	cb 01       	movw	r24, r22
    1804:	bc 01       	movw	r22, r24
    1806:	cd 01       	movw	r24, r26
    1808:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    180c:	dc 01       	movw	r26, r24
    180e:	cb 01       	movw	r24, r22
    1810:	9c 8b       	std	Y+20, r25	; 0x14
    1812:	8b 8b       	std	Y+19, r24	; 0x13
    1814:	0f c0       	rjmp	.+30     	; 0x1834 <Lcd_vidDisplayCharacter+0x128>
    1816:	80 e9       	ldi	r24, 0x90	; 144
    1818:	91 e0       	ldi	r25, 0x01	; 1
    181a:	9a 8b       	std	Y+18, r25	; 0x12
    181c:	89 8b       	std	Y+17, r24	; 0x11
    181e:	89 89       	ldd	r24, Y+17	; 0x11
    1820:	9a 89       	ldd	r25, Y+18	; 0x12
    1822:	01 97       	sbiw	r24, 0x01	; 1
    1824:	f1 f7       	brne	.-4      	; 0x1822 <Lcd_vidDisplayCharacter+0x116>
    1826:	9a 8b       	std	Y+18, r25	; 0x12
    1828:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    182a:	8b 89       	ldd	r24, Y+19	; 0x13
    182c:	9c 89       	ldd	r25, Y+20	; 0x14
    182e:	01 97       	sbiw	r24, 0x01	; 1
    1830:	9c 8b       	std	Y+20, r25	; 0x14
    1832:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1834:	8b 89       	ldd	r24, Y+19	; 0x13
    1836:	9c 89       	ldd	r25, Y+20	; 0x14
    1838:	00 97       	sbiw	r24, 0x00	; 0
    183a:	69 f7       	brne	.-38     	; 0x1816 <Lcd_vidDisplayCharacter+0x10a>
    183c:	14 c0       	rjmp	.+40     	; 0x1866 <Lcd_vidDisplayCharacter+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    183e:	6d 89       	ldd	r22, Y+21	; 0x15
    1840:	7e 89       	ldd	r23, Y+22	; 0x16
    1842:	8f 89       	ldd	r24, Y+23	; 0x17
    1844:	98 8d       	ldd	r25, Y+24	; 0x18
    1846:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    184a:	dc 01       	movw	r26, r24
    184c:	cb 01       	movw	r24, r22
    184e:	9c 8b       	std	Y+20, r25	; 0x14
    1850:	8b 8b       	std	Y+19, r24	; 0x13
    1852:	8b 89       	ldd	r24, Y+19	; 0x13
    1854:	9c 89       	ldd	r25, Y+20	; 0x14
    1856:	98 8b       	std	Y+16, r25	; 0x10
    1858:	8f 87       	std	Y+15, r24	; 0x0f
    185a:	8f 85       	ldd	r24, Y+15	; 0x0f
    185c:	98 89       	ldd	r25, Y+16	; 0x10
    185e:	01 97       	sbiw	r24, 0x01	; 1
    1860:	f1 f7       	brne	.-4      	; 0x185e <Lcd_vidDisplayCharacter+0x152>
    1862:	98 8b       	std	Y+16, r25	; 0x10
    1864:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_enuWriteChannel( LCD_u8ENABLE , LCD_u8ENABLE_LOW );
    1866:	88 e0       	ldi	r24, 0x08	; 8
    1868:	60 e0       	ldi	r22, 0x00	; 0
    186a:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_enuWriteChannel>
    186e:	80 e0       	ldi	r24, 0x00	; 0
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	a0 e8       	ldi	r26, 0x80	; 128
    1874:	bf e3       	ldi	r27, 0x3F	; 63
    1876:	8b 87       	std	Y+11, r24	; 0x0b
    1878:	9c 87       	std	Y+12, r25	; 0x0c
    187a:	ad 87       	std	Y+13, r26	; 0x0d
    187c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    187e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1880:	7c 85       	ldd	r23, Y+12	; 0x0c
    1882:	8d 85       	ldd	r24, Y+13	; 0x0d
    1884:	9e 85       	ldd	r25, Y+14	; 0x0e
    1886:	20 e0       	ldi	r18, 0x00	; 0
    1888:	30 e0       	ldi	r19, 0x00	; 0
    188a:	4a e7       	ldi	r20, 0x7A	; 122
    188c:	55 e4       	ldi	r21, 0x45	; 69
    188e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1892:	dc 01       	movw	r26, r24
    1894:	cb 01       	movw	r24, r22
    1896:	8f 83       	std	Y+7, r24	; 0x07
    1898:	98 87       	std	Y+8, r25	; 0x08
    189a:	a9 87       	std	Y+9, r26	; 0x09
    189c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    189e:	6f 81       	ldd	r22, Y+7	; 0x07
    18a0:	78 85       	ldd	r23, Y+8	; 0x08
    18a2:	89 85       	ldd	r24, Y+9	; 0x09
    18a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    18a6:	20 e0       	ldi	r18, 0x00	; 0
    18a8:	30 e0       	ldi	r19, 0x00	; 0
    18aa:	40 e8       	ldi	r20, 0x80	; 128
    18ac:	5f e3       	ldi	r21, 0x3F	; 63
    18ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18b2:	88 23       	and	r24, r24
    18b4:	2c f4       	brge	.+10     	; 0x18c0 <Lcd_vidDisplayCharacter+0x1b4>
		__ticks = 1;
    18b6:	81 e0       	ldi	r24, 0x01	; 1
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	9e 83       	std	Y+6, r25	; 0x06
    18bc:	8d 83       	std	Y+5, r24	; 0x05
    18be:	3f c0       	rjmp	.+126    	; 0x193e <Lcd_vidDisplayCharacter+0x232>
	else if (__tmp > 65535)
    18c0:	6f 81       	ldd	r22, Y+7	; 0x07
    18c2:	78 85       	ldd	r23, Y+8	; 0x08
    18c4:	89 85       	ldd	r24, Y+9	; 0x09
    18c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    18c8:	20 e0       	ldi	r18, 0x00	; 0
    18ca:	3f ef       	ldi	r19, 0xFF	; 255
    18cc:	4f e7       	ldi	r20, 0x7F	; 127
    18ce:	57 e4       	ldi	r21, 0x47	; 71
    18d0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18d4:	18 16       	cp	r1, r24
    18d6:	4c f5       	brge	.+82     	; 0x192a <Lcd_vidDisplayCharacter+0x21e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    18da:	7c 85       	ldd	r23, Y+12	; 0x0c
    18dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    18de:	9e 85       	ldd	r25, Y+14	; 0x0e
    18e0:	20 e0       	ldi	r18, 0x00	; 0
    18e2:	30 e0       	ldi	r19, 0x00	; 0
    18e4:	40 e2       	ldi	r20, 0x20	; 32
    18e6:	51 e4       	ldi	r21, 0x41	; 65
    18e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18ec:	dc 01       	movw	r26, r24
    18ee:	cb 01       	movw	r24, r22
    18f0:	bc 01       	movw	r22, r24
    18f2:	cd 01       	movw	r24, r26
    18f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18f8:	dc 01       	movw	r26, r24
    18fa:	cb 01       	movw	r24, r22
    18fc:	9e 83       	std	Y+6, r25	; 0x06
    18fe:	8d 83       	std	Y+5, r24	; 0x05
    1900:	0f c0       	rjmp	.+30     	; 0x1920 <Lcd_vidDisplayCharacter+0x214>
    1902:	80 e9       	ldi	r24, 0x90	; 144
    1904:	91 e0       	ldi	r25, 0x01	; 1
    1906:	9c 83       	std	Y+4, r25	; 0x04
    1908:	8b 83       	std	Y+3, r24	; 0x03
    190a:	8b 81       	ldd	r24, Y+3	; 0x03
    190c:	9c 81       	ldd	r25, Y+4	; 0x04
    190e:	01 97       	sbiw	r24, 0x01	; 1
    1910:	f1 f7       	brne	.-4      	; 0x190e <Lcd_vidDisplayCharacter+0x202>
    1912:	9c 83       	std	Y+4, r25	; 0x04
    1914:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1916:	8d 81       	ldd	r24, Y+5	; 0x05
    1918:	9e 81       	ldd	r25, Y+6	; 0x06
    191a:	01 97       	sbiw	r24, 0x01	; 1
    191c:	9e 83       	std	Y+6, r25	; 0x06
    191e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1920:	8d 81       	ldd	r24, Y+5	; 0x05
    1922:	9e 81       	ldd	r25, Y+6	; 0x06
    1924:	00 97       	sbiw	r24, 0x00	; 0
    1926:	69 f7       	brne	.-38     	; 0x1902 <Lcd_vidDisplayCharacter+0x1f6>
    1928:	14 c0       	rjmp	.+40     	; 0x1952 <Lcd_vidDisplayCharacter+0x246>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    192a:	6f 81       	ldd	r22, Y+7	; 0x07
    192c:	78 85       	ldd	r23, Y+8	; 0x08
    192e:	89 85       	ldd	r24, Y+9	; 0x09
    1930:	9a 85       	ldd	r25, Y+10	; 0x0a
    1932:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1936:	dc 01       	movw	r26, r24
    1938:	cb 01       	movw	r24, r22
    193a:	9e 83       	std	Y+6, r25	; 0x06
    193c:	8d 83       	std	Y+5, r24	; 0x05
    193e:	8d 81       	ldd	r24, Y+5	; 0x05
    1940:	9e 81       	ldd	r25, Y+6	; 0x06
    1942:	9a 83       	std	Y+2, r25	; 0x02
    1944:	89 83       	std	Y+1, r24	; 0x01
    1946:	89 81       	ldd	r24, Y+1	; 0x01
    1948:	9a 81       	ldd	r25, Y+2	; 0x02
    194a:	01 97       	sbiw	r24, 0x01	; 1
    194c:	f1 f7       	brne	.-4      	; 0x194a <Lcd_vidDisplayCharacter+0x23e>
    194e:	9a 83       	std	Y+2, r25	; 0x02
    1950:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1952:	6d 96       	adiw	r28, 0x1d	; 29
    1954:	0f b6       	in	r0, 0x3f	; 63
    1956:	f8 94       	cli
    1958:	de bf       	out	0x3e, r29	; 62
    195a:	0f be       	out	0x3f, r0	; 63
    195c:	cd bf       	out	0x3d, r28	; 61
    195e:	cf 91       	pop	r28
    1960:	df 91       	pop	r29
    1962:	08 95       	ret

00001964 <Lcd_vidCreateCustomCharacter>:

void Lcd_vidCreateCustomCharacter( pu8 Add_pu8CustomCharacter , u8 Copy_u8CgramAddress )
{
    1964:	df 93       	push	r29
    1966:	cf 93       	push	r28
    1968:	00 d0       	rcall	.+0      	; 0x196a <Lcd_vidCreateCustomCharacter+0x6>
    196a:	00 d0       	rcall	.+0      	; 0x196c <Lcd_vidCreateCustomCharacter+0x8>
    196c:	cd b7       	in	r28, 0x3d	; 61
    196e:	de b7       	in	r29, 0x3e	; 62
    1970:	9b 83       	std	Y+3, r25	; 0x03
    1972:	8a 83       	std	Y+2, r24	; 0x02
    1974:	6c 83       	std	Y+4, r22	; 0x04
	u8 index;

	Lcd_vidSendCommand( Copy_u8CgramAddress );
    1976:	8c 81       	ldd	r24, Y+4	; 0x04
    1978:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <Lcd_vidSendCommand>

	for(index = INDEX_ZERO ; index < INDEX_EIGHT; index ++)
    197c:	19 82       	std	Y+1, r1	; 0x01
    197e:	0d c0       	rjmp	.+26     	; 0x199a <Lcd_vidCreateCustomCharacter+0x36>
	{
		Lcd_vidDisplayCharacter( *Add_pu8CustomCharacter );
    1980:	ea 81       	ldd	r30, Y+2	; 0x02
    1982:	fb 81       	ldd	r31, Y+3	; 0x03
    1984:	80 81       	ld	r24, Z
    1986:	0e 94 86 0b 	call	0x170c	; 0x170c <Lcd_vidDisplayCharacter>
		Add_pu8CustomCharacter++;
    198a:	8a 81       	ldd	r24, Y+2	; 0x02
    198c:	9b 81       	ldd	r25, Y+3	; 0x03
    198e:	01 96       	adiw	r24, 0x01	; 1
    1990:	9b 83       	std	Y+3, r25	; 0x03
    1992:	8a 83       	std	Y+2, r24	; 0x02
{
	u8 index;

	Lcd_vidSendCommand( Copy_u8CgramAddress );

	for(index = INDEX_ZERO ; index < INDEX_EIGHT; index ++)
    1994:	89 81       	ldd	r24, Y+1	; 0x01
    1996:	8f 5f       	subi	r24, 0xFF	; 255
    1998:	89 83       	std	Y+1, r24	; 0x01
    199a:	89 81       	ldd	r24, Y+1	; 0x01
    199c:	88 30       	cpi	r24, 0x08	; 8
    199e:	80 f3       	brcs	.-32     	; 0x1980 <Lcd_vidCreateCustomCharacter+0x1c>
	{
		Lcd_vidDisplayCharacter( *Add_pu8CustomCharacter );
		Add_pu8CustomCharacter++;
	}
}
    19a0:	0f 90       	pop	r0
    19a2:	0f 90       	pop	r0
    19a4:	0f 90       	pop	r0
    19a6:	0f 90       	pop	r0
    19a8:	cf 91       	pop	r28
    19aa:	df 91       	pop	r29
    19ac:	08 95       	ret

000019ae <Lcd_vidDisplayNumber>:

void Lcd_vidDisplayNumber( u32 Copy_u32Number )
{
    19ae:	df 93       	push	r29
    19b0:	cf 93       	push	r28
    19b2:	cd b7       	in	r28, 0x3d	; 61
    19b4:	de b7       	in	r29, 0x3e	; 62
    19b6:	2a 97       	sbiw	r28, 0x0a	; 10
    19b8:	0f b6       	in	r0, 0x3f	; 63
    19ba:	f8 94       	cli
    19bc:	de bf       	out	0x3e, r29	; 62
    19be:	0f be       	out	0x3f, r0	; 63
    19c0:	cd bf       	out	0x3d, r28	; 61
    19c2:	6f 83       	std	Y+7, r22	; 0x07
    19c4:	78 87       	std	Y+8, r23	; 0x08
    19c6:	89 87       	std	Y+9, r24	; 0x09
    19c8:	9a 87       	std	Y+10, r25	; 0x0a
	u32 length = snprintf( LCD_u8ZERO , LCD_u8ZERO , "%ld", Copy_u32Number );
    19ca:	2d b7       	in	r18, 0x3d	; 61
    19cc:	3e b7       	in	r19, 0x3e	; 62
    19ce:	2a 50       	subi	r18, 0x0A	; 10
    19d0:	30 40       	sbci	r19, 0x00	; 0
    19d2:	0f b6       	in	r0, 0x3f	; 63
    19d4:	f8 94       	cli
    19d6:	3e bf       	out	0x3e, r19	; 62
    19d8:	0f be       	out	0x3f, r0	; 63
    19da:	2d bf       	out	0x3d, r18	; 61
    19dc:	ed b7       	in	r30, 0x3d	; 61
    19de:	fe b7       	in	r31, 0x3e	; 62
    19e0:	31 96       	adiw	r30, 0x01	; 1
    19e2:	11 82       	std	Z+1, r1	; 0x01
    19e4:	10 82       	st	Z, r1
    19e6:	13 82       	std	Z+3, r1	; 0x03
    19e8:	12 82       	std	Z+2, r1	; 0x02
    19ea:	80 e6       	ldi	r24, 0x60	; 96
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	95 83       	std	Z+5, r25	; 0x05
    19f0:	84 83       	std	Z+4, r24	; 0x04
    19f2:	8f 81       	ldd	r24, Y+7	; 0x07
    19f4:	98 85       	ldd	r25, Y+8	; 0x08
    19f6:	a9 85       	ldd	r26, Y+9	; 0x09
    19f8:	ba 85       	ldd	r27, Y+10	; 0x0a
    19fa:	86 83       	std	Z+6, r24	; 0x06
    19fc:	97 83       	std	Z+7, r25	; 0x07
    19fe:	a0 87       	std	Z+8, r26	; 0x08
    1a00:	b1 87       	std	Z+9, r27	; 0x09
    1a02:	0e 94 23 15 	call	0x2a46	; 0x2a46 <snprintf>
    1a06:	2d b7       	in	r18, 0x3d	; 61
    1a08:	3e b7       	in	r19, 0x3e	; 62
    1a0a:	26 5f       	subi	r18, 0xF6	; 246
    1a0c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a0e:	0f b6       	in	r0, 0x3f	; 63
    1a10:	f8 94       	cli
    1a12:	3e bf       	out	0x3e, r19	; 62
    1a14:	0f be       	out	0x3f, r0	; 63
    1a16:	2d bf       	out	0x3d, r18	; 61
    1a18:	aa 27       	eor	r26, r26
    1a1a:	97 fd       	sbrc	r25, 7
    1a1c:	a0 95       	com	r26
    1a1e:	ba 2f       	mov	r27, r26
    1a20:	8b 83       	std	Y+3, r24	; 0x03
    1a22:	9c 83       	std	Y+4, r25	; 0x04
    1a24:	ad 83       	std	Y+5, r26	; 0x05
    1a26:	be 83       	std	Y+6, r27	; 0x06
	pu8 str = malloc( length + LCD_u8ONE );
    1a28:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a2c:	0e 94 1e 14 	call	0x283c	; 0x283c <malloc>
    1a30:	9a 83       	std	Y+2, r25	; 0x02
    1a32:	89 83       	std	Y+1, r24	; 0x01
	snprintf( str , length + LCD_u8ONE, "%ld", Copy_u32Number );
    1a34:	2b 81       	ldd	r18, Y+3	; 0x03
    1a36:	3c 81       	ldd	r19, Y+4	; 0x04
    1a38:	8d b7       	in	r24, 0x3d	; 61
    1a3a:	9e b7       	in	r25, 0x3e	; 62
    1a3c:	0a 97       	sbiw	r24, 0x0a	; 10
    1a3e:	0f b6       	in	r0, 0x3f	; 63
    1a40:	f8 94       	cli
    1a42:	9e bf       	out	0x3e, r25	; 62
    1a44:	0f be       	out	0x3f, r0	; 63
    1a46:	8d bf       	out	0x3d, r24	; 61
    1a48:	ed b7       	in	r30, 0x3d	; 61
    1a4a:	fe b7       	in	r31, 0x3e	; 62
    1a4c:	31 96       	adiw	r30, 0x01	; 1
    1a4e:	89 81       	ldd	r24, Y+1	; 0x01
    1a50:	9a 81       	ldd	r25, Y+2	; 0x02
    1a52:	91 83       	std	Z+1, r25	; 0x01
    1a54:	80 83       	st	Z, r24
    1a56:	33 83       	std	Z+3, r19	; 0x03
    1a58:	22 83       	std	Z+2, r18	; 0x02
    1a5a:	80 e6       	ldi	r24, 0x60	; 96
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
    1a5e:	95 83       	std	Z+5, r25	; 0x05
    1a60:	84 83       	std	Z+4, r24	; 0x04
    1a62:	8f 81       	ldd	r24, Y+7	; 0x07
    1a64:	98 85       	ldd	r25, Y+8	; 0x08
    1a66:	a9 85       	ldd	r26, Y+9	; 0x09
    1a68:	ba 85       	ldd	r27, Y+10	; 0x0a
    1a6a:	86 83       	std	Z+6, r24	; 0x06
    1a6c:	97 83       	std	Z+7, r25	; 0x07
    1a6e:	a0 87       	std	Z+8, r26	; 0x08
    1a70:	b1 87       	std	Z+9, r27	; 0x09
    1a72:	0e 94 23 15 	call	0x2a46	; 0x2a46 <snprintf>
    1a76:	2d b7       	in	r18, 0x3d	; 61
    1a78:	3e b7       	in	r19, 0x3e	; 62
    1a7a:	26 5f       	subi	r18, 0xF6	; 246
    1a7c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a7e:	0f b6       	in	r0, 0x3f	; 63
    1a80:	f8 94       	cli
    1a82:	3e bf       	out	0x3e, r19	; 62
    1a84:	0f be       	out	0x3f, r0	; 63
    1a86:	2d bf       	out	0x3d, r18	; 61

	Lcd_vidDisplayString( str );
    1a88:	89 81       	ldd	r24, Y+1	; 0x01
    1a8a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a8c:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <Lcd_vidDisplayString>
}
    1a90:	2a 96       	adiw	r28, 0x0a	; 10
    1a92:	0f b6       	in	r0, 0x3f	; 63
    1a94:	f8 94       	cli
    1a96:	de bf       	out	0x3e, r29	; 62
    1a98:	0f be       	out	0x3f, r0	; 63
    1a9a:	cd bf       	out	0x3d, r28	; 61
    1a9c:	cf 91       	pop	r28
    1a9e:	df 91       	pop	r29
    1aa0:	08 95       	ret

00001aa2 <Lcd_vidGoTo>:

void Lcd_vidGoTo( u8 Copy_u8Row , u8 Copy_u8Col )
{
    1aa2:	df 93       	push	r29
    1aa4:	cf 93       	push	r28
    1aa6:	cd b7       	in	r28, 0x3d	; 61
    1aa8:	de b7       	in	r29, 0x3e	; 62
    1aaa:	60 97       	sbiw	r28, 0x10	; 16
    1aac:	0f b6       	in	r0, 0x3f	; 63
    1aae:	f8 94       	cli
    1ab0:	de bf       	out	0x3e, r29	; 62
    1ab2:	0f be       	out	0x3f, r0	; 63
    1ab4:	cd bf       	out	0x3d, r28	; 61
    1ab6:	8f 87       	std	Y+15, r24	; 0x0f
    1ab8:	68 8b       	std	Y+16, r22	; 0x10
	Lcd_vidSendCommand( Copy_u8Row + Copy_u8Col - LCD_u8ONE );
    1aba:	9f 85       	ldd	r25, Y+15	; 0x0f
    1abc:	88 89       	ldd	r24, Y+16	; 0x10
    1abe:	89 0f       	add	r24, r25
    1ac0:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <Lcd_vidSendCommand>
    1ac4:	80 e0       	ldi	r24, 0x00	; 0
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	a0 e8       	ldi	r26, 0x80	; 128
    1aca:	bf e3       	ldi	r27, 0x3F	; 63
    1acc:	8b 87       	std	Y+11, r24	; 0x0b
    1ace:	9c 87       	std	Y+12, r25	; 0x0c
    1ad0:	ad 87       	std	Y+13, r26	; 0x0d
    1ad2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ad4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ad6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ad8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ada:	9e 85       	ldd	r25, Y+14	; 0x0e
    1adc:	20 e0       	ldi	r18, 0x00	; 0
    1ade:	30 e0       	ldi	r19, 0x00	; 0
    1ae0:	4a e7       	ldi	r20, 0x7A	; 122
    1ae2:	55 e4       	ldi	r21, 0x45	; 69
    1ae4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ae8:	dc 01       	movw	r26, r24
    1aea:	cb 01       	movw	r24, r22
    1aec:	8f 83       	std	Y+7, r24	; 0x07
    1aee:	98 87       	std	Y+8, r25	; 0x08
    1af0:	a9 87       	std	Y+9, r26	; 0x09
    1af2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1af4:	6f 81       	ldd	r22, Y+7	; 0x07
    1af6:	78 85       	ldd	r23, Y+8	; 0x08
    1af8:	89 85       	ldd	r24, Y+9	; 0x09
    1afa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1afc:	20 e0       	ldi	r18, 0x00	; 0
    1afe:	30 e0       	ldi	r19, 0x00	; 0
    1b00:	40 e8       	ldi	r20, 0x80	; 128
    1b02:	5f e3       	ldi	r21, 0x3F	; 63
    1b04:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b08:	88 23       	and	r24, r24
    1b0a:	2c f4       	brge	.+10     	; 0x1b16 <Lcd_vidGoTo+0x74>
		__ticks = 1;
    1b0c:	81 e0       	ldi	r24, 0x01	; 1
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	9e 83       	std	Y+6, r25	; 0x06
    1b12:	8d 83       	std	Y+5, r24	; 0x05
    1b14:	3f c0       	rjmp	.+126    	; 0x1b94 <Lcd_vidGoTo+0xf2>
	else if (__tmp > 65535)
    1b16:	6f 81       	ldd	r22, Y+7	; 0x07
    1b18:	78 85       	ldd	r23, Y+8	; 0x08
    1b1a:	89 85       	ldd	r24, Y+9	; 0x09
    1b1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b1e:	20 e0       	ldi	r18, 0x00	; 0
    1b20:	3f ef       	ldi	r19, 0xFF	; 255
    1b22:	4f e7       	ldi	r20, 0x7F	; 127
    1b24:	57 e4       	ldi	r21, 0x47	; 71
    1b26:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b2a:	18 16       	cp	r1, r24
    1b2c:	4c f5       	brge	.+82     	; 0x1b80 <Lcd_vidGoTo+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b2e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b30:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b32:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b34:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b36:	20 e0       	ldi	r18, 0x00	; 0
    1b38:	30 e0       	ldi	r19, 0x00	; 0
    1b3a:	40 e2       	ldi	r20, 0x20	; 32
    1b3c:	51 e4       	ldi	r21, 0x41	; 65
    1b3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b42:	dc 01       	movw	r26, r24
    1b44:	cb 01       	movw	r24, r22
    1b46:	bc 01       	movw	r22, r24
    1b48:	cd 01       	movw	r24, r26
    1b4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b4e:	dc 01       	movw	r26, r24
    1b50:	cb 01       	movw	r24, r22
    1b52:	9e 83       	std	Y+6, r25	; 0x06
    1b54:	8d 83       	std	Y+5, r24	; 0x05
    1b56:	0f c0       	rjmp	.+30     	; 0x1b76 <Lcd_vidGoTo+0xd4>
    1b58:	80 e9       	ldi	r24, 0x90	; 144
    1b5a:	91 e0       	ldi	r25, 0x01	; 1
    1b5c:	9c 83       	std	Y+4, r25	; 0x04
    1b5e:	8b 83       	std	Y+3, r24	; 0x03
    1b60:	8b 81       	ldd	r24, Y+3	; 0x03
    1b62:	9c 81       	ldd	r25, Y+4	; 0x04
    1b64:	01 97       	sbiw	r24, 0x01	; 1
    1b66:	f1 f7       	brne	.-4      	; 0x1b64 <Lcd_vidGoTo+0xc2>
    1b68:	9c 83       	std	Y+4, r25	; 0x04
    1b6a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b6e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b70:	01 97       	sbiw	r24, 0x01	; 1
    1b72:	9e 83       	std	Y+6, r25	; 0x06
    1b74:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b76:	8d 81       	ldd	r24, Y+5	; 0x05
    1b78:	9e 81       	ldd	r25, Y+6	; 0x06
    1b7a:	00 97       	sbiw	r24, 0x00	; 0
    1b7c:	69 f7       	brne	.-38     	; 0x1b58 <Lcd_vidGoTo+0xb6>
    1b7e:	14 c0       	rjmp	.+40     	; 0x1ba8 <Lcd_vidGoTo+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b80:	6f 81       	ldd	r22, Y+7	; 0x07
    1b82:	78 85       	ldd	r23, Y+8	; 0x08
    1b84:	89 85       	ldd	r24, Y+9	; 0x09
    1b86:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b8c:	dc 01       	movw	r26, r24
    1b8e:	cb 01       	movw	r24, r22
    1b90:	9e 83       	std	Y+6, r25	; 0x06
    1b92:	8d 83       	std	Y+5, r24	; 0x05
    1b94:	8d 81       	ldd	r24, Y+5	; 0x05
    1b96:	9e 81       	ldd	r25, Y+6	; 0x06
    1b98:	9a 83       	std	Y+2, r25	; 0x02
    1b9a:	89 83       	std	Y+1, r24	; 0x01
    1b9c:	89 81       	ldd	r24, Y+1	; 0x01
    1b9e:	9a 81       	ldd	r25, Y+2	; 0x02
    1ba0:	01 97       	sbiw	r24, 0x01	; 1
    1ba2:	f1 f7       	brne	.-4      	; 0x1ba0 <Lcd_vidGoTo+0xfe>
    1ba4:	9a 83       	std	Y+2, r25	; 0x02
    1ba6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1ba8:	60 96       	adiw	r28, 0x10	; 16
    1baa:	0f b6       	in	r0, 0x3f	; 63
    1bac:	f8 94       	cli
    1bae:	de bf       	out	0x3e, r29	; 62
    1bb0:	0f be       	out	0x3f, r0	; 63
    1bb2:	cd bf       	out	0x3d, r28	; 61
    1bb4:	cf 91       	pop	r28
    1bb6:	df 91       	pop	r29
    1bb8:	08 95       	ret

00001bba <Lcd_vidDisplayString>:


void Lcd_vidDisplayString( pu8 Add_pu8String )
{
    1bba:	df 93       	push	r29
    1bbc:	cf 93       	push	r28
    1bbe:	00 d0       	rcall	.+0      	; 0x1bc0 <Lcd_vidDisplayString+0x6>
    1bc0:	cd b7       	in	r28, 0x3d	; 61
    1bc2:	de b7       	in	r29, 0x3e	; 62
    1bc4:	9a 83       	std	Y+2, r25	; 0x02
    1bc6:	89 83       	std	Y+1, r24	; 0x01
    1bc8:	0a c0       	rjmp	.+20     	; 0x1bde <Lcd_vidDisplayString+0x24>
	while( *Add_pu8String != ENDING_CHAR )
	{
		Lcd_vidDisplayCharacter( *Add_pu8String );
    1bca:	e9 81       	ldd	r30, Y+1	; 0x01
    1bcc:	fa 81       	ldd	r31, Y+2	; 0x02
    1bce:	80 81       	ld	r24, Z
    1bd0:	0e 94 86 0b 	call	0x170c	; 0x170c <Lcd_vidDisplayCharacter>
		Add_pu8String++;
    1bd4:	89 81       	ldd	r24, Y+1	; 0x01
    1bd6:	9a 81       	ldd	r25, Y+2	; 0x02
    1bd8:	01 96       	adiw	r24, 0x01	; 1
    1bda:	9a 83       	std	Y+2, r25	; 0x02
    1bdc:	89 83       	std	Y+1, r24	; 0x01
}


void Lcd_vidDisplayString( pu8 Add_pu8String )
{
	while( *Add_pu8String != ENDING_CHAR )
    1bde:	e9 81       	ldd	r30, Y+1	; 0x01
    1be0:	fa 81       	ldd	r31, Y+2	; 0x02
    1be2:	80 81       	ld	r24, Z
    1be4:	88 23       	and	r24, r24
    1be6:	89 f7       	brne	.-30     	; 0x1bca <Lcd_vidDisplayString+0x10>
	{
		Lcd_vidDisplayCharacter( *Add_pu8String );
		Add_pu8String++;
	}
}
    1be8:	0f 90       	pop	r0
    1bea:	0f 90       	pop	r0
    1bec:	cf 91       	pop	r28
    1bee:	df 91       	pop	r29
    1bf0:	08 95       	ret

00001bf2 <Port_enuSetPinDirection>:
#include "Bit_utils.h"
#include <avr/io.h>
#include "Port.h"

Port_tenuErrorStatus Port_enuSetPinDirection(u8 Copy_u8PinNum,u8 Copy_u8PinDirection)
{
    1bf2:	df 93       	push	r29
    1bf4:	cf 93       	push	r28
    1bf6:	cd b7       	in	r28, 0x3d	; 61
    1bf8:	de b7       	in	r29, 0x3e	; 62
    1bfa:	27 97       	sbiw	r28, 0x07	; 7
    1bfc:	0f b6       	in	r0, 0x3f	; 63
    1bfe:	f8 94       	cli
    1c00:	de bf       	out	0x3e, r29	; 62
    1c02:	0f be       	out	0x3f, r0	; 63
    1c04:	cd bf       	out	0x3d, r28	; 61
    1c06:	8c 83       	std	Y+4, r24	; 0x04
    1c08:	6d 83       	std	Y+5, r22	; 0x05
	Port_tenuErrorStatus Loc_enuReturnStatus=Port_enuOk;
    1c0a:	82 e0       	ldi	r24, 0x02	; 2
    1c0c:	8b 83       	std	Y+3, r24	; 0x03
	u8 Loc_u8Port;
	u8 Loc_u8Pin;

	if( Copy_u8PinNum >= PORT_u8NUMBER_OF_PINS )
    1c0e:	8c 81       	ldd	r24, Y+4	; 0x04
    1c10:	80 32       	cpi	r24, 0x20	; 32
    1c12:	10 f0       	brcs	.+4      	; 0x1c18 <Port_enuSetPinDirection+0x26>
	{
		Loc_enuReturnStatus=Port_enuPinError;
    1c14:	1b 82       	std	Y+3, r1	; 0x03
    1c16:	e2 c0       	rjmp	.+452    	; 0x1ddc <Port_enuSetPinDirection+0x1ea>
	}
	else if( (Copy_u8PinDirection != PORT_u8PIN_INPUT) && (Copy_u8PinDirection != PORT_u8PIN_OUTPUT) )
    1c18:	8d 81       	ldd	r24, Y+5	; 0x05
    1c1a:	88 23       	and	r24, r24
    1c1c:	31 f0       	breq	.+12     	; 0x1c2a <Port_enuSetPinDirection+0x38>
    1c1e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c20:	81 30       	cpi	r24, 0x01	; 1
    1c22:	19 f0       	breq	.+6      	; 0x1c2a <Port_enuSetPinDirection+0x38>
	{
		Loc_enuReturnStatus=Port_enuDirectionError;
    1c24:	81 e0       	ldi	r24, 0x01	; 1
    1c26:	8b 83       	std	Y+3, r24	; 0x03
    1c28:	d9 c0       	rjmp	.+434    	; 0x1ddc <Port_enuSetPinDirection+0x1ea>
	}
	else
	{
		Loc_u8Port = Copy_u8PinNum / 8 ;
    1c2a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c2c:	86 95       	lsr	r24
    1c2e:	86 95       	lsr	r24
    1c30:	86 95       	lsr	r24
    1c32:	8a 83       	std	Y+2, r24	; 0x02
		Loc_u8Pin = Copy_u8PinNum % 8 ;
    1c34:	8c 81       	ldd	r24, Y+4	; 0x04
    1c36:	87 70       	andi	r24, 0x07	; 7
    1c38:	89 83       	std	Y+1, r24	; 0x01

		switch(Loc_u8Port)
    1c3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3c:	28 2f       	mov	r18, r24
    1c3e:	30 e0       	ldi	r19, 0x00	; 0
    1c40:	3f 83       	std	Y+7, r19	; 0x07
    1c42:	2e 83       	std	Y+6, r18	; 0x06
    1c44:	8e 81       	ldd	r24, Y+6	; 0x06
    1c46:	9f 81       	ldd	r25, Y+7	; 0x07
    1c48:	81 30       	cpi	r24, 0x01	; 1
    1c4a:	91 05       	cpc	r25, r1
    1c4c:	09 f4       	brne	.+2      	; 0x1c50 <Port_enuSetPinDirection+0x5e>
    1c4e:	43 c0       	rjmp	.+134    	; 0x1cd6 <Port_enuSetPinDirection+0xe4>
    1c50:	2e 81       	ldd	r18, Y+6	; 0x06
    1c52:	3f 81       	ldd	r19, Y+7	; 0x07
    1c54:	22 30       	cpi	r18, 0x02	; 2
    1c56:	31 05       	cpc	r19, r1
    1c58:	2c f4       	brge	.+10     	; 0x1c64 <Port_enuSetPinDirection+0x72>
    1c5a:	8e 81       	ldd	r24, Y+6	; 0x06
    1c5c:	9f 81       	ldd	r25, Y+7	; 0x07
    1c5e:	00 97       	sbiw	r24, 0x00	; 0
    1c60:	71 f0       	breq	.+28     	; 0x1c7e <Port_enuSetPinDirection+0x8c>
    1c62:	bc c0       	rjmp	.+376    	; 0x1ddc <Port_enuSetPinDirection+0x1ea>
    1c64:	2e 81       	ldd	r18, Y+6	; 0x06
    1c66:	3f 81       	ldd	r19, Y+7	; 0x07
    1c68:	22 30       	cpi	r18, 0x02	; 2
    1c6a:	31 05       	cpc	r19, r1
    1c6c:	09 f4       	brne	.+2      	; 0x1c70 <Port_enuSetPinDirection+0x7e>
    1c6e:	5f c0       	rjmp	.+190    	; 0x1d2e <Port_enuSetPinDirection+0x13c>
    1c70:	8e 81       	ldd	r24, Y+6	; 0x06
    1c72:	9f 81       	ldd	r25, Y+7	; 0x07
    1c74:	83 30       	cpi	r24, 0x03	; 3
    1c76:	91 05       	cpc	r25, r1
    1c78:	09 f4       	brne	.+2      	; 0x1c7c <Port_enuSetPinDirection+0x8a>
    1c7a:	85 c0       	rjmp	.+266    	; 0x1d86 <Port_enuSetPinDirection+0x194>
    1c7c:	af c0       	rjmp	.+350    	; 0x1ddc <Port_enuSetPinDirection+0x1ea>
		{
			case PORT_u8PORT_A:
			{
				if(Copy_u8PinDirection == PORT_u8PIN_OUTPUT)
    1c7e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c80:	81 30       	cpi	r24, 0x01	; 1
    1c82:	a1 f4       	brne	.+40     	; 0x1cac <Port_enuSetPinDirection+0xba>
				{
					SET_BIT(DDRA,Loc_u8Pin);
    1c84:	aa e3       	ldi	r26, 0x3A	; 58
    1c86:	b0 e0       	ldi	r27, 0x00	; 0
    1c88:	ea e3       	ldi	r30, 0x3A	; 58
    1c8a:	f0 e0       	ldi	r31, 0x00	; 0
    1c8c:	80 81       	ld	r24, Z
    1c8e:	48 2f       	mov	r20, r24
    1c90:	89 81       	ldd	r24, Y+1	; 0x01
    1c92:	28 2f       	mov	r18, r24
    1c94:	30 e0       	ldi	r19, 0x00	; 0
    1c96:	81 e0       	ldi	r24, 0x01	; 1
    1c98:	90 e0       	ldi	r25, 0x00	; 0
    1c9a:	02 2e       	mov	r0, r18
    1c9c:	02 c0       	rjmp	.+4      	; 0x1ca2 <Port_enuSetPinDirection+0xb0>
    1c9e:	88 0f       	add	r24, r24
    1ca0:	99 1f       	adc	r25, r25
    1ca2:	0a 94       	dec	r0
    1ca4:	e2 f7       	brpl	.-8      	; 0x1c9e <Port_enuSetPinDirection+0xac>
    1ca6:	84 2b       	or	r24, r20
    1ca8:	8c 93       	st	X, r24
    1caa:	98 c0       	rjmp	.+304    	; 0x1ddc <Port_enuSetPinDirection+0x1ea>
				}
				else
				{
					CLR_BIT(DDRA,Loc_u8Pin);
    1cac:	aa e3       	ldi	r26, 0x3A	; 58
    1cae:	b0 e0       	ldi	r27, 0x00	; 0
    1cb0:	ea e3       	ldi	r30, 0x3A	; 58
    1cb2:	f0 e0       	ldi	r31, 0x00	; 0
    1cb4:	80 81       	ld	r24, Z
    1cb6:	48 2f       	mov	r20, r24
    1cb8:	89 81       	ldd	r24, Y+1	; 0x01
    1cba:	28 2f       	mov	r18, r24
    1cbc:	30 e0       	ldi	r19, 0x00	; 0
    1cbe:	81 e0       	ldi	r24, 0x01	; 1
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	02 2e       	mov	r0, r18
    1cc4:	02 c0       	rjmp	.+4      	; 0x1cca <Port_enuSetPinDirection+0xd8>
    1cc6:	88 0f       	add	r24, r24
    1cc8:	99 1f       	adc	r25, r25
    1cca:	0a 94       	dec	r0
    1ccc:	e2 f7       	brpl	.-8      	; 0x1cc6 <Port_enuSetPinDirection+0xd4>
    1cce:	80 95       	com	r24
    1cd0:	84 23       	and	r24, r20
    1cd2:	8c 93       	st	X, r24
    1cd4:	83 c0       	rjmp	.+262    	; 0x1ddc <Port_enuSetPinDirection+0x1ea>
				}
				break;
			}
			case PORT_u8PORT_B:
			{
				if(Copy_u8PinDirection == PORT_u8PIN_OUTPUT)
    1cd6:	8d 81       	ldd	r24, Y+5	; 0x05
    1cd8:	81 30       	cpi	r24, 0x01	; 1
    1cda:	a1 f4       	brne	.+40     	; 0x1d04 <Port_enuSetPinDirection+0x112>
				{
					SET_BIT(DDRB,Loc_u8Pin);
    1cdc:	a7 e3       	ldi	r26, 0x37	; 55
    1cde:	b0 e0       	ldi	r27, 0x00	; 0
    1ce0:	e7 e3       	ldi	r30, 0x37	; 55
    1ce2:	f0 e0       	ldi	r31, 0x00	; 0
    1ce4:	80 81       	ld	r24, Z
    1ce6:	48 2f       	mov	r20, r24
    1ce8:	89 81       	ldd	r24, Y+1	; 0x01
    1cea:	28 2f       	mov	r18, r24
    1cec:	30 e0       	ldi	r19, 0x00	; 0
    1cee:	81 e0       	ldi	r24, 0x01	; 1
    1cf0:	90 e0       	ldi	r25, 0x00	; 0
    1cf2:	02 2e       	mov	r0, r18
    1cf4:	02 c0       	rjmp	.+4      	; 0x1cfa <Port_enuSetPinDirection+0x108>
    1cf6:	88 0f       	add	r24, r24
    1cf8:	99 1f       	adc	r25, r25
    1cfa:	0a 94       	dec	r0
    1cfc:	e2 f7       	brpl	.-8      	; 0x1cf6 <Port_enuSetPinDirection+0x104>
    1cfe:	84 2b       	or	r24, r20
    1d00:	8c 93       	st	X, r24
    1d02:	6c c0       	rjmp	.+216    	; 0x1ddc <Port_enuSetPinDirection+0x1ea>
				}
				else
				{
					CLR_BIT(DDRB,Loc_u8Pin);
    1d04:	a7 e3       	ldi	r26, 0x37	; 55
    1d06:	b0 e0       	ldi	r27, 0x00	; 0
    1d08:	e7 e3       	ldi	r30, 0x37	; 55
    1d0a:	f0 e0       	ldi	r31, 0x00	; 0
    1d0c:	80 81       	ld	r24, Z
    1d0e:	48 2f       	mov	r20, r24
    1d10:	89 81       	ldd	r24, Y+1	; 0x01
    1d12:	28 2f       	mov	r18, r24
    1d14:	30 e0       	ldi	r19, 0x00	; 0
    1d16:	81 e0       	ldi	r24, 0x01	; 1
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	02 2e       	mov	r0, r18
    1d1c:	02 c0       	rjmp	.+4      	; 0x1d22 <Port_enuSetPinDirection+0x130>
    1d1e:	88 0f       	add	r24, r24
    1d20:	99 1f       	adc	r25, r25
    1d22:	0a 94       	dec	r0
    1d24:	e2 f7       	brpl	.-8      	; 0x1d1e <Port_enuSetPinDirection+0x12c>
    1d26:	80 95       	com	r24
    1d28:	84 23       	and	r24, r20
    1d2a:	8c 93       	st	X, r24
    1d2c:	57 c0       	rjmp	.+174    	; 0x1ddc <Port_enuSetPinDirection+0x1ea>
				}
				break;
			}
			case PORT_u8PORT_C:
			{
				if(Copy_u8PinDirection == PORT_u8PIN_OUTPUT)
    1d2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d30:	81 30       	cpi	r24, 0x01	; 1
    1d32:	a1 f4       	brne	.+40     	; 0x1d5c <Port_enuSetPinDirection+0x16a>
				{
					SET_BIT(DDRC,Loc_u8Pin);
    1d34:	a4 e3       	ldi	r26, 0x34	; 52
    1d36:	b0 e0       	ldi	r27, 0x00	; 0
    1d38:	e4 e3       	ldi	r30, 0x34	; 52
    1d3a:	f0 e0       	ldi	r31, 0x00	; 0
    1d3c:	80 81       	ld	r24, Z
    1d3e:	48 2f       	mov	r20, r24
    1d40:	89 81       	ldd	r24, Y+1	; 0x01
    1d42:	28 2f       	mov	r18, r24
    1d44:	30 e0       	ldi	r19, 0x00	; 0
    1d46:	81 e0       	ldi	r24, 0x01	; 1
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	02 2e       	mov	r0, r18
    1d4c:	02 c0       	rjmp	.+4      	; 0x1d52 <Port_enuSetPinDirection+0x160>
    1d4e:	88 0f       	add	r24, r24
    1d50:	99 1f       	adc	r25, r25
    1d52:	0a 94       	dec	r0
    1d54:	e2 f7       	brpl	.-8      	; 0x1d4e <Port_enuSetPinDirection+0x15c>
    1d56:	84 2b       	or	r24, r20
    1d58:	8c 93       	st	X, r24
    1d5a:	40 c0       	rjmp	.+128    	; 0x1ddc <Port_enuSetPinDirection+0x1ea>
				}
				else
				{
					CLR_BIT(DDRC,Loc_u8Pin);
    1d5c:	a4 e3       	ldi	r26, 0x34	; 52
    1d5e:	b0 e0       	ldi	r27, 0x00	; 0
    1d60:	e4 e3       	ldi	r30, 0x34	; 52
    1d62:	f0 e0       	ldi	r31, 0x00	; 0
    1d64:	80 81       	ld	r24, Z
    1d66:	48 2f       	mov	r20, r24
    1d68:	89 81       	ldd	r24, Y+1	; 0x01
    1d6a:	28 2f       	mov	r18, r24
    1d6c:	30 e0       	ldi	r19, 0x00	; 0
    1d6e:	81 e0       	ldi	r24, 0x01	; 1
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	02 2e       	mov	r0, r18
    1d74:	02 c0       	rjmp	.+4      	; 0x1d7a <Port_enuSetPinDirection+0x188>
    1d76:	88 0f       	add	r24, r24
    1d78:	99 1f       	adc	r25, r25
    1d7a:	0a 94       	dec	r0
    1d7c:	e2 f7       	brpl	.-8      	; 0x1d76 <Port_enuSetPinDirection+0x184>
    1d7e:	80 95       	com	r24
    1d80:	84 23       	and	r24, r20
    1d82:	8c 93       	st	X, r24
    1d84:	2b c0       	rjmp	.+86     	; 0x1ddc <Port_enuSetPinDirection+0x1ea>
				}
				break;
			}
			case PORT_u8PORT_D:
			{
				if(Copy_u8PinDirection == PORT_u8PIN_OUTPUT)
    1d86:	8d 81       	ldd	r24, Y+5	; 0x05
    1d88:	81 30       	cpi	r24, 0x01	; 1
    1d8a:	a1 f4       	brne	.+40     	; 0x1db4 <Port_enuSetPinDirection+0x1c2>
				{
					SET_BIT(DDRD,Loc_u8Pin);
    1d8c:	a1 e3       	ldi	r26, 0x31	; 49
    1d8e:	b0 e0       	ldi	r27, 0x00	; 0
    1d90:	e1 e3       	ldi	r30, 0x31	; 49
    1d92:	f0 e0       	ldi	r31, 0x00	; 0
    1d94:	80 81       	ld	r24, Z
    1d96:	48 2f       	mov	r20, r24
    1d98:	89 81       	ldd	r24, Y+1	; 0x01
    1d9a:	28 2f       	mov	r18, r24
    1d9c:	30 e0       	ldi	r19, 0x00	; 0
    1d9e:	81 e0       	ldi	r24, 0x01	; 1
    1da0:	90 e0       	ldi	r25, 0x00	; 0
    1da2:	02 2e       	mov	r0, r18
    1da4:	02 c0       	rjmp	.+4      	; 0x1daa <Port_enuSetPinDirection+0x1b8>
    1da6:	88 0f       	add	r24, r24
    1da8:	99 1f       	adc	r25, r25
    1daa:	0a 94       	dec	r0
    1dac:	e2 f7       	brpl	.-8      	; 0x1da6 <Port_enuSetPinDirection+0x1b4>
    1dae:	84 2b       	or	r24, r20
    1db0:	8c 93       	st	X, r24
    1db2:	14 c0       	rjmp	.+40     	; 0x1ddc <Port_enuSetPinDirection+0x1ea>
				}
				else
				{
					CLR_BIT(DDRD,Loc_u8Pin);
    1db4:	a1 e3       	ldi	r26, 0x31	; 49
    1db6:	b0 e0       	ldi	r27, 0x00	; 0
    1db8:	e1 e3       	ldi	r30, 0x31	; 49
    1dba:	f0 e0       	ldi	r31, 0x00	; 0
    1dbc:	80 81       	ld	r24, Z
    1dbe:	48 2f       	mov	r20, r24
    1dc0:	89 81       	ldd	r24, Y+1	; 0x01
    1dc2:	28 2f       	mov	r18, r24
    1dc4:	30 e0       	ldi	r19, 0x00	; 0
    1dc6:	81 e0       	ldi	r24, 0x01	; 1
    1dc8:	90 e0       	ldi	r25, 0x00	; 0
    1dca:	02 2e       	mov	r0, r18
    1dcc:	02 c0       	rjmp	.+4      	; 0x1dd2 <Port_enuSetPinDirection+0x1e0>
    1dce:	88 0f       	add	r24, r24
    1dd0:	99 1f       	adc	r25, r25
    1dd2:	0a 94       	dec	r0
    1dd4:	e2 f7       	brpl	.-8      	; 0x1dce <Port_enuSetPinDirection+0x1dc>
    1dd6:	80 95       	com	r24
    1dd8:	84 23       	and	r24, r20
    1dda:	8c 93       	st	X, r24
			}
		}
	}


	return Loc_enuReturnStatus;
    1ddc:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1dde:	27 96       	adiw	r28, 0x07	; 7
    1de0:	0f b6       	in	r0, 0x3f	; 63
    1de2:	f8 94       	cli
    1de4:	de bf       	out	0x3e, r29	; 62
    1de6:	0f be       	out	0x3f, r0	; 63
    1de8:	cd bf       	out	0x3d, r28	; 61
    1dea:	cf 91       	pop	r28
    1dec:	df 91       	pop	r29
    1dee:	08 95       	ret

00001df0 <Port_enuSetPinMode>:


Port_tenuErrorStatus Port_enuSetPinMode(u8 Copy_u8PinNum, u8 Copy_u8PinMode)
{
    1df0:	df 93       	push	r29
    1df2:	cf 93       	push	r28
    1df4:	cd b7       	in	r28, 0x3d	; 61
    1df6:	de b7       	in	r29, 0x3e	; 62
    1df8:	2f 97       	sbiw	r28, 0x0f	; 15
    1dfa:	0f b6       	in	r0, 0x3f	; 63
    1dfc:	f8 94       	cli
    1dfe:	de bf       	out	0x3e, r29	; 62
    1e00:	0f be       	out	0x3f, r0	; 63
    1e02:	cd bf       	out	0x3d, r28	; 61
    1e04:	8c 83       	std	Y+4, r24	; 0x04
    1e06:	6d 83       	std	Y+5, r22	; 0x05
	Port_tenuErrorStatus Loc_enuReturnStatus=Port_enuOk;
    1e08:	82 e0       	ldi	r24, 0x02	; 2
    1e0a:	8b 83       	std	Y+3, r24	; 0x03
		u8 Loc_u8Port;
		u8 Loc_u8Pin;
		if( Copy_u8PinNum >= PORT_u8NUMBER_OF_PINS )
    1e0c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e0e:	80 32       	cpi	r24, 0x20	; 32
    1e10:	10 f0       	brcs	.+4      	; 0x1e16 <Port_enuSetPinMode+0x26>
		{
			Loc_enuReturnStatus=Port_enuPinError;
    1e12:	1b 82       	std	Y+3, r1	; 0x03
    1e14:	31 c3       	rjmp	.+1634   	; 0x2478 <Port_enuSetPinMode+0x688>
		}
		else if( ( Copy_u8PinMode!= PORT_u8INPUT_HIGHIMPEDANCE ) && ( Copy_u8PinMode!= PORT_u8INPUT_PULLUP ) && ( Copy_u8PinMode!= PORT_u8OUTPUT_HIGH ) )
    1e16:	8d 81       	ldd	r24, Y+5	; 0x05
    1e18:	88 23       	and	r24, r24
    1e1a:	49 f0       	breq	.+18     	; 0x1e2e <Port_enuSetPinMode+0x3e>
    1e1c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e1e:	81 30       	cpi	r24, 0x01	; 1
    1e20:	31 f0       	breq	.+12     	; 0x1e2e <Port_enuSetPinMode+0x3e>
    1e22:	8d 81       	ldd	r24, Y+5	; 0x05
    1e24:	82 30       	cpi	r24, 0x02	; 2
    1e26:	19 f0       	breq	.+6      	; 0x1e2e <Port_enuSetPinMode+0x3e>
		{
			Loc_enuReturnStatus=Port_enuModeError;
    1e28:	83 e0       	ldi	r24, 0x03	; 3
    1e2a:	8b 83       	std	Y+3, r24	; 0x03
    1e2c:	25 c3       	rjmp	.+1610   	; 0x2478 <Port_enuSetPinMode+0x688>
		}
		else
		{
			Loc_u8Port = Copy_u8PinNum / 8 ;
    1e2e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e30:	86 95       	lsr	r24
    1e32:	86 95       	lsr	r24
    1e34:	86 95       	lsr	r24
    1e36:	8a 83       	std	Y+2, r24	; 0x02
			Loc_u8Pin = Copy_u8PinNum % 8 ;
    1e38:	8c 81       	ldd	r24, Y+4	; 0x04
    1e3a:	87 70       	andi	r24, 0x07	; 7
    1e3c:	89 83       	std	Y+1, r24	; 0x01

			switch(Loc_u8Port)
    1e3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e40:	28 2f       	mov	r18, r24
    1e42:	30 e0       	ldi	r19, 0x00	; 0
    1e44:	3f 87       	std	Y+15, r19	; 0x0f
    1e46:	2e 87       	std	Y+14, r18	; 0x0e
    1e48:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e4a:	9f 85       	ldd	r25, Y+15	; 0x0f
    1e4c:	81 30       	cpi	r24, 0x01	; 1
    1e4e:	91 05       	cpc	r25, r1
    1e50:	09 f4       	brne	.+2      	; 0x1e54 <Port_enuSetPinMode+0x64>
    1e52:	d6 c0       	rjmp	.+428    	; 0x2000 <Port_enuSetPinMode+0x210>
    1e54:	2e 85       	ldd	r18, Y+14	; 0x0e
    1e56:	3f 85       	ldd	r19, Y+15	; 0x0f
    1e58:	22 30       	cpi	r18, 0x02	; 2
    1e5a:	31 05       	cpc	r19, r1
    1e5c:	2c f4       	brge	.+10     	; 0x1e68 <Port_enuSetPinMode+0x78>
    1e5e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e60:	9f 85       	ldd	r25, Y+15	; 0x0f
    1e62:	00 97       	sbiw	r24, 0x00	; 0
    1e64:	71 f0       	breq	.+28     	; 0x1e82 <Port_enuSetPinMode+0x92>
    1e66:	08 c3       	rjmp	.+1552   	; 0x2478 <Port_enuSetPinMode+0x688>
    1e68:	2e 85       	ldd	r18, Y+14	; 0x0e
    1e6a:	3f 85       	ldd	r19, Y+15	; 0x0f
    1e6c:	22 30       	cpi	r18, 0x02	; 2
    1e6e:	31 05       	cpc	r19, r1
    1e70:	09 f4       	brne	.+2      	; 0x1e74 <Port_enuSetPinMode+0x84>
    1e72:	85 c1       	rjmp	.+778    	; 0x217e <Port_enuSetPinMode+0x38e>
    1e74:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e76:	9f 85       	ldd	r25, Y+15	; 0x0f
    1e78:	83 30       	cpi	r24, 0x03	; 3
    1e7a:	91 05       	cpc	r25, r1
    1e7c:	09 f4       	brne	.+2      	; 0x1e80 <Port_enuSetPinMode+0x90>
    1e7e:	3e c2       	rjmp	.+1148   	; 0x22fc <Port_enuSetPinMode+0x50c>
    1e80:	fb c2       	rjmp	.+1526   	; 0x2478 <Port_enuSetPinMode+0x688>
			{
				case PORT_u8PORT_A:
				{
					switch(Copy_u8PinMode)
    1e82:	8d 81       	ldd	r24, Y+5	; 0x05
    1e84:	28 2f       	mov	r18, r24
    1e86:	30 e0       	ldi	r19, 0x00	; 0
    1e88:	3d 87       	std	Y+13, r19	; 0x0d
    1e8a:	2c 87       	std	Y+12, r18	; 0x0c
    1e8c:	8c 85       	ldd	r24, Y+12	; 0x0c
    1e8e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1e90:	81 30       	cpi	r24, 0x01	; 1
    1e92:	91 05       	cpc	r25, r1
    1e94:	09 f4       	brne	.+2      	; 0x1e98 <Port_enuSetPinMode+0xa8>
    1e96:	3f c0       	rjmp	.+126    	; 0x1f16 <Port_enuSetPinMode+0x126>
    1e98:	2c 85       	ldd	r18, Y+12	; 0x0c
    1e9a:	3d 85       	ldd	r19, Y+13	; 0x0d
    1e9c:	22 30       	cpi	r18, 0x02	; 2
    1e9e:	31 05       	cpc	r19, r1
    1ea0:	2c f4       	brge	.+10     	; 0x1eac <Port_enuSetPinMode+0xbc>
    1ea2:	8c 85       	ldd	r24, Y+12	; 0x0c
    1ea4:	9d 85       	ldd	r25, Y+13	; 0x0d
    1ea6:	00 97       	sbiw	r24, 0x00	; 0
    1ea8:	71 f0       	breq	.+28     	; 0x1ec6 <Port_enuSetPinMode+0xd6>
    1eaa:	e6 c2       	rjmp	.+1484   	; 0x2478 <Port_enuSetPinMode+0x688>
    1eac:	2c 85       	ldd	r18, Y+12	; 0x0c
    1eae:	3d 85       	ldd	r19, Y+13	; 0x0d
    1eb0:	22 30       	cpi	r18, 0x02	; 2
    1eb2:	31 05       	cpc	r19, r1
    1eb4:	09 f4       	brne	.+2      	; 0x1eb8 <Port_enuSetPinMode+0xc8>
    1eb6:	56 c0       	rjmp	.+172    	; 0x1f64 <Port_enuSetPinMode+0x174>
    1eb8:	8c 85       	ldd	r24, Y+12	; 0x0c
    1eba:	9d 85       	ldd	r25, Y+13	; 0x0d
    1ebc:	83 30       	cpi	r24, 0x03	; 3
    1ebe:	91 05       	cpc	r25, r1
    1ec0:	09 f4       	brne	.+2      	; 0x1ec4 <Port_enuSetPinMode+0xd4>
    1ec2:	76 c0       	rjmp	.+236    	; 0x1fb0 <Port_enuSetPinMode+0x1c0>
    1ec4:	d9 c2       	rjmp	.+1458   	; 0x2478 <Port_enuSetPinMode+0x688>
					{
						case PORT_u8INPUT_HIGHIMPEDANCE:
						{
							CLR_BIT(DDRA,Loc_u8Pin);
    1ec6:	aa e3       	ldi	r26, 0x3A	; 58
    1ec8:	b0 e0       	ldi	r27, 0x00	; 0
    1eca:	ea e3       	ldi	r30, 0x3A	; 58
    1ecc:	f0 e0       	ldi	r31, 0x00	; 0
    1ece:	80 81       	ld	r24, Z
    1ed0:	48 2f       	mov	r20, r24
    1ed2:	89 81       	ldd	r24, Y+1	; 0x01
    1ed4:	28 2f       	mov	r18, r24
    1ed6:	30 e0       	ldi	r19, 0x00	; 0
    1ed8:	81 e0       	ldi	r24, 0x01	; 1
    1eda:	90 e0       	ldi	r25, 0x00	; 0
    1edc:	02 c0       	rjmp	.+4      	; 0x1ee2 <Port_enuSetPinMode+0xf2>
    1ede:	88 0f       	add	r24, r24
    1ee0:	99 1f       	adc	r25, r25
    1ee2:	2a 95       	dec	r18
    1ee4:	e2 f7       	brpl	.-8      	; 0x1ede <Port_enuSetPinMode+0xee>
    1ee6:	80 95       	com	r24
    1ee8:	84 23       	and	r24, r20
    1eea:	8c 93       	st	X, r24
							CLR_BIT(PORTA,Loc_u8Pin);
    1eec:	ab e3       	ldi	r26, 0x3B	; 59
    1eee:	b0 e0       	ldi	r27, 0x00	; 0
    1ef0:	eb e3       	ldi	r30, 0x3B	; 59
    1ef2:	f0 e0       	ldi	r31, 0x00	; 0
    1ef4:	80 81       	ld	r24, Z
    1ef6:	48 2f       	mov	r20, r24
    1ef8:	89 81       	ldd	r24, Y+1	; 0x01
    1efa:	28 2f       	mov	r18, r24
    1efc:	30 e0       	ldi	r19, 0x00	; 0
    1efe:	81 e0       	ldi	r24, 0x01	; 1
    1f00:	90 e0       	ldi	r25, 0x00	; 0
    1f02:	02 2e       	mov	r0, r18
    1f04:	02 c0       	rjmp	.+4      	; 0x1f0a <Port_enuSetPinMode+0x11a>
    1f06:	88 0f       	add	r24, r24
    1f08:	99 1f       	adc	r25, r25
    1f0a:	0a 94       	dec	r0
    1f0c:	e2 f7       	brpl	.-8      	; 0x1f06 <Port_enuSetPinMode+0x116>
    1f0e:	80 95       	com	r24
    1f10:	84 23       	and	r24, r20
    1f12:	8c 93       	st	X, r24
    1f14:	b1 c2       	rjmp	.+1378   	; 0x2478 <Port_enuSetPinMode+0x688>
							break;
						}
						case PORT_u8INPUT_PULLUP:
						{
							CLR_BIT(DDRA,Loc_u8Pin);
    1f16:	aa e3       	ldi	r26, 0x3A	; 58
    1f18:	b0 e0       	ldi	r27, 0x00	; 0
    1f1a:	ea e3       	ldi	r30, 0x3A	; 58
    1f1c:	f0 e0       	ldi	r31, 0x00	; 0
    1f1e:	80 81       	ld	r24, Z
    1f20:	48 2f       	mov	r20, r24
    1f22:	89 81       	ldd	r24, Y+1	; 0x01
    1f24:	28 2f       	mov	r18, r24
    1f26:	30 e0       	ldi	r19, 0x00	; 0
    1f28:	81 e0       	ldi	r24, 0x01	; 1
    1f2a:	90 e0       	ldi	r25, 0x00	; 0
    1f2c:	02 c0       	rjmp	.+4      	; 0x1f32 <Port_enuSetPinMode+0x142>
    1f2e:	88 0f       	add	r24, r24
    1f30:	99 1f       	adc	r25, r25
    1f32:	2a 95       	dec	r18
    1f34:	e2 f7       	brpl	.-8      	; 0x1f2e <Port_enuSetPinMode+0x13e>
    1f36:	80 95       	com	r24
    1f38:	84 23       	and	r24, r20
    1f3a:	8c 93       	st	X, r24
							SET_BIT(PORTA,Loc_u8Pin);
    1f3c:	ab e3       	ldi	r26, 0x3B	; 59
    1f3e:	b0 e0       	ldi	r27, 0x00	; 0
    1f40:	eb e3       	ldi	r30, 0x3B	; 59
    1f42:	f0 e0       	ldi	r31, 0x00	; 0
    1f44:	80 81       	ld	r24, Z
    1f46:	48 2f       	mov	r20, r24
    1f48:	89 81       	ldd	r24, Y+1	; 0x01
    1f4a:	28 2f       	mov	r18, r24
    1f4c:	30 e0       	ldi	r19, 0x00	; 0
    1f4e:	81 e0       	ldi	r24, 0x01	; 1
    1f50:	90 e0       	ldi	r25, 0x00	; 0
    1f52:	02 2e       	mov	r0, r18
    1f54:	02 c0       	rjmp	.+4      	; 0x1f5a <Port_enuSetPinMode+0x16a>
    1f56:	88 0f       	add	r24, r24
    1f58:	99 1f       	adc	r25, r25
    1f5a:	0a 94       	dec	r0
    1f5c:	e2 f7       	brpl	.-8      	; 0x1f56 <Port_enuSetPinMode+0x166>
    1f5e:	84 2b       	or	r24, r20
    1f60:	8c 93       	st	X, r24
    1f62:	8a c2       	rjmp	.+1300   	; 0x2478 <Port_enuSetPinMode+0x688>
							break;
						}
						case PORT_u8OUTPUT_HIGH:
						{
							SET_BIT(DDRA,Loc_u8Pin);
    1f64:	aa e3       	ldi	r26, 0x3A	; 58
    1f66:	b0 e0       	ldi	r27, 0x00	; 0
    1f68:	ea e3       	ldi	r30, 0x3A	; 58
    1f6a:	f0 e0       	ldi	r31, 0x00	; 0
    1f6c:	80 81       	ld	r24, Z
    1f6e:	48 2f       	mov	r20, r24
    1f70:	89 81       	ldd	r24, Y+1	; 0x01
    1f72:	28 2f       	mov	r18, r24
    1f74:	30 e0       	ldi	r19, 0x00	; 0
    1f76:	81 e0       	ldi	r24, 0x01	; 1
    1f78:	90 e0       	ldi	r25, 0x00	; 0
    1f7a:	02 c0       	rjmp	.+4      	; 0x1f80 <Port_enuSetPinMode+0x190>
    1f7c:	88 0f       	add	r24, r24
    1f7e:	99 1f       	adc	r25, r25
    1f80:	2a 95       	dec	r18
    1f82:	e2 f7       	brpl	.-8      	; 0x1f7c <Port_enuSetPinMode+0x18c>
    1f84:	84 2b       	or	r24, r20
    1f86:	8c 93       	st	X, r24
							SET_BIT(PORTA,Loc_u8Pin);
    1f88:	ab e3       	ldi	r26, 0x3B	; 59
    1f8a:	b0 e0       	ldi	r27, 0x00	; 0
    1f8c:	eb e3       	ldi	r30, 0x3B	; 59
    1f8e:	f0 e0       	ldi	r31, 0x00	; 0
    1f90:	80 81       	ld	r24, Z
    1f92:	48 2f       	mov	r20, r24
    1f94:	89 81       	ldd	r24, Y+1	; 0x01
    1f96:	28 2f       	mov	r18, r24
    1f98:	30 e0       	ldi	r19, 0x00	; 0
    1f9a:	81 e0       	ldi	r24, 0x01	; 1
    1f9c:	90 e0       	ldi	r25, 0x00	; 0
    1f9e:	02 2e       	mov	r0, r18
    1fa0:	02 c0       	rjmp	.+4      	; 0x1fa6 <Port_enuSetPinMode+0x1b6>
    1fa2:	88 0f       	add	r24, r24
    1fa4:	99 1f       	adc	r25, r25
    1fa6:	0a 94       	dec	r0
    1fa8:	e2 f7       	brpl	.-8      	; 0x1fa2 <Port_enuSetPinMode+0x1b2>
    1faa:	84 2b       	or	r24, r20
    1fac:	8c 93       	st	X, r24
    1fae:	64 c2       	rjmp	.+1224   	; 0x2478 <Port_enuSetPinMode+0x688>
							break;
						}
						case PORT_u8OUTPUT_LOW:
						{
							CLR_BIT(DDRA,Loc_u8Pin);
    1fb0:	aa e3       	ldi	r26, 0x3A	; 58
    1fb2:	b0 e0       	ldi	r27, 0x00	; 0
    1fb4:	ea e3       	ldi	r30, 0x3A	; 58
    1fb6:	f0 e0       	ldi	r31, 0x00	; 0
    1fb8:	80 81       	ld	r24, Z
    1fba:	48 2f       	mov	r20, r24
    1fbc:	89 81       	ldd	r24, Y+1	; 0x01
    1fbe:	28 2f       	mov	r18, r24
    1fc0:	30 e0       	ldi	r19, 0x00	; 0
    1fc2:	81 e0       	ldi	r24, 0x01	; 1
    1fc4:	90 e0       	ldi	r25, 0x00	; 0
    1fc6:	02 c0       	rjmp	.+4      	; 0x1fcc <Port_enuSetPinMode+0x1dc>
    1fc8:	88 0f       	add	r24, r24
    1fca:	99 1f       	adc	r25, r25
    1fcc:	2a 95       	dec	r18
    1fce:	e2 f7       	brpl	.-8      	; 0x1fc8 <Port_enuSetPinMode+0x1d8>
    1fd0:	80 95       	com	r24
    1fd2:	84 23       	and	r24, r20
    1fd4:	8c 93       	st	X, r24
							CLR_BIT(PORTA,Loc_u8Pin);
    1fd6:	ab e3       	ldi	r26, 0x3B	; 59
    1fd8:	b0 e0       	ldi	r27, 0x00	; 0
    1fda:	eb e3       	ldi	r30, 0x3B	; 59
    1fdc:	f0 e0       	ldi	r31, 0x00	; 0
    1fde:	80 81       	ld	r24, Z
    1fe0:	48 2f       	mov	r20, r24
    1fe2:	89 81       	ldd	r24, Y+1	; 0x01
    1fe4:	28 2f       	mov	r18, r24
    1fe6:	30 e0       	ldi	r19, 0x00	; 0
    1fe8:	81 e0       	ldi	r24, 0x01	; 1
    1fea:	90 e0       	ldi	r25, 0x00	; 0
    1fec:	02 2e       	mov	r0, r18
    1fee:	02 c0       	rjmp	.+4      	; 0x1ff4 <Port_enuSetPinMode+0x204>
    1ff0:	88 0f       	add	r24, r24
    1ff2:	99 1f       	adc	r25, r25
    1ff4:	0a 94       	dec	r0
    1ff6:	e2 f7       	brpl	.-8      	; 0x1ff0 <Port_enuSetPinMode+0x200>
    1ff8:	80 95       	com	r24
    1ffa:	84 23       	and	r24, r20
    1ffc:	8c 93       	st	X, r24
    1ffe:	3c c2       	rjmp	.+1144   	; 0x2478 <Port_enuSetPinMode+0x688>
					}
					break;
				}
				case PORT_u8PORT_B:
				{
					switch(Copy_u8PinMode)
    2000:	8d 81       	ldd	r24, Y+5	; 0x05
    2002:	28 2f       	mov	r18, r24
    2004:	30 e0       	ldi	r19, 0x00	; 0
    2006:	3b 87       	std	Y+11, r19	; 0x0b
    2008:	2a 87       	std	Y+10, r18	; 0x0a
    200a:	8a 85       	ldd	r24, Y+10	; 0x0a
    200c:	9b 85       	ldd	r25, Y+11	; 0x0b
    200e:	81 30       	cpi	r24, 0x01	; 1
    2010:	91 05       	cpc	r25, r1
    2012:	09 f4       	brne	.+2      	; 0x2016 <Port_enuSetPinMode+0x226>
    2014:	3f c0       	rjmp	.+126    	; 0x2094 <Port_enuSetPinMode+0x2a4>
    2016:	2a 85       	ldd	r18, Y+10	; 0x0a
    2018:	3b 85       	ldd	r19, Y+11	; 0x0b
    201a:	22 30       	cpi	r18, 0x02	; 2
    201c:	31 05       	cpc	r19, r1
    201e:	2c f4       	brge	.+10     	; 0x202a <Port_enuSetPinMode+0x23a>
    2020:	8a 85       	ldd	r24, Y+10	; 0x0a
    2022:	9b 85       	ldd	r25, Y+11	; 0x0b
    2024:	00 97       	sbiw	r24, 0x00	; 0
    2026:	71 f0       	breq	.+28     	; 0x2044 <Port_enuSetPinMode+0x254>
    2028:	27 c2       	rjmp	.+1102   	; 0x2478 <Port_enuSetPinMode+0x688>
    202a:	2a 85       	ldd	r18, Y+10	; 0x0a
    202c:	3b 85       	ldd	r19, Y+11	; 0x0b
    202e:	22 30       	cpi	r18, 0x02	; 2
    2030:	31 05       	cpc	r19, r1
    2032:	09 f4       	brne	.+2      	; 0x2036 <Port_enuSetPinMode+0x246>
    2034:	56 c0       	rjmp	.+172    	; 0x20e2 <Port_enuSetPinMode+0x2f2>
    2036:	8a 85       	ldd	r24, Y+10	; 0x0a
    2038:	9b 85       	ldd	r25, Y+11	; 0x0b
    203a:	83 30       	cpi	r24, 0x03	; 3
    203c:	91 05       	cpc	r25, r1
    203e:	09 f4       	brne	.+2      	; 0x2042 <Port_enuSetPinMode+0x252>
    2040:	76 c0       	rjmp	.+236    	; 0x212e <Port_enuSetPinMode+0x33e>
    2042:	1a c2       	rjmp	.+1076   	; 0x2478 <Port_enuSetPinMode+0x688>
					{
						case PORT_u8INPUT_HIGHIMPEDANCE:
						{
							CLR_BIT(DDRB,Loc_u8Pin);
    2044:	a7 e3       	ldi	r26, 0x37	; 55
    2046:	b0 e0       	ldi	r27, 0x00	; 0
    2048:	e7 e3       	ldi	r30, 0x37	; 55
    204a:	f0 e0       	ldi	r31, 0x00	; 0
    204c:	80 81       	ld	r24, Z
    204e:	48 2f       	mov	r20, r24
    2050:	89 81       	ldd	r24, Y+1	; 0x01
    2052:	28 2f       	mov	r18, r24
    2054:	30 e0       	ldi	r19, 0x00	; 0
    2056:	81 e0       	ldi	r24, 0x01	; 1
    2058:	90 e0       	ldi	r25, 0x00	; 0
    205a:	02 c0       	rjmp	.+4      	; 0x2060 <Port_enuSetPinMode+0x270>
    205c:	88 0f       	add	r24, r24
    205e:	99 1f       	adc	r25, r25
    2060:	2a 95       	dec	r18
    2062:	e2 f7       	brpl	.-8      	; 0x205c <Port_enuSetPinMode+0x26c>
    2064:	80 95       	com	r24
    2066:	84 23       	and	r24, r20
    2068:	8c 93       	st	X, r24
							CLR_BIT(PORTB,Loc_u8Pin);
    206a:	a8 e3       	ldi	r26, 0x38	; 56
    206c:	b0 e0       	ldi	r27, 0x00	; 0
    206e:	e8 e3       	ldi	r30, 0x38	; 56
    2070:	f0 e0       	ldi	r31, 0x00	; 0
    2072:	80 81       	ld	r24, Z
    2074:	48 2f       	mov	r20, r24
    2076:	89 81       	ldd	r24, Y+1	; 0x01
    2078:	28 2f       	mov	r18, r24
    207a:	30 e0       	ldi	r19, 0x00	; 0
    207c:	81 e0       	ldi	r24, 0x01	; 1
    207e:	90 e0       	ldi	r25, 0x00	; 0
    2080:	02 2e       	mov	r0, r18
    2082:	02 c0       	rjmp	.+4      	; 0x2088 <Port_enuSetPinMode+0x298>
    2084:	88 0f       	add	r24, r24
    2086:	99 1f       	adc	r25, r25
    2088:	0a 94       	dec	r0
    208a:	e2 f7       	brpl	.-8      	; 0x2084 <Port_enuSetPinMode+0x294>
    208c:	80 95       	com	r24
    208e:	84 23       	and	r24, r20
    2090:	8c 93       	st	X, r24
    2092:	f2 c1       	rjmp	.+996    	; 0x2478 <Port_enuSetPinMode+0x688>
							break;
						}
						case PORT_u8INPUT_PULLUP:
						{
							CLR_BIT(DDRB,Loc_u8Pin);
    2094:	a7 e3       	ldi	r26, 0x37	; 55
    2096:	b0 e0       	ldi	r27, 0x00	; 0
    2098:	e7 e3       	ldi	r30, 0x37	; 55
    209a:	f0 e0       	ldi	r31, 0x00	; 0
    209c:	80 81       	ld	r24, Z
    209e:	48 2f       	mov	r20, r24
    20a0:	89 81       	ldd	r24, Y+1	; 0x01
    20a2:	28 2f       	mov	r18, r24
    20a4:	30 e0       	ldi	r19, 0x00	; 0
    20a6:	81 e0       	ldi	r24, 0x01	; 1
    20a8:	90 e0       	ldi	r25, 0x00	; 0
    20aa:	02 c0       	rjmp	.+4      	; 0x20b0 <Port_enuSetPinMode+0x2c0>
    20ac:	88 0f       	add	r24, r24
    20ae:	99 1f       	adc	r25, r25
    20b0:	2a 95       	dec	r18
    20b2:	e2 f7       	brpl	.-8      	; 0x20ac <Port_enuSetPinMode+0x2bc>
    20b4:	80 95       	com	r24
    20b6:	84 23       	and	r24, r20
    20b8:	8c 93       	st	X, r24
							SET_BIT(PORTB,Loc_u8Pin);
    20ba:	a8 e3       	ldi	r26, 0x38	; 56
    20bc:	b0 e0       	ldi	r27, 0x00	; 0
    20be:	e8 e3       	ldi	r30, 0x38	; 56
    20c0:	f0 e0       	ldi	r31, 0x00	; 0
    20c2:	80 81       	ld	r24, Z
    20c4:	48 2f       	mov	r20, r24
    20c6:	89 81       	ldd	r24, Y+1	; 0x01
    20c8:	28 2f       	mov	r18, r24
    20ca:	30 e0       	ldi	r19, 0x00	; 0
    20cc:	81 e0       	ldi	r24, 0x01	; 1
    20ce:	90 e0       	ldi	r25, 0x00	; 0
    20d0:	02 2e       	mov	r0, r18
    20d2:	02 c0       	rjmp	.+4      	; 0x20d8 <Port_enuSetPinMode+0x2e8>
    20d4:	88 0f       	add	r24, r24
    20d6:	99 1f       	adc	r25, r25
    20d8:	0a 94       	dec	r0
    20da:	e2 f7       	brpl	.-8      	; 0x20d4 <Port_enuSetPinMode+0x2e4>
    20dc:	84 2b       	or	r24, r20
    20de:	8c 93       	st	X, r24
    20e0:	cb c1       	rjmp	.+918    	; 0x2478 <Port_enuSetPinMode+0x688>
							break;
						}
						case PORT_u8OUTPUT_HIGH:
						{
							SET_BIT(DDRB,Loc_u8Pin);
    20e2:	a7 e3       	ldi	r26, 0x37	; 55
    20e4:	b0 e0       	ldi	r27, 0x00	; 0
    20e6:	e7 e3       	ldi	r30, 0x37	; 55
    20e8:	f0 e0       	ldi	r31, 0x00	; 0
    20ea:	80 81       	ld	r24, Z
    20ec:	48 2f       	mov	r20, r24
    20ee:	89 81       	ldd	r24, Y+1	; 0x01
    20f0:	28 2f       	mov	r18, r24
    20f2:	30 e0       	ldi	r19, 0x00	; 0
    20f4:	81 e0       	ldi	r24, 0x01	; 1
    20f6:	90 e0       	ldi	r25, 0x00	; 0
    20f8:	02 c0       	rjmp	.+4      	; 0x20fe <Port_enuSetPinMode+0x30e>
    20fa:	88 0f       	add	r24, r24
    20fc:	99 1f       	adc	r25, r25
    20fe:	2a 95       	dec	r18
    2100:	e2 f7       	brpl	.-8      	; 0x20fa <Port_enuSetPinMode+0x30a>
    2102:	84 2b       	or	r24, r20
    2104:	8c 93       	st	X, r24
							SET_BIT(PORTB,Loc_u8Pin);
    2106:	a8 e3       	ldi	r26, 0x38	; 56
    2108:	b0 e0       	ldi	r27, 0x00	; 0
    210a:	e8 e3       	ldi	r30, 0x38	; 56
    210c:	f0 e0       	ldi	r31, 0x00	; 0
    210e:	80 81       	ld	r24, Z
    2110:	48 2f       	mov	r20, r24
    2112:	89 81       	ldd	r24, Y+1	; 0x01
    2114:	28 2f       	mov	r18, r24
    2116:	30 e0       	ldi	r19, 0x00	; 0
    2118:	81 e0       	ldi	r24, 0x01	; 1
    211a:	90 e0       	ldi	r25, 0x00	; 0
    211c:	02 2e       	mov	r0, r18
    211e:	02 c0       	rjmp	.+4      	; 0x2124 <Port_enuSetPinMode+0x334>
    2120:	88 0f       	add	r24, r24
    2122:	99 1f       	adc	r25, r25
    2124:	0a 94       	dec	r0
    2126:	e2 f7       	brpl	.-8      	; 0x2120 <Port_enuSetPinMode+0x330>
    2128:	84 2b       	or	r24, r20
    212a:	8c 93       	st	X, r24
    212c:	a5 c1       	rjmp	.+842    	; 0x2478 <Port_enuSetPinMode+0x688>
							break;
						}
						case PORT_u8OUTPUT_LOW:
						{
							CLR_BIT(DDRB,Loc_u8Pin);
    212e:	a7 e3       	ldi	r26, 0x37	; 55
    2130:	b0 e0       	ldi	r27, 0x00	; 0
    2132:	e7 e3       	ldi	r30, 0x37	; 55
    2134:	f0 e0       	ldi	r31, 0x00	; 0
    2136:	80 81       	ld	r24, Z
    2138:	48 2f       	mov	r20, r24
    213a:	89 81       	ldd	r24, Y+1	; 0x01
    213c:	28 2f       	mov	r18, r24
    213e:	30 e0       	ldi	r19, 0x00	; 0
    2140:	81 e0       	ldi	r24, 0x01	; 1
    2142:	90 e0       	ldi	r25, 0x00	; 0
    2144:	02 c0       	rjmp	.+4      	; 0x214a <Port_enuSetPinMode+0x35a>
    2146:	88 0f       	add	r24, r24
    2148:	99 1f       	adc	r25, r25
    214a:	2a 95       	dec	r18
    214c:	e2 f7       	brpl	.-8      	; 0x2146 <Port_enuSetPinMode+0x356>
    214e:	80 95       	com	r24
    2150:	84 23       	and	r24, r20
    2152:	8c 93       	st	X, r24
							CLR_BIT(PORTB,Loc_u8Pin);
    2154:	a8 e3       	ldi	r26, 0x38	; 56
    2156:	b0 e0       	ldi	r27, 0x00	; 0
    2158:	e8 e3       	ldi	r30, 0x38	; 56
    215a:	f0 e0       	ldi	r31, 0x00	; 0
    215c:	80 81       	ld	r24, Z
    215e:	48 2f       	mov	r20, r24
    2160:	89 81       	ldd	r24, Y+1	; 0x01
    2162:	28 2f       	mov	r18, r24
    2164:	30 e0       	ldi	r19, 0x00	; 0
    2166:	81 e0       	ldi	r24, 0x01	; 1
    2168:	90 e0       	ldi	r25, 0x00	; 0
    216a:	02 2e       	mov	r0, r18
    216c:	02 c0       	rjmp	.+4      	; 0x2172 <Port_enuSetPinMode+0x382>
    216e:	88 0f       	add	r24, r24
    2170:	99 1f       	adc	r25, r25
    2172:	0a 94       	dec	r0
    2174:	e2 f7       	brpl	.-8      	; 0x216e <Port_enuSetPinMode+0x37e>
    2176:	80 95       	com	r24
    2178:	84 23       	and	r24, r20
    217a:	8c 93       	st	X, r24
    217c:	7d c1       	rjmp	.+762    	; 0x2478 <Port_enuSetPinMode+0x688>
					}
					break;
				}
				case PORT_u8PORT_C:
				{
					switch(Copy_u8PinMode)
    217e:	8d 81       	ldd	r24, Y+5	; 0x05
    2180:	28 2f       	mov	r18, r24
    2182:	30 e0       	ldi	r19, 0x00	; 0
    2184:	39 87       	std	Y+9, r19	; 0x09
    2186:	28 87       	std	Y+8, r18	; 0x08
    2188:	88 85       	ldd	r24, Y+8	; 0x08
    218a:	99 85       	ldd	r25, Y+9	; 0x09
    218c:	81 30       	cpi	r24, 0x01	; 1
    218e:	91 05       	cpc	r25, r1
    2190:	09 f4       	brne	.+2      	; 0x2194 <Port_enuSetPinMode+0x3a4>
    2192:	3f c0       	rjmp	.+126    	; 0x2212 <Port_enuSetPinMode+0x422>
    2194:	28 85       	ldd	r18, Y+8	; 0x08
    2196:	39 85       	ldd	r19, Y+9	; 0x09
    2198:	22 30       	cpi	r18, 0x02	; 2
    219a:	31 05       	cpc	r19, r1
    219c:	2c f4       	brge	.+10     	; 0x21a8 <Port_enuSetPinMode+0x3b8>
    219e:	88 85       	ldd	r24, Y+8	; 0x08
    21a0:	99 85       	ldd	r25, Y+9	; 0x09
    21a2:	00 97       	sbiw	r24, 0x00	; 0
    21a4:	71 f0       	breq	.+28     	; 0x21c2 <Port_enuSetPinMode+0x3d2>
    21a6:	68 c1       	rjmp	.+720    	; 0x2478 <Port_enuSetPinMode+0x688>
    21a8:	28 85       	ldd	r18, Y+8	; 0x08
    21aa:	39 85       	ldd	r19, Y+9	; 0x09
    21ac:	22 30       	cpi	r18, 0x02	; 2
    21ae:	31 05       	cpc	r19, r1
    21b0:	09 f4       	brne	.+2      	; 0x21b4 <Port_enuSetPinMode+0x3c4>
    21b2:	56 c0       	rjmp	.+172    	; 0x2260 <Port_enuSetPinMode+0x470>
    21b4:	88 85       	ldd	r24, Y+8	; 0x08
    21b6:	99 85       	ldd	r25, Y+9	; 0x09
    21b8:	83 30       	cpi	r24, 0x03	; 3
    21ba:	91 05       	cpc	r25, r1
    21bc:	09 f4       	brne	.+2      	; 0x21c0 <Port_enuSetPinMode+0x3d0>
    21be:	76 c0       	rjmp	.+236    	; 0x22ac <Port_enuSetPinMode+0x4bc>
    21c0:	5b c1       	rjmp	.+694    	; 0x2478 <Port_enuSetPinMode+0x688>
					{
						case PORT_u8INPUT_HIGHIMPEDANCE:
						{
							CLR_BIT(DDRC,Loc_u8Pin);
    21c2:	a4 e3       	ldi	r26, 0x34	; 52
    21c4:	b0 e0       	ldi	r27, 0x00	; 0
    21c6:	e4 e3       	ldi	r30, 0x34	; 52
    21c8:	f0 e0       	ldi	r31, 0x00	; 0
    21ca:	80 81       	ld	r24, Z
    21cc:	48 2f       	mov	r20, r24
    21ce:	89 81       	ldd	r24, Y+1	; 0x01
    21d0:	28 2f       	mov	r18, r24
    21d2:	30 e0       	ldi	r19, 0x00	; 0
    21d4:	81 e0       	ldi	r24, 0x01	; 1
    21d6:	90 e0       	ldi	r25, 0x00	; 0
    21d8:	02 c0       	rjmp	.+4      	; 0x21de <Port_enuSetPinMode+0x3ee>
    21da:	88 0f       	add	r24, r24
    21dc:	99 1f       	adc	r25, r25
    21de:	2a 95       	dec	r18
    21e0:	e2 f7       	brpl	.-8      	; 0x21da <Port_enuSetPinMode+0x3ea>
    21e2:	80 95       	com	r24
    21e4:	84 23       	and	r24, r20
    21e6:	8c 93       	st	X, r24
							CLR_BIT(PORTC,Loc_u8Pin);
    21e8:	a5 e3       	ldi	r26, 0x35	; 53
    21ea:	b0 e0       	ldi	r27, 0x00	; 0
    21ec:	e5 e3       	ldi	r30, 0x35	; 53
    21ee:	f0 e0       	ldi	r31, 0x00	; 0
    21f0:	80 81       	ld	r24, Z
    21f2:	48 2f       	mov	r20, r24
    21f4:	89 81       	ldd	r24, Y+1	; 0x01
    21f6:	28 2f       	mov	r18, r24
    21f8:	30 e0       	ldi	r19, 0x00	; 0
    21fa:	81 e0       	ldi	r24, 0x01	; 1
    21fc:	90 e0       	ldi	r25, 0x00	; 0
    21fe:	02 2e       	mov	r0, r18
    2200:	02 c0       	rjmp	.+4      	; 0x2206 <Port_enuSetPinMode+0x416>
    2202:	88 0f       	add	r24, r24
    2204:	99 1f       	adc	r25, r25
    2206:	0a 94       	dec	r0
    2208:	e2 f7       	brpl	.-8      	; 0x2202 <Port_enuSetPinMode+0x412>
    220a:	80 95       	com	r24
    220c:	84 23       	and	r24, r20
    220e:	8c 93       	st	X, r24
    2210:	33 c1       	rjmp	.+614    	; 0x2478 <Port_enuSetPinMode+0x688>
							break;
						}
						case PORT_u8INPUT_PULLUP:
						{
							CLR_BIT(DDRC,Loc_u8Pin);
    2212:	a4 e3       	ldi	r26, 0x34	; 52
    2214:	b0 e0       	ldi	r27, 0x00	; 0
    2216:	e4 e3       	ldi	r30, 0x34	; 52
    2218:	f0 e0       	ldi	r31, 0x00	; 0
    221a:	80 81       	ld	r24, Z
    221c:	48 2f       	mov	r20, r24
    221e:	89 81       	ldd	r24, Y+1	; 0x01
    2220:	28 2f       	mov	r18, r24
    2222:	30 e0       	ldi	r19, 0x00	; 0
    2224:	81 e0       	ldi	r24, 0x01	; 1
    2226:	90 e0       	ldi	r25, 0x00	; 0
    2228:	02 c0       	rjmp	.+4      	; 0x222e <Port_enuSetPinMode+0x43e>
    222a:	88 0f       	add	r24, r24
    222c:	99 1f       	adc	r25, r25
    222e:	2a 95       	dec	r18
    2230:	e2 f7       	brpl	.-8      	; 0x222a <Port_enuSetPinMode+0x43a>
    2232:	80 95       	com	r24
    2234:	84 23       	and	r24, r20
    2236:	8c 93       	st	X, r24
							SET_BIT(PORTC,Loc_u8Pin);
    2238:	a5 e3       	ldi	r26, 0x35	; 53
    223a:	b0 e0       	ldi	r27, 0x00	; 0
    223c:	e5 e3       	ldi	r30, 0x35	; 53
    223e:	f0 e0       	ldi	r31, 0x00	; 0
    2240:	80 81       	ld	r24, Z
    2242:	48 2f       	mov	r20, r24
    2244:	89 81       	ldd	r24, Y+1	; 0x01
    2246:	28 2f       	mov	r18, r24
    2248:	30 e0       	ldi	r19, 0x00	; 0
    224a:	81 e0       	ldi	r24, 0x01	; 1
    224c:	90 e0       	ldi	r25, 0x00	; 0
    224e:	02 2e       	mov	r0, r18
    2250:	02 c0       	rjmp	.+4      	; 0x2256 <Port_enuSetPinMode+0x466>
    2252:	88 0f       	add	r24, r24
    2254:	99 1f       	adc	r25, r25
    2256:	0a 94       	dec	r0
    2258:	e2 f7       	brpl	.-8      	; 0x2252 <Port_enuSetPinMode+0x462>
    225a:	84 2b       	or	r24, r20
    225c:	8c 93       	st	X, r24
    225e:	0c c1       	rjmp	.+536    	; 0x2478 <Port_enuSetPinMode+0x688>
							break;
						}
						case PORT_u8OUTPUT_HIGH:
						{
							SET_BIT(DDRC,Loc_u8Pin);
    2260:	a4 e3       	ldi	r26, 0x34	; 52
    2262:	b0 e0       	ldi	r27, 0x00	; 0
    2264:	e4 e3       	ldi	r30, 0x34	; 52
    2266:	f0 e0       	ldi	r31, 0x00	; 0
    2268:	80 81       	ld	r24, Z
    226a:	48 2f       	mov	r20, r24
    226c:	89 81       	ldd	r24, Y+1	; 0x01
    226e:	28 2f       	mov	r18, r24
    2270:	30 e0       	ldi	r19, 0x00	; 0
    2272:	81 e0       	ldi	r24, 0x01	; 1
    2274:	90 e0       	ldi	r25, 0x00	; 0
    2276:	02 c0       	rjmp	.+4      	; 0x227c <Port_enuSetPinMode+0x48c>
    2278:	88 0f       	add	r24, r24
    227a:	99 1f       	adc	r25, r25
    227c:	2a 95       	dec	r18
    227e:	e2 f7       	brpl	.-8      	; 0x2278 <Port_enuSetPinMode+0x488>
    2280:	84 2b       	or	r24, r20
    2282:	8c 93       	st	X, r24
							SET_BIT(PORTC,Loc_u8Pin);
    2284:	a5 e3       	ldi	r26, 0x35	; 53
    2286:	b0 e0       	ldi	r27, 0x00	; 0
    2288:	e5 e3       	ldi	r30, 0x35	; 53
    228a:	f0 e0       	ldi	r31, 0x00	; 0
    228c:	80 81       	ld	r24, Z
    228e:	48 2f       	mov	r20, r24
    2290:	89 81       	ldd	r24, Y+1	; 0x01
    2292:	28 2f       	mov	r18, r24
    2294:	30 e0       	ldi	r19, 0x00	; 0
    2296:	81 e0       	ldi	r24, 0x01	; 1
    2298:	90 e0       	ldi	r25, 0x00	; 0
    229a:	02 2e       	mov	r0, r18
    229c:	02 c0       	rjmp	.+4      	; 0x22a2 <Port_enuSetPinMode+0x4b2>
    229e:	88 0f       	add	r24, r24
    22a0:	99 1f       	adc	r25, r25
    22a2:	0a 94       	dec	r0
    22a4:	e2 f7       	brpl	.-8      	; 0x229e <Port_enuSetPinMode+0x4ae>
    22a6:	84 2b       	or	r24, r20
    22a8:	8c 93       	st	X, r24
    22aa:	e6 c0       	rjmp	.+460    	; 0x2478 <Port_enuSetPinMode+0x688>
							break;
						}
						case PORT_u8OUTPUT_LOW:
						{
							CLR_BIT(DDRC,Loc_u8Pin);
    22ac:	a4 e3       	ldi	r26, 0x34	; 52
    22ae:	b0 e0       	ldi	r27, 0x00	; 0
    22b0:	e4 e3       	ldi	r30, 0x34	; 52
    22b2:	f0 e0       	ldi	r31, 0x00	; 0
    22b4:	80 81       	ld	r24, Z
    22b6:	48 2f       	mov	r20, r24
    22b8:	89 81       	ldd	r24, Y+1	; 0x01
    22ba:	28 2f       	mov	r18, r24
    22bc:	30 e0       	ldi	r19, 0x00	; 0
    22be:	81 e0       	ldi	r24, 0x01	; 1
    22c0:	90 e0       	ldi	r25, 0x00	; 0
    22c2:	02 c0       	rjmp	.+4      	; 0x22c8 <Port_enuSetPinMode+0x4d8>
    22c4:	88 0f       	add	r24, r24
    22c6:	99 1f       	adc	r25, r25
    22c8:	2a 95       	dec	r18
    22ca:	e2 f7       	brpl	.-8      	; 0x22c4 <Port_enuSetPinMode+0x4d4>
    22cc:	80 95       	com	r24
    22ce:	84 23       	and	r24, r20
    22d0:	8c 93       	st	X, r24
							CLR_BIT(PORTC,Loc_u8Pin);
    22d2:	a5 e3       	ldi	r26, 0x35	; 53
    22d4:	b0 e0       	ldi	r27, 0x00	; 0
    22d6:	e5 e3       	ldi	r30, 0x35	; 53
    22d8:	f0 e0       	ldi	r31, 0x00	; 0
    22da:	80 81       	ld	r24, Z
    22dc:	48 2f       	mov	r20, r24
    22de:	89 81       	ldd	r24, Y+1	; 0x01
    22e0:	28 2f       	mov	r18, r24
    22e2:	30 e0       	ldi	r19, 0x00	; 0
    22e4:	81 e0       	ldi	r24, 0x01	; 1
    22e6:	90 e0       	ldi	r25, 0x00	; 0
    22e8:	02 2e       	mov	r0, r18
    22ea:	02 c0       	rjmp	.+4      	; 0x22f0 <Port_enuSetPinMode+0x500>
    22ec:	88 0f       	add	r24, r24
    22ee:	99 1f       	adc	r25, r25
    22f0:	0a 94       	dec	r0
    22f2:	e2 f7       	brpl	.-8      	; 0x22ec <Port_enuSetPinMode+0x4fc>
    22f4:	80 95       	com	r24
    22f6:	84 23       	and	r24, r20
    22f8:	8c 93       	st	X, r24
    22fa:	be c0       	rjmp	.+380    	; 0x2478 <Port_enuSetPinMode+0x688>
					}
					break;
				}
				case PORT_u8PORT_D:
				{
					switch(Copy_u8PinMode)
    22fc:	8d 81       	ldd	r24, Y+5	; 0x05
    22fe:	28 2f       	mov	r18, r24
    2300:	30 e0       	ldi	r19, 0x00	; 0
    2302:	3f 83       	std	Y+7, r19	; 0x07
    2304:	2e 83       	std	Y+6, r18	; 0x06
    2306:	8e 81       	ldd	r24, Y+6	; 0x06
    2308:	9f 81       	ldd	r25, Y+7	; 0x07
    230a:	81 30       	cpi	r24, 0x01	; 1
    230c:	91 05       	cpc	r25, r1
    230e:	09 f4       	brne	.+2      	; 0x2312 <Port_enuSetPinMode+0x522>
    2310:	3f c0       	rjmp	.+126    	; 0x2390 <Port_enuSetPinMode+0x5a0>
    2312:	2e 81       	ldd	r18, Y+6	; 0x06
    2314:	3f 81       	ldd	r19, Y+7	; 0x07
    2316:	22 30       	cpi	r18, 0x02	; 2
    2318:	31 05       	cpc	r19, r1
    231a:	2c f4       	brge	.+10     	; 0x2326 <Port_enuSetPinMode+0x536>
    231c:	8e 81       	ldd	r24, Y+6	; 0x06
    231e:	9f 81       	ldd	r25, Y+7	; 0x07
    2320:	00 97       	sbiw	r24, 0x00	; 0
    2322:	71 f0       	breq	.+28     	; 0x2340 <Port_enuSetPinMode+0x550>
    2324:	a9 c0       	rjmp	.+338    	; 0x2478 <Port_enuSetPinMode+0x688>
    2326:	2e 81       	ldd	r18, Y+6	; 0x06
    2328:	3f 81       	ldd	r19, Y+7	; 0x07
    232a:	22 30       	cpi	r18, 0x02	; 2
    232c:	31 05       	cpc	r19, r1
    232e:	09 f4       	brne	.+2      	; 0x2332 <Port_enuSetPinMode+0x542>
    2330:	56 c0       	rjmp	.+172    	; 0x23de <Port_enuSetPinMode+0x5ee>
    2332:	8e 81       	ldd	r24, Y+6	; 0x06
    2334:	9f 81       	ldd	r25, Y+7	; 0x07
    2336:	83 30       	cpi	r24, 0x03	; 3
    2338:	91 05       	cpc	r25, r1
    233a:	09 f4       	brne	.+2      	; 0x233e <Port_enuSetPinMode+0x54e>
    233c:	76 c0       	rjmp	.+236    	; 0x242a <Port_enuSetPinMode+0x63a>
    233e:	9c c0       	rjmp	.+312    	; 0x2478 <Port_enuSetPinMode+0x688>
					{
						case PORT_u8INPUT_HIGHIMPEDANCE:
						{
							CLR_BIT(DDRD,Loc_u8Pin);
    2340:	a1 e3       	ldi	r26, 0x31	; 49
    2342:	b0 e0       	ldi	r27, 0x00	; 0
    2344:	e1 e3       	ldi	r30, 0x31	; 49
    2346:	f0 e0       	ldi	r31, 0x00	; 0
    2348:	80 81       	ld	r24, Z
    234a:	48 2f       	mov	r20, r24
    234c:	89 81       	ldd	r24, Y+1	; 0x01
    234e:	28 2f       	mov	r18, r24
    2350:	30 e0       	ldi	r19, 0x00	; 0
    2352:	81 e0       	ldi	r24, 0x01	; 1
    2354:	90 e0       	ldi	r25, 0x00	; 0
    2356:	02 c0       	rjmp	.+4      	; 0x235c <Port_enuSetPinMode+0x56c>
    2358:	88 0f       	add	r24, r24
    235a:	99 1f       	adc	r25, r25
    235c:	2a 95       	dec	r18
    235e:	e2 f7       	brpl	.-8      	; 0x2358 <Port_enuSetPinMode+0x568>
    2360:	80 95       	com	r24
    2362:	84 23       	and	r24, r20
    2364:	8c 93       	st	X, r24
							CLR_BIT(PORTD,Loc_u8Pin);
    2366:	a2 e3       	ldi	r26, 0x32	; 50
    2368:	b0 e0       	ldi	r27, 0x00	; 0
    236a:	e2 e3       	ldi	r30, 0x32	; 50
    236c:	f0 e0       	ldi	r31, 0x00	; 0
    236e:	80 81       	ld	r24, Z
    2370:	48 2f       	mov	r20, r24
    2372:	89 81       	ldd	r24, Y+1	; 0x01
    2374:	28 2f       	mov	r18, r24
    2376:	30 e0       	ldi	r19, 0x00	; 0
    2378:	81 e0       	ldi	r24, 0x01	; 1
    237a:	90 e0       	ldi	r25, 0x00	; 0
    237c:	02 2e       	mov	r0, r18
    237e:	02 c0       	rjmp	.+4      	; 0x2384 <Port_enuSetPinMode+0x594>
    2380:	88 0f       	add	r24, r24
    2382:	99 1f       	adc	r25, r25
    2384:	0a 94       	dec	r0
    2386:	e2 f7       	brpl	.-8      	; 0x2380 <Port_enuSetPinMode+0x590>
    2388:	80 95       	com	r24
    238a:	84 23       	and	r24, r20
    238c:	8c 93       	st	X, r24
    238e:	74 c0       	rjmp	.+232    	; 0x2478 <Port_enuSetPinMode+0x688>
							break;
						}
						case PORT_u8INPUT_PULLUP:
						{
							CLR_BIT(DDRD,Loc_u8Pin);
    2390:	a1 e3       	ldi	r26, 0x31	; 49
    2392:	b0 e0       	ldi	r27, 0x00	; 0
    2394:	e1 e3       	ldi	r30, 0x31	; 49
    2396:	f0 e0       	ldi	r31, 0x00	; 0
    2398:	80 81       	ld	r24, Z
    239a:	48 2f       	mov	r20, r24
    239c:	89 81       	ldd	r24, Y+1	; 0x01
    239e:	28 2f       	mov	r18, r24
    23a0:	30 e0       	ldi	r19, 0x00	; 0
    23a2:	81 e0       	ldi	r24, 0x01	; 1
    23a4:	90 e0       	ldi	r25, 0x00	; 0
    23a6:	02 c0       	rjmp	.+4      	; 0x23ac <Port_enuSetPinMode+0x5bc>
    23a8:	88 0f       	add	r24, r24
    23aa:	99 1f       	adc	r25, r25
    23ac:	2a 95       	dec	r18
    23ae:	e2 f7       	brpl	.-8      	; 0x23a8 <Port_enuSetPinMode+0x5b8>
    23b0:	80 95       	com	r24
    23b2:	84 23       	and	r24, r20
    23b4:	8c 93       	st	X, r24
							SET_BIT(PORTD,Loc_u8Pin);
    23b6:	a2 e3       	ldi	r26, 0x32	; 50
    23b8:	b0 e0       	ldi	r27, 0x00	; 0
    23ba:	e2 e3       	ldi	r30, 0x32	; 50
    23bc:	f0 e0       	ldi	r31, 0x00	; 0
    23be:	80 81       	ld	r24, Z
    23c0:	48 2f       	mov	r20, r24
    23c2:	89 81       	ldd	r24, Y+1	; 0x01
    23c4:	28 2f       	mov	r18, r24
    23c6:	30 e0       	ldi	r19, 0x00	; 0
    23c8:	81 e0       	ldi	r24, 0x01	; 1
    23ca:	90 e0       	ldi	r25, 0x00	; 0
    23cc:	02 2e       	mov	r0, r18
    23ce:	02 c0       	rjmp	.+4      	; 0x23d4 <Port_enuSetPinMode+0x5e4>
    23d0:	88 0f       	add	r24, r24
    23d2:	99 1f       	adc	r25, r25
    23d4:	0a 94       	dec	r0
    23d6:	e2 f7       	brpl	.-8      	; 0x23d0 <Port_enuSetPinMode+0x5e0>
    23d8:	84 2b       	or	r24, r20
    23da:	8c 93       	st	X, r24
    23dc:	4d c0       	rjmp	.+154    	; 0x2478 <Port_enuSetPinMode+0x688>
							break;
						}
						case PORT_u8OUTPUT_HIGH:
						{
							SET_BIT(DDRD,Loc_u8Pin);
    23de:	a1 e3       	ldi	r26, 0x31	; 49
    23e0:	b0 e0       	ldi	r27, 0x00	; 0
    23e2:	e1 e3       	ldi	r30, 0x31	; 49
    23e4:	f0 e0       	ldi	r31, 0x00	; 0
    23e6:	80 81       	ld	r24, Z
    23e8:	48 2f       	mov	r20, r24
    23ea:	89 81       	ldd	r24, Y+1	; 0x01
    23ec:	28 2f       	mov	r18, r24
    23ee:	30 e0       	ldi	r19, 0x00	; 0
    23f0:	81 e0       	ldi	r24, 0x01	; 1
    23f2:	90 e0       	ldi	r25, 0x00	; 0
    23f4:	02 c0       	rjmp	.+4      	; 0x23fa <Port_enuSetPinMode+0x60a>
    23f6:	88 0f       	add	r24, r24
    23f8:	99 1f       	adc	r25, r25
    23fa:	2a 95       	dec	r18
    23fc:	e2 f7       	brpl	.-8      	; 0x23f6 <Port_enuSetPinMode+0x606>
    23fe:	84 2b       	or	r24, r20
    2400:	8c 93       	st	X, r24
							SET_BIT(PORTD,Loc_u8Pin);
    2402:	a2 e3       	ldi	r26, 0x32	; 50
    2404:	b0 e0       	ldi	r27, 0x00	; 0
    2406:	e2 e3       	ldi	r30, 0x32	; 50
    2408:	f0 e0       	ldi	r31, 0x00	; 0
    240a:	80 81       	ld	r24, Z
    240c:	48 2f       	mov	r20, r24
    240e:	89 81       	ldd	r24, Y+1	; 0x01
    2410:	28 2f       	mov	r18, r24
    2412:	30 e0       	ldi	r19, 0x00	; 0
    2414:	81 e0       	ldi	r24, 0x01	; 1
    2416:	90 e0       	ldi	r25, 0x00	; 0
    2418:	02 2e       	mov	r0, r18
    241a:	02 c0       	rjmp	.+4      	; 0x2420 <Port_enuSetPinMode+0x630>
    241c:	88 0f       	add	r24, r24
    241e:	99 1f       	adc	r25, r25
    2420:	0a 94       	dec	r0
    2422:	e2 f7       	brpl	.-8      	; 0x241c <Port_enuSetPinMode+0x62c>
    2424:	84 2b       	or	r24, r20
    2426:	8c 93       	st	X, r24
    2428:	27 c0       	rjmp	.+78     	; 0x2478 <Port_enuSetPinMode+0x688>
							break;
						}
						case PORT_u8OUTPUT_LOW:
						{
							CLR_BIT(DDRD,Loc_u8Pin);
    242a:	a1 e3       	ldi	r26, 0x31	; 49
    242c:	b0 e0       	ldi	r27, 0x00	; 0
    242e:	e1 e3       	ldi	r30, 0x31	; 49
    2430:	f0 e0       	ldi	r31, 0x00	; 0
    2432:	80 81       	ld	r24, Z
    2434:	48 2f       	mov	r20, r24
    2436:	89 81       	ldd	r24, Y+1	; 0x01
    2438:	28 2f       	mov	r18, r24
    243a:	30 e0       	ldi	r19, 0x00	; 0
    243c:	81 e0       	ldi	r24, 0x01	; 1
    243e:	90 e0       	ldi	r25, 0x00	; 0
    2440:	02 c0       	rjmp	.+4      	; 0x2446 <Port_enuSetPinMode+0x656>
    2442:	88 0f       	add	r24, r24
    2444:	99 1f       	adc	r25, r25
    2446:	2a 95       	dec	r18
    2448:	e2 f7       	brpl	.-8      	; 0x2442 <Port_enuSetPinMode+0x652>
    244a:	80 95       	com	r24
    244c:	84 23       	and	r24, r20
    244e:	8c 93       	st	X, r24
							CLR_BIT(PORTD,Loc_u8Pin);
    2450:	a2 e3       	ldi	r26, 0x32	; 50
    2452:	b0 e0       	ldi	r27, 0x00	; 0
    2454:	e2 e3       	ldi	r30, 0x32	; 50
    2456:	f0 e0       	ldi	r31, 0x00	; 0
    2458:	80 81       	ld	r24, Z
    245a:	48 2f       	mov	r20, r24
    245c:	89 81       	ldd	r24, Y+1	; 0x01
    245e:	28 2f       	mov	r18, r24
    2460:	30 e0       	ldi	r19, 0x00	; 0
    2462:	81 e0       	ldi	r24, 0x01	; 1
    2464:	90 e0       	ldi	r25, 0x00	; 0
    2466:	02 2e       	mov	r0, r18
    2468:	02 c0       	rjmp	.+4      	; 0x246e <Port_enuSetPinMode+0x67e>
    246a:	88 0f       	add	r24, r24
    246c:	99 1f       	adc	r25, r25
    246e:	0a 94       	dec	r0
    2470:	e2 f7       	brpl	.-8      	; 0x246a <Port_enuSetPinMode+0x67a>
    2472:	80 95       	com	r24
    2474:	84 23       	and	r24, r20
    2476:	8c 93       	st	X, r24
					}
					break;
				}
			}
		}
		return Loc_enuReturnStatus;
    2478:	8b 81       	ldd	r24, Y+3	; 0x03
}
    247a:	2f 96       	adiw	r28, 0x0f	; 15
    247c:	0f b6       	in	r0, 0x3f	; 63
    247e:	f8 94       	cli
    2480:	de bf       	out	0x3e, r29	; 62
    2482:	0f be       	out	0x3f, r0	; 63
    2484:	cd bf       	out	0x3d, r28	; 61
    2486:	cf 91       	pop	r28
    2488:	df 91       	pop	r29
    248a:	08 95       	ret

0000248c <main>:
#include "Lcd.h"

#include <util/delay.h>

int main(void)
{
    248c:	df 93       	push	r29
    248e:	cf 93       	push	r28
    2490:	cd b7       	in	r28, 0x3d	; 61
    2492:	de b7       	in	r29, 0x3e	; 62
    2494:	e5 97       	sbiw	r28, 0x35	; 53
    2496:	0f b6       	in	r0, 0x3f	; 63
    2498:	f8 94       	cli
    249a:	de bf       	out	0x3e, r29	; 62
    249c:	0f be       	out	0x3f, r0	; 63
    249e:	cd bf       	out	0x3d, r28	; 61

	char  n1[] ="A M D"; char n2[] =" H E ";
    24a0:	ce 01       	movw	r24, r28
    24a2:	80 96       	adiw	r24, 0x20	; 32
    24a4:	9d a7       	std	Y+45, r25	; 0x2d
    24a6:	8c a7       	std	Y+44, r24	; 0x2c
    24a8:	e4 e6       	ldi	r30, 0x64	; 100
    24aa:	f0 e0       	ldi	r31, 0x00	; 0
    24ac:	ff a7       	std	Y+47, r31	; 0x2f
    24ae:	ee a7       	std	Y+46, r30	; 0x2e
    24b0:	f6 e0       	ldi	r31, 0x06	; 6
    24b2:	f8 ab       	std	Y+48, r31	; 0x30
    24b4:	ee a5       	ldd	r30, Y+46	; 0x2e
    24b6:	ff a5       	ldd	r31, Y+47	; 0x2f
    24b8:	00 80       	ld	r0, Z
    24ba:	8e a5       	ldd	r24, Y+46	; 0x2e
    24bc:	9f a5       	ldd	r25, Y+47	; 0x2f
    24be:	01 96       	adiw	r24, 0x01	; 1
    24c0:	9f a7       	std	Y+47, r25	; 0x2f
    24c2:	8e a7       	std	Y+46, r24	; 0x2e
    24c4:	ec a5       	ldd	r30, Y+44	; 0x2c
    24c6:	fd a5       	ldd	r31, Y+45	; 0x2d
    24c8:	00 82       	st	Z, r0
    24ca:	8c a5       	ldd	r24, Y+44	; 0x2c
    24cc:	9d a5       	ldd	r25, Y+45	; 0x2d
    24ce:	01 96       	adiw	r24, 0x01	; 1
    24d0:	9d a7       	std	Y+45, r25	; 0x2d
    24d2:	8c a7       	std	Y+44, r24	; 0x2c
    24d4:	98 a9       	ldd	r25, Y+48	; 0x30
    24d6:	91 50       	subi	r25, 0x01	; 1
    24d8:	98 ab       	std	Y+48, r25	; 0x30
    24da:	e8 a9       	ldd	r30, Y+48	; 0x30
    24dc:	ee 23       	and	r30, r30
    24de:	51 f7       	brne	.-44     	; 0x24b4 <main+0x28>
    24e0:	ce 01       	movw	r24, r28
    24e2:	86 96       	adiw	r24, 0x26	; 38
    24e4:	9a ab       	std	Y+50, r25	; 0x32
    24e6:	89 ab       	std	Y+49, r24	; 0x31
    24e8:	ea e6       	ldi	r30, 0x6A	; 106
    24ea:	f0 e0       	ldi	r31, 0x00	; 0
    24ec:	fc ab       	std	Y+52, r31	; 0x34
    24ee:	eb ab       	std	Y+51, r30	; 0x33
    24f0:	f6 e0       	ldi	r31, 0x06	; 6
    24f2:	fd ab       	std	Y+53, r31	; 0x35
    24f4:	eb a9       	ldd	r30, Y+51	; 0x33
    24f6:	fc a9       	ldd	r31, Y+52	; 0x34
    24f8:	00 80       	ld	r0, Z
    24fa:	8b a9       	ldd	r24, Y+51	; 0x33
    24fc:	9c a9       	ldd	r25, Y+52	; 0x34
    24fe:	01 96       	adiw	r24, 0x01	; 1
    2500:	9c ab       	std	Y+52, r25	; 0x34
    2502:	8b ab       	std	Y+51, r24	; 0x33
    2504:	e9 a9       	ldd	r30, Y+49	; 0x31
    2506:	fa a9       	ldd	r31, Y+50	; 0x32
    2508:	00 82       	st	Z, r0
    250a:	89 a9       	ldd	r24, Y+49	; 0x31
    250c:	9a a9       	ldd	r25, Y+50	; 0x32
    250e:	01 96       	adiw	r24, 0x01	; 1
    2510:	9a ab       	std	Y+50, r25	; 0x32
    2512:	89 ab       	std	Y+49, r24	; 0x31
    2514:	9d a9       	ldd	r25, Y+53	; 0x35
    2516:	91 50       	subi	r25, 0x01	; 1
    2518:	9d ab       	std	Y+53, r25	; 0x35
    251a:	ed a9       	ldd	r30, Y+53	; 0x35
    251c:	ee 23       	and	r30, r30
    251e:	51 f7       	brne	.-44     	; 0x24f4 <main+0x68>
	u8 r = LCD_u8ROW_1 , r2 = LCD_u8ROW_2 ;
    2520:	80 e8       	ldi	r24, 0x80	; 128
    2522:	8f 8f       	std	Y+31, r24	; 0x1f
    2524:	80 ec       	ldi	r24, 0xC0	; 192
    2526:	8e 8f       	std	Y+30, r24	; 0x1e
	s8 c;

	Lcd_vidInit();
    2528:	0e 94 67 08 	call	0x10ce	; 0x10ce <Lcd_vidInit>

	while(1)
	{

		for( c= -4 ; c < 12 ;c++ )
    252c:	8c ef       	ldi	r24, 0xFC	; 252
    252e:	8d 8f       	std	Y+29, r24	; 0x1d
    2530:	a1 c0       	rjmp	.+322    	; 0x2674 <main+0x1e8>
		{
			if(c%2 == 0)
    2532:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2534:	81 70       	andi	r24, 0x01	; 1
    2536:	88 23       	and	r24, r24
    2538:	99 f4       	brne	.+38     	; 0x2560 <main+0xd4>
			{
				Lcd_vidGoTo( r , c);
    253a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    253c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    253e:	69 2f       	mov	r22, r25
    2540:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <Lcd_vidGoTo>
				Lcd_vidDisplayString(n1);
    2544:	ce 01       	movw	r24, r28
    2546:	80 96       	adiw	r24, 0x20	; 32
    2548:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <Lcd_vidDisplayString>
				Lcd_vidGoTo( r2 , c);
    254c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    254e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2550:	69 2f       	mov	r22, r25
    2552:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <Lcd_vidGoTo>
				Lcd_vidDisplayString(n2);
    2556:	ce 01       	movw	r24, r28
    2558:	86 96       	adiw	r24, 0x26	; 38
    255a:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <Lcd_vidDisplayString>
    255e:	12 c0       	rjmp	.+36     	; 0x2584 <main+0xf8>
			}
			else
			{
				Lcd_vidGoTo( r2 , c);
    2560:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2562:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2564:	69 2f       	mov	r22, r25
    2566:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <Lcd_vidGoTo>
				Lcd_vidDisplayString(n1);
    256a:	ce 01       	movw	r24, r28
    256c:	80 96       	adiw	r24, 0x20	; 32
    256e:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <Lcd_vidDisplayString>
				Lcd_vidGoTo( r , c);
    2572:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2574:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2576:	69 2f       	mov	r22, r25
    2578:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <Lcd_vidGoTo>
				Lcd_vidDisplayString(n2);
    257c:	ce 01       	movw	r24, r28
    257e:	86 96       	adiw	r24, 0x26	; 38
    2580:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <Lcd_vidDisplayString>
    2584:	80 e0       	ldi	r24, 0x00	; 0
    2586:	90 e0       	ldi	r25, 0x00	; 0
    2588:	a0 e2       	ldi	r26, 0x20	; 32
    258a:	b1 e4       	ldi	r27, 0x41	; 65
    258c:	89 8f       	std	Y+25, r24	; 0x19
    258e:	9a 8f       	std	Y+26, r25	; 0x1a
    2590:	ab 8f       	std	Y+27, r26	; 0x1b
    2592:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2594:	69 8d       	ldd	r22, Y+25	; 0x19
    2596:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2598:	8b 8d       	ldd	r24, Y+27	; 0x1b
    259a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    259c:	20 e0       	ldi	r18, 0x00	; 0
    259e:	30 e0       	ldi	r19, 0x00	; 0
    25a0:	4a e7       	ldi	r20, 0x7A	; 122
    25a2:	55 e4       	ldi	r21, 0x45	; 69
    25a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25a8:	dc 01       	movw	r26, r24
    25aa:	cb 01       	movw	r24, r22
    25ac:	8d 8b       	std	Y+21, r24	; 0x15
    25ae:	9e 8b       	std	Y+22, r25	; 0x16
    25b0:	af 8b       	std	Y+23, r26	; 0x17
    25b2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    25b4:	6d 89       	ldd	r22, Y+21	; 0x15
    25b6:	7e 89       	ldd	r23, Y+22	; 0x16
    25b8:	8f 89       	ldd	r24, Y+23	; 0x17
    25ba:	98 8d       	ldd	r25, Y+24	; 0x18
    25bc:	20 e0       	ldi	r18, 0x00	; 0
    25be:	30 e0       	ldi	r19, 0x00	; 0
    25c0:	40 e8       	ldi	r20, 0x80	; 128
    25c2:	5f e3       	ldi	r21, 0x3F	; 63
    25c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25c8:	88 23       	and	r24, r24
    25ca:	2c f4       	brge	.+10     	; 0x25d6 <main+0x14a>
		__ticks = 1;
    25cc:	81 e0       	ldi	r24, 0x01	; 1
    25ce:	90 e0       	ldi	r25, 0x00	; 0
    25d0:	9c 8b       	std	Y+20, r25	; 0x14
    25d2:	8b 8b       	std	Y+19, r24	; 0x13
    25d4:	3f c0       	rjmp	.+126    	; 0x2654 <main+0x1c8>
	else if (__tmp > 65535)
    25d6:	6d 89       	ldd	r22, Y+21	; 0x15
    25d8:	7e 89       	ldd	r23, Y+22	; 0x16
    25da:	8f 89       	ldd	r24, Y+23	; 0x17
    25dc:	98 8d       	ldd	r25, Y+24	; 0x18
    25de:	20 e0       	ldi	r18, 0x00	; 0
    25e0:	3f ef       	ldi	r19, 0xFF	; 255
    25e2:	4f e7       	ldi	r20, 0x7F	; 127
    25e4:	57 e4       	ldi	r21, 0x47	; 71
    25e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25ea:	18 16       	cp	r1, r24
    25ec:	4c f5       	brge	.+82     	; 0x2640 <main+0x1b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25ee:	69 8d       	ldd	r22, Y+25	; 0x19
    25f0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25f2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25f4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25f6:	20 e0       	ldi	r18, 0x00	; 0
    25f8:	30 e0       	ldi	r19, 0x00	; 0
    25fa:	40 e2       	ldi	r20, 0x20	; 32
    25fc:	51 e4       	ldi	r21, 0x41	; 65
    25fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2602:	dc 01       	movw	r26, r24
    2604:	cb 01       	movw	r24, r22
    2606:	bc 01       	movw	r22, r24
    2608:	cd 01       	movw	r24, r26
    260a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    260e:	dc 01       	movw	r26, r24
    2610:	cb 01       	movw	r24, r22
    2612:	9c 8b       	std	Y+20, r25	; 0x14
    2614:	8b 8b       	std	Y+19, r24	; 0x13
    2616:	0f c0       	rjmp	.+30     	; 0x2636 <main+0x1aa>
    2618:	80 e9       	ldi	r24, 0x90	; 144
    261a:	91 e0       	ldi	r25, 0x01	; 1
    261c:	9a 8b       	std	Y+18, r25	; 0x12
    261e:	89 8b       	std	Y+17, r24	; 0x11
    2620:	89 89       	ldd	r24, Y+17	; 0x11
    2622:	9a 89       	ldd	r25, Y+18	; 0x12
    2624:	01 97       	sbiw	r24, 0x01	; 1
    2626:	f1 f7       	brne	.-4      	; 0x2624 <main+0x198>
    2628:	9a 8b       	std	Y+18, r25	; 0x12
    262a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    262c:	8b 89       	ldd	r24, Y+19	; 0x13
    262e:	9c 89       	ldd	r25, Y+20	; 0x14
    2630:	01 97       	sbiw	r24, 0x01	; 1
    2632:	9c 8b       	std	Y+20, r25	; 0x14
    2634:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2636:	8b 89       	ldd	r24, Y+19	; 0x13
    2638:	9c 89       	ldd	r25, Y+20	; 0x14
    263a:	00 97       	sbiw	r24, 0x00	; 0
    263c:	69 f7       	brne	.-38     	; 0x2618 <main+0x18c>
    263e:	14 c0       	rjmp	.+40     	; 0x2668 <main+0x1dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2640:	6d 89       	ldd	r22, Y+21	; 0x15
    2642:	7e 89       	ldd	r23, Y+22	; 0x16
    2644:	8f 89       	ldd	r24, Y+23	; 0x17
    2646:	98 8d       	ldd	r25, Y+24	; 0x18
    2648:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    264c:	dc 01       	movw	r26, r24
    264e:	cb 01       	movw	r24, r22
    2650:	9c 8b       	std	Y+20, r25	; 0x14
    2652:	8b 8b       	std	Y+19, r24	; 0x13
    2654:	8b 89       	ldd	r24, Y+19	; 0x13
    2656:	9c 89       	ldd	r25, Y+20	; 0x14
    2658:	98 8b       	std	Y+16, r25	; 0x10
    265a:	8f 87       	std	Y+15, r24	; 0x0f
    265c:	8f 85       	ldd	r24, Y+15	; 0x0f
    265e:	98 89       	ldd	r25, Y+16	; 0x10
    2660:	01 97       	sbiw	r24, 0x01	; 1
    2662:	f1 f7       	brne	.-4      	; 0x2660 <main+0x1d4>
    2664:	98 8b       	std	Y+16, r25	; 0x10
    2666:	8f 87       	std	Y+15, r24	; 0x0f
			}

			_delay_ms(10);
			Lcd_vidSendCommand(LCD_u8CLEAR_DISPLAY);
    2668:	81 e0       	ldi	r24, 0x01	; 1
    266a:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <Lcd_vidSendCommand>
	Lcd_vidInit();

	while(1)
	{

		for( c= -4 ; c < 12 ;c++ )
    266e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2670:	8f 5f       	subi	r24, 0xFF	; 255
    2672:	8d 8f       	std	Y+29, r24	; 0x1d
    2674:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2676:	8c 30       	cpi	r24, 0x0C	; 12
    2678:	0c f4       	brge	.+2      	; 0x267c <main+0x1f0>
    267a:	5b cf       	rjmp	.-330    	; 0x2532 <main+0xa6>

			_delay_ms(10);
			Lcd_vidSendCommand(LCD_u8CLEAR_DISPLAY);
		}

		for( c= 11 ; c >= 0 ;c-- )
    267c:	8b e0       	ldi	r24, 0x0B	; 11
    267e:	8d 8f       	std	Y+29, r24	; 0x1d
    2680:	a1 c0       	rjmp	.+322    	; 0x27c4 <main+0x338>
		{
			if(c%2 == 0)
    2682:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2684:	81 70       	andi	r24, 0x01	; 1
    2686:	88 23       	and	r24, r24
    2688:	99 f4       	brne	.+38     	; 0x26b0 <main+0x224>
			{
				Lcd_vidGoTo( r , c);
    268a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    268c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    268e:	69 2f       	mov	r22, r25
    2690:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <Lcd_vidGoTo>
				Lcd_vidDisplayString(n1);
    2694:	ce 01       	movw	r24, r28
    2696:	80 96       	adiw	r24, 0x20	; 32
    2698:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <Lcd_vidDisplayString>
				Lcd_vidGoTo( r2 , c);
    269c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    269e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    26a0:	69 2f       	mov	r22, r25
    26a2:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <Lcd_vidGoTo>
				Lcd_vidDisplayString(n2);
    26a6:	ce 01       	movw	r24, r28
    26a8:	86 96       	adiw	r24, 0x26	; 38
    26aa:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <Lcd_vidDisplayString>
    26ae:	12 c0       	rjmp	.+36     	; 0x26d4 <main+0x248>
			}
			else
			{
				Lcd_vidGoTo( r2 , c);
    26b0:	9d 8d       	ldd	r25, Y+29	; 0x1d
    26b2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    26b4:	69 2f       	mov	r22, r25
    26b6:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <Lcd_vidGoTo>
				Lcd_vidDisplayString(n1);
    26ba:	ce 01       	movw	r24, r28
    26bc:	80 96       	adiw	r24, 0x20	; 32
    26be:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <Lcd_vidDisplayString>
				Lcd_vidGoTo( r , c);
    26c2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    26c4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    26c6:	69 2f       	mov	r22, r25
    26c8:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <Lcd_vidGoTo>
				Lcd_vidDisplayString(n2);
    26cc:	ce 01       	movw	r24, r28
    26ce:	86 96       	adiw	r24, 0x26	; 38
    26d0:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <Lcd_vidDisplayString>
    26d4:	80 e0       	ldi	r24, 0x00	; 0
    26d6:	90 e0       	ldi	r25, 0x00	; 0
    26d8:	a0 e2       	ldi	r26, 0x20	; 32
    26da:	b1 e4       	ldi	r27, 0x41	; 65
    26dc:	8b 87       	std	Y+11, r24	; 0x0b
    26de:	9c 87       	std	Y+12, r25	; 0x0c
    26e0:	ad 87       	std	Y+13, r26	; 0x0d
    26e2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    26e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    26e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    26ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    26ec:	20 e0       	ldi	r18, 0x00	; 0
    26ee:	30 e0       	ldi	r19, 0x00	; 0
    26f0:	4a e7       	ldi	r20, 0x7A	; 122
    26f2:	55 e4       	ldi	r21, 0x45	; 69
    26f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26f8:	dc 01       	movw	r26, r24
    26fa:	cb 01       	movw	r24, r22
    26fc:	8f 83       	std	Y+7, r24	; 0x07
    26fe:	98 87       	std	Y+8, r25	; 0x08
    2700:	a9 87       	std	Y+9, r26	; 0x09
    2702:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2704:	6f 81       	ldd	r22, Y+7	; 0x07
    2706:	78 85       	ldd	r23, Y+8	; 0x08
    2708:	89 85       	ldd	r24, Y+9	; 0x09
    270a:	9a 85       	ldd	r25, Y+10	; 0x0a
    270c:	20 e0       	ldi	r18, 0x00	; 0
    270e:	30 e0       	ldi	r19, 0x00	; 0
    2710:	40 e8       	ldi	r20, 0x80	; 128
    2712:	5f e3       	ldi	r21, 0x3F	; 63
    2714:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2718:	88 23       	and	r24, r24
    271a:	2c f4       	brge	.+10     	; 0x2726 <main+0x29a>
		__ticks = 1;
    271c:	81 e0       	ldi	r24, 0x01	; 1
    271e:	90 e0       	ldi	r25, 0x00	; 0
    2720:	9e 83       	std	Y+6, r25	; 0x06
    2722:	8d 83       	std	Y+5, r24	; 0x05
    2724:	3f c0       	rjmp	.+126    	; 0x27a4 <main+0x318>
	else if (__tmp > 65535)
    2726:	6f 81       	ldd	r22, Y+7	; 0x07
    2728:	78 85       	ldd	r23, Y+8	; 0x08
    272a:	89 85       	ldd	r24, Y+9	; 0x09
    272c:	9a 85       	ldd	r25, Y+10	; 0x0a
    272e:	20 e0       	ldi	r18, 0x00	; 0
    2730:	3f ef       	ldi	r19, 0xFF	; 255
    2732:	4f e7       	ldi	r20, 0x7F	; 127
    2734:	57 e4       	ldi	r21, 0x47	; 71
    2736:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    273a:	18 16       	cp	r1, r24
    273c:	4c f5       	brge	.+82     	; 0x2790 <main+0x304>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    273e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2740:	7c 85       	ldd	r23, Y+12	; 0x0c
    2742:	8d 85       	ldd	r24, Y+13	; 0x0d
    2744:	9e 85       	ldd	r25, Y+14	; 0x0e
    2746:	20 e0       	ldi	r18, 0x00	; 0
    2748:	30 e0       	ldi	r19, 0x00	; 0
    274a:	40 e2       	ldi	r20, 0x20	; 32
    274c:	51 e4       	ldi	r21, 0x41	; 65
    274e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2752:	dc 01       	movw	r26, r24
    2754:	cb 01       	movw	r24, r22
    2756:	bc 01       	movw	r22, r24
    2758:	cd 01       	movw	r24, r26
    275a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    275e:	dc 01       	movw	r26, r24
    2760:	cb 01       	movw	r24, r22
    2762:	9e 83       	std	Y+6, r25	; 0x06
    2764:	8d 83       	std	Y+5, r24	; 0x05
    2766:	0f c0       	rjmp	.+30     	; 0x2786 <main+0x2fa>
    2768:	80 e9       	ldi	r24, 0x90	; 144
    276a:	91 e0       	ldi	r25, 0x01	; 1
    276c:	9c 83       	std	Y+4, r25	; 0x04
    276e:	8b 83       	std	Y+3, r24	; 0x03
    2770:	8b 81       	ldd	r24, Y+3	; 0x03
    2772:	9c 81       	ldd	r25, Y+4	; 0x04
    2774:	01 97       	sbiw	r24, 0x01	; 1
    2776:	f1 f7       	brne	.-4      	; 0x2774 <main+0x2e8>
    2778:	9c 83       	std	Y+4, r25	; 0x04
    277a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    277c:	8d 81       	ldd	r24, Y+5	; 0x05
    277e:	9e 81       	ldd	r25, Y+6	; 0x06
    2780:	01 97       	sbiw	r24, 0x01	; 1
    2782:	9e 83       	std	Y+6, r25	; 0x06
    2784:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2786:	8d 81       	ldd	r24, Y+5	; 0x05
    2788:	9e 81       	ldd	r25, Y+6	; 0x06
    278a:	00 97       	sbiw	r24, 0x00	; 0
    278c:	69 f7       	brne	.-38     	; 0x2768 <main+0x2dc>
    278e:	14 c0       	rjmp	.+40     	; 0x27b8 <main+0x32c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2790:	6f 81       	ldd	r22, Y+7	; 0x07
    2792:	78 85       	ldd	r23, Y+8	; 0x08
    2794:	89 85       	ldd	r24, Y+9	; 0x09
    2796:	9a 85       	ldd	r25, Y+10	; 0x0a
    2798:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    279c:	dc 01       	movw	r26, r24
    279e:	cb 01       	movw	r24, r22
    27a0:	9e 83       	std	Y+6, r25	; 0x06
    27a2:	8d 83       	std	Y+5, r24	; 0x05
    27a4:	8d 81       	ldd	r24, Y+5	; 0x05
    27a6:	9e 81       	ldd	r25, Y+6	; 0x06
    27a8:	9a 83       	std	Y+2, r25	; 0x02
    27aa:	89 83       	std	Y+1, r24	; 0x01
    27ac:	89 81       	ldd	r24, Y+1	; 0x01
    27ae:	9a 81       	ldd	r25, Y+2	; 0x02
    27b0:	01 97       	sbiw	r24, 0x01	; 1
    27b2:	f1 f7       	brne	.-4      	; 0x27b0 <main+0x324>
    27b4:	9a 83       	std	Y+2, r25	; 0x02
    27b6:	89 83       	std	Y+1, r24	; 0x01
			}

			_delay_ms(10);
			Lcd_vidSendCommand(LCD_u8CLEAR_DISPLAY);
    27b8:	81 e0       	ldi	r24, 0x01	; 1
    27ba:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <Lcd_vidSendCommand>

			_delay_ms(10);
			Lcd_vidSendCommand(LCD_u8CLEAR_DISPLAY);
		}

		for( c= 11 ; c >= 0 ;c-- )
    27be:	8d 8d       	ldd	r24, Y+29	; 0x1d
    27c0:	81 50       	subi	r24, 0x01	; 1
    27c2:	8d 8f       	std	Y+29, r24	; 0x1d
    27c4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    27c6:	88 23       	and	r24, r24
    27c8:	0c f0       	brlt	.+2      	; 0x27cc <main+0x340>
    27ca:	5b cf       	rjmp	.-330    	; 0x2682 <main+0x1f6>
    27cc:	af ce       	rjmp	.-674    	; 0x252c <main+0xa0>

000027ce <__prologue_saves__>:
    27ce:	2f 92       	push	r2
    27d0:	3f 92       	push	r3
    27d2:	4f 92       	push	r4
    27d4:	5f 92       	push	r5
    27d6:	6f 92       	push	r6
    27d8:	7f 92       	push	r7
    27da:	8f 92       	push	r8
    27dc:	9f 92       	push	r9
    27de:	af 92       	push	r10
    27e0:	bf 92       	push	r11
    27e2:	cf 92       	push	r12
    27e4:	df 92       	push	r13
    27e6:	ef 92       	push	r14
    27e8:	ff 92       	push	r15
    27ea:	0f 93       	push	r16
    27ec:	1f 93       	push	r17
    27ee:	cf 93       	push	r28
    27f0:	df 93       	push	r29
    27f2:	cd b7       	in	r28, 0x3d	; 61
    27f4:	de b7       	in	r29, 0x3e	; 62
    27f6:	ca 1b       	sub	r28, r26
    27f8:	db 0b       	sbc	r29, r27
    27fa:	0f b6       	in	r0, 0x3f	; 63
    27fc:	f8 94       	cli
    27fe:	de bf       	out	0x3e, r29	; 62
    2800:	0f be       	out	0x3f, r0	; 63
    2802:	cd bf       	out	0x3d, r28	; 61
    2804:	09 94       	ijmp

00002806 <__epilogue_restores__>:
    2806:	2a 88       	ldd	r2, Y+18	; 0x12
    2808:	39 88       	ldd	r3, Y+17	; 0x11
    280a:	48 88       	ldd	r4, Y+16	; 0x10
    280c:	5f 84       	ldd	r5, Y+15	; 0x0f
    280e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2810:	7d 84       	ldd	r7, Y+13	; 0x0d
    2812:	8c 84       	ldd	r8, Y+12	; 0x0c
    2814:	9b 84       	ldd	r9, Y+11	; 0x0b
    2816:	aa 84       	ldd	r10, Y+10	; 0x0a
    2818:	b9 84       	ldd	r11, Y+9	; 0x09
    281a:	c8 84       	ldd	r12, Y+8	; 0x08
    281c:	df 80       	ldd	r13, Y+7	; 0x07
    281e:	ee 80       	ldd	r14, Y+6	; 0x06
    2820:	fd 80       	ldd	r15, Y+5	; 0x05
    2822:	0c 81       	ldd	r16, Y+4	; 0x04
    2824:	1b 81       	ldd	r17, Y+3	; 0x03
    2826:	aa 81       	ldd	r26, Y+2	; 0x02
    2828:	b9 81       	ldd	r27, Y+1	; 0x01
    282a:	ce 0f       	add	r28, r30
    282c:	d1 1d       	adc	r29, r1
    282e:	0f b6       	in	r0, 0x3f	; 63
    2830:	f8 94       	cli
    2832:	de bf       	out	0x3e, r29	; 62
    2834:	0f be       	out	0x3f, r0	; 63
    2836:	cd bf       	out	0x3d, r28	; 61
    2838:	ed 01       	movw	r28, r26
    283a:	08 95       	ret

0000283c <malloc>:
    283c:	cf 93       	push	r28
    283e:	df 93       	push	r29
    2840:	bc 01       	movw	r22, r24
    2842:	82 30       	cpi	r24, 0x02	; 2
    2844:	91 05       	cpc	r25, r1
    2846:	10 f4       	brcc	.+4      	; 0x284c <malloc+0x10>
    2848:	62 e0       	ldi	r22, 0x02	; 2
    284a:	70 e0       	ldi	r23, 0x00	; 0
    284c:	a0 91 80 00 	lds	r26, 0x0080
    2850:	b0 91 81 00 	lds	r27, 0x0081
    2854:	ed 01       	movw	r28, r26
    2856:	e0 e0       	ldi	r30, 0x00	; 0
    2858:	f0 e0       	ldi	r31, 0x00	; 0
    285a:	40 e0       	ldi	r20, 0x00	; 0
    285c:	50 e0       	ldi	r21, 0x00	; 0
    285e:	21 c0       	rjmp	.+66     	; 0x28a2 <malloc+0x66>
    2860:	88 81       	ld	r24, Y
    2862:	99 81       	ldd	r25, Y+1	; 0x01
    2864:	86 17       	cp	r24, r22
    2866:	97 07       	cpc	r25, r23
    2868:	69 f4       	brne	.+26     	; 0x2884 <malloc+0x48>
    286a:	8a 81       	ldd	r24, Y+2	; 0x02
    286c:	9b 81       	ldd	r25, Y+3	; 0x03
    286e:	30 97       	sbiw	r30, 0x00	; 0
    2870:	19 f0       	breq	.+6      	; 0x2878 <malloc+0x3c>
    2872:	93 83       	std	Z+3, r25	; 0x03
    2874:	82 83       	std	Z+2, r24	; 0x02
    2876:	04 c0       	rjmp	.+8      	; 0x2880 <malloc+0x44>
    2878:	90 93 81 00 	sts	0x0081, r25
    287c:	80 93 80 00 	sts	0x0080, r24
    2880:	fe 01       	movw	r30, r28
    2882:	34 c0       	rjmp	.+104    	; 0x28ec <malloc+0xb0>
    2884:	68 17       	cp	r22, r24
    2886:	79 07       	cpc	r23, r25
    2888:	38 f4       	brcc	.+14     	; 0x2898 <malloc+0x5c>
    288a:	41 15       	cp	r20, r1
    288c:	51 05       	cpc	r21, r1
    288e:	19 f0       	breq	.+6      	; 0x2896 <malloc+0x5a>
    2890:	84 17       	cp	r24, r20
    2892:	95 07       	cpc	r25, r21
    2894:	08 f4       	brcc	.+2      	; 0x2898 <malloc+0x5c>
    2896:	ac 01       	movw	r20, r24
    2898:	fe 01       	movw	r30, r28
    289a:	8a 81       	ldd	r24, Y+2	; 0x02
    289c:	9b 81       	ldd	r25, Y+3	; 0x03
    289e:	9c 01       	movw	r18, r24
    28a0:	e9 01       	movw	r28, r18
    28a2:	20 97       	sbiw	r28, 0x00	; 0
    28a4:	e9 f6       	brne	.-70     	; 0x2860 <malloc+0x24>
    28a6:	41 15       	cp	r20, r1
    28a8:	51 05       	cpc	r21, r1
    28aa:	a9 f1       	breq	.+106    	; 0x2916 <malloc+0xda>
    28ac:	ca 01       	movw	r24, r20
    28ae:	86 1b       	sub	r24, r22
    28b0:	97 0b       	sbc	r25, r23
    28b2:	04 97       	sbiw	r24, 0x04	; 4
    28b4:	08 f4       	brcc	.+2      	; 0x28b8 <malloc+0x7c>
    28b6:	ba 01       	movw	r22, r20
    28b8:	e0 e0       	ldi	r30, 0x00	; 0
    28ba:	f0 e0       	ldi	r31, 0x00	; 0
    28bc:	2a c0       	rjmp	.+84     	; 0x2912 <malloc+0xd6>
    28be:	8d 91       	ld	r24, X+
    28c0:	9c 91       	ld	r25, X
    28c2:	11 97       	sbiw	r26, 0x01	; 1
    28c4:	84 17       	cp	r24, r20
    28c6:	95 07       	cpc	r25, r21
    28c8:	f9 f4       	brne	.+62     	; 0x2908 <malloc+0xcc>
    28ca:	64 17       	cp	r22, r20
    28cc:	75 07       	cpc	r23, r21
    28ce:	81 f4       	brne	.+32     	; 0x28f0 <malloc+0xb4>
    28d0:	12 96       	adiw	r26, 0x02	; 2
    28d2:	8d 91       	ld	r24, X+
    28d4:	9c 91       	ld	r25, X
    28d6:	13 97       	sbiw	r26, 0x03	; 3
    28d8:	30 97       	sbiw	r30, 0x00	; 0
    28da:	19 f0       	breq	.+6      	; 0x28e2 <malloc+0xa6>
    28dc:	93 83       	std	Z+3, r25	; 0x03
    28de:	82 83       	std	Z+2, r24	; 0x02
    28e0:	04 c0       	rjmp	.+8      	; 0x28ea <malloc+0xae>
    28e2:	90 93 81 00 	sts	0x0081, r25
    28e6:	80 93 80 00 	sts	0x0080, r24
    28ea:	fd 01       	movw	r30, r26
    28ec:	32 96       	adiw	r30, 0x02	; 2
    28ee:	4f c0       	rjmp	.+158    	; 0x298e <malloc+0x152>
    28f0:	ca 01       	movw	r24, r20
    28f2:	86 1b       	sub	r24, r22
    28f4:	97 0b       	sbc	r25, r23
    28f6:	fd 01       	movw	r30, r26
    28f8:	e8 0f       	add	r30, r24
    28fa:	f9 1f       	adc	r31, r25
    28fc:	61 93       	st	Z+, r22
    28fe:	71 93       	st	Z+, r23
    2900:	02 97       	sbiw	r24, 0x02	; 2
    2902:	8d 93       	st	X+, r24
    2904:	9c 93       	st	X, r25
    2906:	43 c0       	rjmp	.+134    	; 0x298e <malloc+0x152>
    2908:	fd 01       	movw	r30, r26
    290a:	82 81       	ldd	r24, Z+2	; 0x02
    290c:	93 81       	ldd	r25, Z+3	; 0x03
    290e:	9c 01       	movw	r18, r24
    2910:	d9 01       	movw	r26, r18
    2912:	10 97       	sbiw	r26, 0x00	; 0
    2914:	a1 f6       	brne	.-88     	; 0x28be <malloc+0x82>
    2916:	80 91 7e 00 	lds	r24, 0x007E
    291a:	90 91 7f 00 	lds	r25, 0x007F
    291e:	89 2b       	or	r24, r25
    2920:	41 f4       	brne	.+16     	; 0x2932 <malloc+0xf6>
    2922:	80 91 7a 00 	lds	r24, 0x007A
    2926:	90 91 7b 00 	lds	r25, 0x007B
    292a:	90 93 7f 00 	sts	0x007F, r25
    292e:	80 93 7e 00 	sts	0x007E, r24
    2932:	40 91 7c 00 	lds	r20, 0x007C
    2936:	50 91 7d 00 	lds	r21, 0x007D
    293a:	41 15       	cp	r20, r1
    293c:	51 05       	cpc	r21, r1
    293e:	41 f4       	brne	.+16     	; 0x2950 <malloc+0x114>
    2940:	4d b7       	in	r20, 0x3d	; 61
    2942:	5e b7       	in	r21, 0x3e	; 62
    2944:	80 91 78 00 	lds	r24, 0x0078
    2948:	90 91 79 00 	lds	r25, 0x0079
    294c:	48 1b       	sub	r20, r24
    294e:	59 0b       	sbc	r21, r25
    2950:	20 91 7e 00 	lds	r18, 0x007E
    2954:	30 91 7f 00 	lds	r19, 0x007F
    2958:	24 17       	cp	r18, r20
    295a:	35 07       	cpc	r19, r21
    295c:	b0 f4       	brcc	.+44     	; 0x298a <malloc+0x14e>
    295e:	ca 01       	movw	r24, r20
    2960:	82 1b       	sub	r24, r18
    2962:	93 0b       	sbc	r25, r19
    2964:	86 17       	cp	r24, r22
    2966:	97 07       	cpc	r25, r23
    2968:	80 f0       	brcs	.+32     	; 0x298a <malloc+0x14e>
    296a:	ab 01       	movw	r20, r22
    296c:	4e 5f       	subi	r20, 0xFE	; 254
    296e:	5f 4f       	sbci	r21, 0xFF	; 255
    2970:	84 17       	cp	r24, r20
    2972:	95 07       	cpc	r25, r21
    2974:	50 f0       	brcs	.+20     	; 0x298a <malloc+0x14e>
    2976:	42 0f       	add	r20, r18
    2978:	53 1f       	adc	r21, r19
    297a:	50 93 7f 00 	sts	0x007F, r21
    297e:	40 93 7e 00 	sts	0x007E, r20
    2982:	f9 01       	movw	r30, r18
    2984:	61 93       	st	Z+, r22
    2986:	71 93       	st	Z+, r23
    2988:	02 c0       	rjmp	.+4      	; 0x298e <malloc+0x152>
    298a:	e0 e0       	ldi	r30, 0x00	; 0
    298c:	f0 e0       	ldi	r31, 0x00	; 0
    298e:	cf 01       	movw	r24, r30
    2990:	df 91       	pop	r29
    2992:	cf 91       	pop	r28
    2994:	08 95       	ret

00002996 <free>:
    2996:	cf 93       	push	r28
    2998:	df 93       	push	r29
    299a:	00 97       	sbiw	r24, 0x00	; 0
    299c:	09 f4       	brne	.+2      	; 0x29a0 <free+0xa>
    299e:	50 c0       	rjmp	.+160    	; 0x2a40 <free+0xaa>
    29a0:	ec 01       	movw	r28, r24
    29a2:	22 97       	sbiw	r28, 0x02	; 2
    29a4:	1b 82       	std	Y+3, r1	; 0x03
    29a6:	1a 82       	std	Y+2, r1	; 0x02
    29a8:	a0 91 80 00 	lds	r26, 0x0080
    29ac:	b0 91 81 00 	lds	r27, 0x0081
    29b0:	10 97       	sbiw	r26, 0x00	; 0
    29b2:	09 f1       	breq	.+66     	; 0x29f6 <free+0x60>
    29b4:	40 e0       	ldi	r20, 0x00	; 0
    29b6:	50 e0       	ldi	r21, 0x00	; 0
    29b8:	ac 17       	cp	r26, r28
    29ba:	bd 07       	cpc	r27, r29
    29bc:	08 f1       	brcs	.+66     	; 0x2a00 <free+0x6a>
    29be:	bb 83       	std	Y+3, r27	; 0x03
    29c0:	aa 83       	std	Y+2, r26	; 0x02
    29c2:	fe 01       	movw	r30, r28
    29c4:	21 91       	ld	r18, Z+
    29c6:	31 91       	ld	r19, Z+
    29c8:	e2 0f       	add	r30, r18
    29ca:	f3 1f       	adc	r31, r19
    29cc:	ae 17       	cp	r26, r30
    29ce:	bf 07       	cpc	r27, r31
    29d0:	79 f4       	brne	.+30     	; 0x29f0 <free+0x5a>
    29d2:	8d 91       	ld	r24, X+
    29d4:	9c 91       	ld	r25, X
    29d6:	11 97       	sbiw	r26, 0x01	; 1
    29d8:	28 0f       	add	r18, r24
    29da:	39 1f       	adc	r19, r25
    29dc:	2e 5f       	subi	r18, 0xFE	; 254
    29de:	3f 4f       	sbci	r19, 0xFF	; 255
    29e0:	39 83       	std	Y+1, r19	; 0x01
    29e2:	28 83       	st	Y, r18
    29e4:	12 96       	adiw	r26, 0x02	; 2
    29e6:	8d 91       	ld	r24, X+
    29e8:	9c 91       	ld	r25, X
    29ea:	13 97       	sbiw	r26, 0x03	; 3
    29ec:	9b 83       	std	Y+3, r25	; 0x03
    29ee:	8a 83       	std	Y+2, r24	; 0x02
    29f0:	41 15       	cp	r20, r1
    29f2:	51 05       	cpc	r21, r1
    29f4:	71 f4       	brne	.+28     	; 0x2a12 <free+0x7c>
    29f6:	d0 93 81 00 	sts	0x0081, r29
    29fa:	c0 93 80 00 	sts	0x0080, r28
    29fe:	20 c0       	rjmp	.+64     	; 0x2a40 <free+0xaa>
    2a00:	12 96       	adiw	r26, 0x02	; 2
    2a02:	8d 91       	ld	r24, X+
    2a04:	9c 91       	ld	r25, X
    2a06:	13 97       	sbiw	r26, 0x03	; 3
    2a08:	ad 01       	movw	r20, r26
    2a0a:	00 97       	sbiw	r24, 0x00	; 0
    2a0c:	11 f0       	breq	.+4      	; 0x2a12 <free+0x7c>
    2a0e:	dc 01       	movw	r26, r24
    2a10:	d3 cf       	rjmp	.-90     	; 0x29b8 <free+0x22>
    2a12:	fa 01       	movw	r30, r20
    2a14:	d3 83       	std	Z+3, r29	; 0x03
    2a16:	c2 83       	std	Z+2, r28	; 0x02
    2a18:	21 91       	ld	r18, Z+
    2a1a:	31 91       	ld	r19, Z+
    2a1c:	e2 0f       	add	r30, r18
    2a1e:	f3 1f       	adc	r31, r19
    2a20:	ce 17       	cp	r28, r30
    2a22:	df 07       	cpc	r29, r31
    2a24:	69 f4       	brne	.+26     	; 0x2a40 <free+0xaa>
    2a26:	88 81       	ld	r24, Y
    2a28:	99 81       	ldd	r25, Y+1	; 0x01
    2a2a:	28 0f       	add	r18, r24
    2a2c:	39 1f       	adc	r19, r25
    2a2e:	2e 5f       	subi	r18, 0xFE	; 254
    2a30:	3f 4f       	sbci	r19, 0xFF	; 255
    2a32:	fa 01       	movw	r30, r20
    2a34:	31 83       	std	Z+1, r19	; 0x01
    2a36:	20 83       	st	Z, r18
    2a38:	8a 81       	ldd	r24, Y+2	; 0x02
    2a3a:	9b 81       	ldd	r25, Y+3	; 0x03
    2a3c:	93 83       	std	Z+3, r25	; 0x03
    2a3e:	82 83       	std	Z+2, r24	; 0x02
    2a40:	df 91       	pop	r29
    2a42:	cf 91       	pop	r28
    2a44:	08 95       	ret

00002a46 <snprintf>:
    2a46:	ae e0       	ldi	r26, 0x0E	; 14
    2a48:	b0 e0       	ldi	r27, 0x00	; 0
    2a4a:	e9 e2       	ldi	r30, 0x29	; 41
    2a4c:	f5 e1       	ldi	r31, 0x15	; 21
    2a4e:	0c 94 f5 13 	jmp	0x27ea	; 0x27ea <__prologue_saves__+0x1c>
    2a52:	0d 89       	ldd	r16, Y+21	; 0x15
    2a54:	1e 89       	ldd	r17, Y+22	; 0x16
    2a56:	8f 89       	ldd	r24, Y+23	; 0x17
    2a58:	98 8d       	ldd	r25, Y+24	; 0x18
    2a5a:	97 ff       	sbrs	r25, 7
    2a5c:	02 c0       	rjmp	.+4      	; 0x2a62 <snprintf+0x1c>
    2a5e:	80 e0       	ldi	r24, 0x00	; 0
    2a60:	90 e8       	ldi	r25, 0x80	; 128
    2a62:	01 97       	sbiw	r24, 0x01	; 1
    2a64:	9e 83       	std	Y+6, r25	; 0x06
    2a66:	8d 83       	std	Y+5, r24	; 0x05
    2a68:	1a 83       	std	Y+2, r17	; 0x02
    2a6a:	09 83       	std	Y+1, r16	; 0x01
    2a6c:	86 e0       	ldi	r24, 0x06	; 6
    2a6e:	8c 83       	std	Y+4, r24	; 0x04
    2a70:	9e 01       	movw	r18, r28
    2a72:	25 5e       	subi	r18, 0xE5	; 229
    2a74:	3f 4f       	sbci	r19, 0xFF	; 255
    2a76:	ce 01       	movw	r24, r28
    2a78:	01 96       	adiw	r24, 0x01	; 1
    2a7a:	69 8d       	ldd	r22, Y+25	; 0x19
    2a7c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a7e:	a9 01       	movw	r20, r18
    2a80:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <vfprintf>
    2a84:	4d 81       	ldd	r20, Y+5	; 0x05
    2a86:	5e 81       	ldd	r21, Y+6	; 0x06
    2a88:	57 fd       	sbrc	r21, 7
    2a8a:	0a c0       	rjmp	.+20     	; 0x2aa0 <snprintf+0x5a>
    2a8c:	2f 81       	ldd	r18, Y+7	; 0x07
    2a8e:	38 85       	ldd	r19, Y+8	; 0x08
    2a90:	42 17       	cp	r20, r18
    2a92:	53 07       	cpc	r21, r19
    2a94:	0c f4       	brge	.+2      	; 0x2a98 <snprintf+0x52>
    2a96:	9a 01       	movw	r18, r20
    2a98:	02 0f       	add	r16, r18
    2a9a:	13 1f       	adc	r17, r19
    2a9c:	f8 01       	movw	r30, r16
    2a9e:	10 82       	st	Z, r1
    2aa0:	2e 96       	adiw	r28, 0x0e	; 14
    2aa2:	e4 e0       	ldi	r30, 0x04	; 4
    2aa4:	0c 94 11 14 	jmp	0x2822	; 0x2822 <__epilogue_restores__+0x1c>

00002aa8 <vfprintf>:
    2aa8:	ab e0       	ldi	r26, 0x0B	; 11
    2aaa:	b0 e0       	ldi	r27, 0x00	; 0
    2aac:	ea e5       	ldi	r30, 0x5A	; 90
    2aae:	f5 e1       	ldi	r31, 0x15	; 21
    2ab0:	0c 94 e7 13 	jmp	0x27ce	; 0x27ce <__prologue_saves__>
    2ab4:	3c 01       	movw	r6, r24
    2ab6:	2b 01       	movw	r4, r22
    2ab8:	5a 01       	movw	r10, r20
    2aba:	fc 01       	movw	r30, r24
    2abc:	17 82       	std	Z+7, r1	; 0x07
    2abe:	16 82       	std	Z+6, r1	; 0x06
    2ac0:	83 81       	ldd	r24, Z+3	; 0x03
    2ac2:	81 fd       	sbrc	r24, 1
    2ac4:	03 c0       	rjmp	.+6      	; 0x2acc <vfprintf+0x24>
    2ac6:	6f ef       	ldi	r22, 0xFF	; 255
    2ac8:	7f ef       	ldi	r23, 0xFF	; 255
    2aca:	c6 c1       	rjmp	.+908    	; 0x2e58 <vfprintf+0x3b0>
    2acc:	9a e0       	ldi	r25, 0x0A	; 10
    2ace:	89 2e       	mov	r8, r25
    2ad0:	1e 01       	movw	r2, r28
    2ad2:	08 94       	sec
    2ad4:	21 1c       	adc	r2, r1
    2ad6:	31 1c       	adc	r3, r1
    2ad8:	f3 01       	movw	r30, r6
    2ada:	23 81       	ldd	r18, Z+3	; 0x03
    2adc:	f2 01       	movw	r30, r4
    2ade:	23 fd       	sbrc	r18, 3
    2ae0:	85 91       	lpm	r24, Z+
    2ae2:	23 ff       	sbrs	r18, 3
    2ae4:	81 91       	ld	r24, Z+
    2ae6:	2f 01       	movw	r4, r30
    2ae8:	88 23       	and	r24, r24
    2aea:	09 f4       	brne	.+2      	; 0x2aee <vfprintf+0x46>
    2aec:	b2 c1       	rjmp	.+868    	; 0x2e52 <vfprintf+0x3aa>
    2aee:	85 32       	cpi	r24, 0x25	; 37
    2af0:	39 f4       	brne	.+14     	; 0x2b00 <vfprintf+0x58>
    2af2:	23 fd       	sbrc	r18, 3
    2af4:	85 91       	lpm	r24, Z+
    2af6:	23 ff       	sbrs	r18, 3
    2af8:	81 91       	ld	r24, Z+
    2afa:	2f 01       	movw	r4, r30
    2afc:	85 32       	cpi	r24, 0x25	; 37
    2afe:	29 f4       	brne	.+10     	; 0x2b0a <vfprintf+0x62>
    2b00:	90 e0       	ldi	r25, 0x00	; 0
    2b02:	b3 01       	movw	r22, r6
    2b04:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <fputc>
    2b08:	e7 cf       	rjmp	.-50     	; 0x2ad8 <vfprintf+0x30>
    2b0a:	98 2f       	mov	r25, r24
    2b0c:	ff 24       	eor	r15, r15
    2b0e:	ee 24       	eor	r14, r14
    2b10:	99 24       	eor	r9, r9
    2b12:	ff e1       	ldi	r31, 0x1F	; 31
    2b14:	ff 15       	cp	r31, r15
    2b16:	d0 f0       	brcs	.+52     	; 0x2b4c <vfprintf+0xa4>
    2b18:	9b 32       	cpi	r25, 0x2B	; 43
    2b1a:	69 f0       	breq	.+26     	; 0x2b36 <vfprintf+0x8e>
    2b1c:	9c 32       	cpi	r25, 0x2C	; 44
    2b1e:	28 f4       	brcc	.+10     	; 0x2b2a <vfprintf+0x82>
    2b20:	90 32       	cpi	r25, 0x20	; 32
    2b22:	59 f0       	breq	.+22     	; 0x2b3a <vfprintf+0x92>
    2b24:	93 32       	cpi	r25, 0x23	; 35
    2b26:	91 f4       	brne	.+36     	; 0x2b4c <vfprintf+0xa4>
    2b28:	0e c0       	rjmp	.+28     	; 0x2b46 <vfprintf+0x9e>
    2b2a:	9d 32       	cpi	r25, 0x2D	; 45
    2b2c:	49 f0       	breq	.+18     	; 0x2b40 <vfprintf+0x98>
    2b2e:	90 33       	cpi	r25, 0x30	; 48
    2b30:	69 f4       	brne	.+26     	; 0x2b4c <vfprintf+0xa4>
    2b32:	41 e0       	ldi	r20, 0x01	; 1
    2b34:	24 c0       	rjmp	.+72     	; 0x2b7e <vfprintf+0xd6>
    2b36:	52 e0       	ldi	r21, 0x02	; 2
    2b38:	f5 2a       	or	r15, r21
    2b3a:	84 e0       	ldi	r24, 0x04	; 4
    2b3c:	f8 2a       	or	r15, r24
    2b3e:	28 c0       	rjmp	.+80     	; 0x2b90 <vfprintf+0xe8>
    2b40:	98 e0       	ldi	r25, 0x08	; 8
    2b42:	f9 2a       	or	r15, r25
    2b44:	25 c0       	rjmp	.+74     	; 0x2b90 <vfprintf+0xe8>
    2b46:	e0 e1       	ldi	r30, 0x10	; 16
    2b48:	fe 2a       	or	r15, r30
    2b4a:	22 c0       	rjmp	.+68     	; 0x2b90 <vfprintf+0xe8>
    2b4c:	f7 fc       	sbrc	r15, 7
    2b4e:	29 c0       	rjmp	.+82     	; 0x2ba2 <vfprintf+0xfa>
    2b50:	89 2f       	mov	r24, r25
    2b52:	80 53       	subi	r24, 0x30	; 48
    2b54:	8a 30       	cpi	r24, 0x0A	; 10
    2b56:	70 f4       	brcc	.+28     	; 0x2b74 <vfprintf+0xcc>
    2b58:	f6 fe       	sbrs	r15, 6
    2b5a:	05 c0       	rjmp	.+10     	; 0x2b66 <vfprintf+0xbe>
    2b5c:	98 9c       	mul	r9, r8
    2b5e:	90 2c       	mov	r9, r0
    2b60:	11 24       	eor	r1, r1
    2b62:	98 0e       	add	r9, r24
    2b64:	15 c0       	rjmp	.+42     	; 0x2b90 <vfprintf+0xe8>
    2b66:	e8 9c       	mul	r14, r8
    2b68:	e0 2c       	mov	r14, r0
    2b6a:	11 24       	eor	r1, r1
    2b6c:	e8 0e       	add	r14, r24
    2b6e:	f0 e2       	ldi	r31, 0x20	; 32
    2b70:	ff 2a       	or	r15, r31
    2b72:	0e c0       	rjmp	.+28     	; 0x2b90 <vfprintf+0xe8>
    2b74:	9e 32       	cpi	r25, 0x2E	; 46
    2b76:	29 f4       	brne	.+10     	; 0x2b82 <vfprintf+0xda>
    2b78:	f6 fc       	sbrc	r15, 6
    2b7a:	6b c1       	rjmp	.+726    	; 0x2e52 <vfprintf+0x3aa>
    2b7c:	40 e4       	ldi	r20, 0x40	; 64
    2b7e:	f4 2a       	or	r15, r20
    2b80:	07 c0       	rjmp	.+14     	; 0x2b90 <vfprintf+0xe8>
    2b82:	9c 36       	cpi	r25, 0x6C	; 108
    2b84:	19 f4       	brne	.+6      	; 0x2b8c <vfprintf+0xe4>
    2b86:	50 e8       	ldi	r21, 0x80	; 128
    2b88:	f5 2a       	or	r15, r21
    2b8a:	02 c0       	rjmp	.+4      	; 0x2b90 <vfprintf+0xe8>
    2b8c:	98 36       	cpi	r25, 0x68	; 104
    2b8e:	49 f4       	brne	.+18     	; 0x2ba2 <vfprintf+0xfa>
    2b90:	f2 01       	movw	r30, r4
    2b92:	23 fd       	sbrc	r18, 3
    2b94:	95 91       	lpm	r25, Z+
    2b96:	23 ff       	sbrs	r18, 3
    2b98:	91 91       	ld	r25, Z+
    2b9a:	2f 01       	movw	r4, r30
    2b9c:	99 23       	and	r25, r25
    2b9e:	09 f0       	breq	.+2      	; 0x2ba2 <vfprintf+0xfa>
    2ba0:	b8 cf       	rjmp	.-144    	; 0x2b12 <vfprintf+0x6a>
    2ba2:	89 2f       	mov	r24, r25
    2ba4:	85 54       	subi	r24, 0x45	; 69
    2ba6:	83 30       	cpi	r24, 0x03	; 3
    2ba8:	18 f0       	brcs	.+6      	; 0x2bb0 <vfprintf+0x108>
    2baa:	80 52       	subi	r24, 0x20	; 32
    2bac:	83 30       	cpi	r24, 0x03	; 3
    2bae:	38 f4       	brcc	.+14     	; 0x2bbe <vfprintf+0x116>
    2bb0:	44 e0       	ldi	r20, 0x04	; 4
    2bb2:	50 e0       	ldi	r21, 0x00	; 0
    2bb4:	a4 0e       	add	r10, r20
    2bb6:	b5 1e       	adc	r11, r21
    2bb8:	5f e3       	ldi	r21, 0x3F	; 63
    2bba:	59 83       	std	Y+1, r21	; 0x01
    2bbc:	0f c0       	rjmp	.+30     	; 0x2bdc <vfprintf+0x134>
    2bbe:	93 36       	cpi	r25, 0x63	; 99
    2bc0:	31 f0       	breq	.+12     	; 0x2bce <vfprintf+0x126>
    2bc2:	93 37       	cpi	r25, 0x73	; 115
    2bc4:	79 f0       	breq	.+30     	; 0x2be4 <vfprintf+0x13c>
    2bc6:	93 35       	cpi	r25, 0x53	; 83
    2bc8:	09 f0       	breq	.+2      	; 0x2bcc <vfprintf+0x124>
    2bca:	56 c0       	rjmp	.+172    	; 0x2c78 <vfprintf+0x1d0>
    2bcc:	20 c0       	rjmp	.+64     	; 0x2c0e <vfprintf+0x166>
    2bce:	f5 01       	movw	r30, r10
    2bd0:	80 81       	ld	r24, Z
    2bd2:	89 83       	std	Y+1, r24	; 0x01
    2bd4:	42 e0       	ldi	r20, 0x02	; 2
    2bd6:	50 e0       	ldi	r21, 0x00	; 0
    2bd8:	a4 0e       	add	r10, r20
    2bda:	b5 1e       	adc	r11, r21
    2bdc:	61 01       	movw	r12, r2
    2bde:	01 e0       	ldi	r16, 0x01	; 1
    2be0:	10 e0       	ldi	r17, 0x00	; 0
    2be2:	12 c0       	rjmp	.+36     	; 0x2c08 <vfprintf+0x160>
    2be4:	f5 01       	movw	r30, r10
    2be6:	c0 80       	ld	r12, Z
    2be8:	d1 80       	ldd	r13, Z+1	; 0x01
    2bea:	f6 fc       	sbrc	r15, 6
    2bec:	03 c0       	rjmp	.+6      	; 0x2bf4 <vfprintf+0x14c>
    2bee:	6f ef       	ldi	r22, 0xFF	; 255
    2bf0:	7f ef       	ldi	r23, 0xFF	; 255
    2bf2:	02 c0       	rjmp	.+4      	; 0x2bf8 <vfprintf+0x150>
    2bf4:	69 2d       	mov	r22, r9
    2bf6:	70 e0       	ldi	r23, 0x00	; 0
    2bf8:	42 e0       	ldi	r20, 0x02	; 2
    2bfa:	50 e0       	ldi	r21, 0x00	; 0
    2bfc:	a4 0e       	add	r10, r20
    2bfe:	b5 1e       	adc	r11, r21
    2c00:	c6 01       	movw	r24, r12
    2c02:	0e 94 3c 17 	call	0x2e78	; 0x2e78 <strnlen>
    2c06:	8c 01       	movw	r16, r24
    2c08:	5f e7       	ldi	r21, 0x7F	; 127
    2c0a:	f5 22       	and	r15, r21
    2c0c:	14 c0       	rjmp	.+40     	; 0x2c36 <vfprintf+0x18e>
    2c0e:	f5 01       	movw	r30, r10
    2c10:	c0 80       	ld	r12, Z
    2c12:	d1 80       	ldd	r13, Z+1	; 0x01
    2c14:	f6 fc       	sbrc	r15, 6
    2c16:	03 c0       	rjmp	.+6      	; 0x2c1e <vfprintf+0x176>
    2c18:	6f ef       	ldi	r22, 0xFF	; 255
    2c1a:	7f ef       	ldi	r23, 0xFF	; 255
    2c1c:	02 c0       	rjmp	.+4      	; 0x2c22 <vfprintf+0x17a>
    2c1e:	69 2d       	mov	r22, r9
    2c20:	70 e0       	ldi	r23, 0x00	; 0
    2c22:	42 e0       	ldi	r20, 0x02	; 2
    2c24:	50 e0       	ldi	r21, 0x00	; 0
    2c26:	a4 0e       	add	r10, r20
    2c28:	b5 1e       	adc	r11, r21
    2c2a:	c6 01       	movw	r24, r12
    2c2c:	0e 94 31 17 	call	0x2e62	; 0x2e62 <strnlen_P>
    2c30:	8c 01       	movw	r16, r24
    2c32:	50 e8       	ldi	r21, 0x80	; 128
    2c34:	f5 2a       	or	r15, r21
    2c36:	f3 fe       	sbrs	r15, 3
    2c38:	07 c0       	rjmp	.+14     	; 0x2c48 <vfprintf+0x1a0>
    2c3a:	1a c0       	rjmp	.+52     	; 0x2c70 <vfprintf+0x1c8>
    2c3c:	80 e2       	ldi	r24, 0x20	; 32
    2c3e:	90 e0       	ldi	r25, 0x00	; 0
    2c40:	b3 01       	movw	r22, r6
    2c42:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <fputc>
    2c46:	ea 94       	dec	r14
    2c48:	8e 2d       	mov	r24, r14
    2c4a:	90 e0       	ldi	r25, 0x00	; 0
    2c4c:	08 17       	cp	r16, r24
    2c4e:	19 07       	cpc	r17, r25
    2c50:	a8 f3       	brcs	.-22     	; 0x2c3c <vfprintf+0x194>
    2c52:	0e c0       	rjmp	.+28     	; 0x2c70 <vfprintf+0x1c8>
    2c54:	f6 01       	movw	r30, r12
    2c56:	f7 fc       	sbrc	r15, 7
    2c58:	85 91       	lpm	r24, Z+
    2c5a:	f7 fe       	sbrs	r15, 7
    2c5c:	81 91       	ld	r24, Z+
    2c5e:	6f 01       	movw	r12, r30
    2c60:	90 e0       	ldi	r25, 0x00	; 0
    2c62:	b3 01       	movw	r22, r6
    2c64:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <fputc>
    2c68:	e1 10       	cpse	r14, r1
    2c6a:	ea 94       	dec	r14
    2c6c:	01 50       	subi	r16, 0x01	; 1
    2c6e:	10 40       	sbci	r17, 0x00	; 0
    2c70:	01 15       	cp	r16, r1
    2c72:	11 05       	cpc	r17, r1
    2c74:	79 f7       	brne	.-34     	; 0x2c54 <vfprintf+0x1ac>
    2c76:	ea c0       	rjmp	.+468    	; 0x2e4c <vfprintf+0x3a4>
    2c78:	94 36       	cpi	r25, 0x64	; 100
    2c7a:	11 f0       	breq	.+4      	; 0x2c80 <vfprintf+0x1d8>
    2c7c:	99 36       	cpi	r25, 0x69	; 105
    2c7e:	69 f5       	brne	.+90     	; 0x2cda <vfprintf+0x232>
    2c80:	f7 fe       	sbrs	r15, 7
    2c82:	08 c0       	rjmp	.+16     	; 0x2c94 <vfprintf+0x1ec>
    2c84:	f5 01       	movw	r30, r10
    2c86:	20 81       	ld	r18, Z
    2c88:	31 81       	ldd	r19, Z+1	; 0x01
    2c8a:	42 81       	ldd	r20, Z+2	; 0x02
    2c8c:	53 81       	ldd	r21, Z+3	; 0x03
    2c8e:	84 e0       	ldi	r24, 0x04	; 4
    2c90:	90 e0       	ldi	r25, 0x00	; 0
    2c92:	0a c0       	rjmp	.+20     	; 0x2ca8 <vfprintf+0x200>
    2c94:	f5 01       	movw	r30, r10
    2c96:	80 81       	ld	r24, Z
    2c98:	91 81       	ldd	r25, Z+1	; 0x01
    2c9a:	9c 01       	movw	r18, r24
    2c9c:	44 27       	eor	r20, r20
    2c9e:	37 fd       	sbrc	r19, 7
    2ca0:	40 95       	com	r20
    2ca2:	54 2f       	mov	r21, r20
    2ca4:	82 e0       	ldi	r24, 0x02	; 2
    2ca6:	90 e0       	ldi	r25, 0x00	; 0
    2ca8:	a8 0e       	add	r10, r24
    2caa:	b9 1e       	adc	r11, r25
    2cac:	9f e6       	ldi	r25, 0x6F	; 111
    2cae:	f9 22       	and	r15, r25
    2cb0:	57 ff       	sbrs	r21, 7
    2cb2:	09 c0       	rjmp	.+18     	; 0x2cc6 <vfprintf+0x21e>
    2cb4:	50 95       	com	r21
    2cb6:	40 95       	com	r20
    2cb8:	30 95       	com	r19
    2cba:	21 95       	neg	r18
    2cbc:	3f 4f       	sbci	r19, 0xFF	; 255
    2cbe:	4f 4f       	sbci	r20, 0xFF	; 255
    2cc0:	5f 4f       	sbci	r21, 0xFF	; 255
    2cc2:	e0 e8       	ldi	r30, 0x80	; 128
    2cc4:	fe 2a       	or	r15, r30
    2cc6:	ca 01       	movw	r24, r20
    2cc8:	b9 01       	movw	r22, r18
    2cca:	a1 01       	movw	r20, r2
    2ccc:	2a e0       	ldi	r18, 0x0A	; 10
    2cce:	30 e0       	ldi	r19, 0x00	; 0
    2cd0:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <__ultoa_invert>
    2cd4:	d8 2e       	mov	r13, r24
    2cd6:	d2 18       	sub	r13, r2
    2cd8:	40 c0       	rjmp	.+128    	; 0x2d5a <vfprintf+0x2b2>
    2cda:	95 37       	cpi	r25, 0x75	; 117
    2cdc:	29 f4       	brne	.+10     	; 0x2ce8 <vfprintf+0x240>
    2cde:	1f 2d       	mov	r17, r15
    2ce0:	1f 7e       	andi	r17, 0xEF	; 239
    2ce2:	2a e0       	ldi	r18, 0x0A	; 10
    2ce4:	30 e0       	ldi	r19, 0x00	; 0
    2ce6:	1d c0       	rjmp	.+58     	; 0x2d22 <vfprintf+0x27a>
    2ce8:	1f 2d       	mov	r17, r15
    2cea:	19 7f       	andi	r17, 0xF9	; 249
    2cec:	9f 36       	cpi	r25, 0x6F	; 111
    2cee:	61 f0       	breq	.+24     	; 0x2d08 <vfprintf+0x260>
    2cf0:	90 37       	cpi	r25, 0x70	; 112
    2cf2:	20 f4       	brcc	.+8      	; 0x2cfc <vfprintf+0x254>
    2cf4:	98 35       	cpi	r25, 0x58	; 88
    2cf6:	09 f0       	breq	.+2      	; 0x2cfa <vfprintf+0x252>
    2cf8:	ac c0       	rjmp	.+344    	; 0x2e52 <vfprintf+0x3aa>
    2cfa:	0f c0       	rjmp	.+30     	; 0x2d1a <vfprintf+0x272>
    2cfc:	90 37       	cpi	r25, 0x70	; 112
    2cfe:	39 f0       	breq	.+14     	; 0x2d0e <vfprintf+0x266>
    2d00:	98 37       	cpi	r25, 0x78	; 120
    2d02:	09 f0       	breq	.+2      	; 0x2d06 <vfprintf+0x25e>
    2d04:	a6 c0       	rjmp	.+332    	; 0x2e52 <vfprintf+0x3aa>
    2d06:	04 c0       	rjmp	.+8      	; 0x2d10 <vfprintf+0x268>
    2d08:	28 e0       	ldi	r18, 0x08	; 8
    2d0a:	30 e0       	ldi	r19, 0x00	; 0
    2d0c:	0a c0       	rjmp	.+20     	; 0x2d22 <vfprintf+0x27a>
    2d0e:	10 61       	ori	r17, 0x10	; 16
    2d10:	14 fd       	sbrc	r17, 4
    2d12:	14 60       	ori	r17, 0x04	; 4
    2d14:	20 e1       	ldi	r18, 0x10	; 16
    2d16:	30 e0       	ldi	r19, 0x00	; 0
    2d18:	04 c0       	rjmp	.+8      	; 0x2d22 <vfprintf+0x27a>
    2d1a:	14 fd       	sbrc	r17, 4
    2d1c:	16 60       	ori	r17, 0x06	; 6
    2d1e:	20 e1       	ldi	r18, 0x10	; 16
    2d20:	32 e0       	ldi	r19, 0x02	; 2
    2d22:	17 ff       	sbrs	r17, 7
    2d24:	08 c0       	rjmp	.+16     	; 0x2d36 <vfprintf+0x28e>
    2d26:	f5 01       	movw	r30, r10
    2d28:	60 81       	ld	r22, Z
    2d2a:	71 81       	ldd	r23, Z+1	; 0x01
    2d2c:	82 81       	ldd	r24, Z+2	; 0x02
    2d2e:	93 81       	ldd	r25, Z+3	; 0x03
    2d30:	44 e0       	ldi	r20, 0x04	; 4
    2d32:	50 e0       	ldi	r21, 0x00	; 0
    2d34:	08 c0       	rjmp	.+16     	; 0x2d46 <vfprintf+0x29e>
    2d36:	f5 01       	movw	r30, r10
    2d38:	80 81       	ld	r24, Z
    2d3a:	91 81       	ldd	r25, Z+1	; 0x01
    2d3c:	bc 01       	movw	r22, r24
    2d3e:	80 e0       	ldi	r24, 0x00	; 0
    2d40:	90 e0       	ldi	r25, 0x00	; 0
    2d42:	42 e0       	ldi	r20, 0x02	; 2
    2d44:	50 e0       	ldi	r21, 0x00	; 0
    2d46:	a4 0e       	add	r10, r20
    2d48:	b5 1e       	adc	r11, r21
    2d4a:	a1 01       	movw	r20, r2
    2d4c:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <__ultoa_invert>
    2d50:	d8 2e       	mov	r13, r24
    2d52:	d2 18       	sub	r13, r2
    2d54:	8f e7       	ldi	r24, 0x7F	; 127
    2d56:	f8 2e       	mov	r15, r24
    2d58:	f1 22       	and	r15, r17
    2d5a:	f6 fe       	sbrs	r15, 6
    2d5c:	0b c0       	rjmp	.+22     	; 0x2d74 <vfprintf+0x2cc>
    2d5e:	5e ef       	ldi	r21, 0xFE	; 254
    2d60:	f5 22       	and	r15, r21
    2d62:	d9 14       	cp	r13, r9
    2d64:	38 f4       	brcc	.+14     	; 0x2d74 <vfprintf+0x2cc>
    2d66:	f4 fe       	sbrs	r15, 4
    2d68:	07 c0       	rjmp	.+14     	; 0x2d78 <vfprintf+0x2d0>
    2d6a:	f2 fc       	sbrc	r15, 2
    2d6c:	05 c0       	rjmp	.+10     	; 0x2d78 <vfprintf+0x2d0>
    2d6e:	8f ee       	ldi	r24, 0xEF	; 239
    2d70:	f8 22       	and	r15, r24
    2d72:	02 c0       	rjmp	.+4      	; 0x2d78 <vfprintf+0x2d0>
    2d74:	1d 2d       	mov	r17, r13
    2d76:	01 c0       	rjmp	.+2      	; 0x2d7a <vfprintf+0x2d2>
    2d78:	19 2d       	mov	r17, r9
    2d7a:	f4 fe       	sbrs	r15, 4
    2d7c:	0d c0       	rjmp	.+26     	; 0x2d98 <vfprintf+0x2f0>
    2d7e:	fe 01       	movw	r30, r28
    2d80:	ed 0d       	add	r30, r13
    2d82:	f1 1d       	adc	r31, r1
    2d84:	80 81       	ld	r24, Z
    2d86:	80 33       	cpi	r24, 0x30	; 48
    2d88:	19 f4       	brne	.+6      	; 0x2d90 <vfprintf+0x2e8>
    2d8a:	99 ee       	ldi	r25, 0xE9	; 233
    2d8c:	f9 22       	and	r15, r25
    2d8e:	08 c0       	rjmp	.+16     	; 0x2da0 <vfprintf+0x2f8>
    2d90:	1f 5f       	subi	r17, 0xFF	; 255
    2d92:	f2 fe       	sbrs	r15, 2
    2d94:	05 c0       	rjmp	.+10     	; 0x2da0 <vfprintf+0x2f8>
    2d96:	03 c0       	rjmp	.+6      	; 0x2d9e <vfprintf+0x2f6>
    2d98:	8f 2d       	mov	r24, r15
    2d9a:	86 78       	andi	r24, 0x86	; 134
    2d9c:	09 f0       	breq	.+2      	; 0x2da0 <vfprintf+0x2f8>
    2d9e:	1f 5f       	subi	r17, 0xFF	; 255
    2da0:	0f 2d       	mov	r16, r15
    2da2:	f3 fc       	sbrc	r15, 3
    2da4:	14 c0       	rjmp	.+40     	; 0x2dce <vfprintf+0x326>
    2da6:	f0 fe       	sbrs	r15, 0
    2da8:	0f c0       	rjmp	.+30     	; 0x2dc8 <vfprintf+0x320>
    2daa:	1e 15       	cp	r17, r14
    2dac:	10 f0       	brcs	.+4      	; 0x2db2 <vfprintf+0x30a>
    2dae:	9d 2c       	mov	r9, r13
    2db0:	0b c0       	rjmp	.+22     	; 0x2dc8 <vfprintf+0x320>
    2db2:	9d 2c       	mov	r9, r13
    2db4:	9e 0c       	add	r9, r14
    2db6:	91 1a       	sub	r9, r17
    2db8:	1e 2d       	mov	r17, r14
    2dba:	06 c0       	rjmp	.+12     	; 0x2dc8 <vfprintf+0x320>
    2dbc:	80 e2       	ldi	r24, 0x20	; 32
    2dbe:	90 e0       	ldi	r25, 0x00	; 0
    2dc0:	b3 01       	movw	r22, r6
    2dc2:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <fputc>
    2dc6:	1f 5f       	subi	r17, 0xFF	; 255
    2dc8:	1e 15       	cp	r17, r14
    2dca:	c0 f3       	brcs	.-16     	; 0x2dbc <vfprintf+0x314>
    2dcc:	04 c0       	rjmp	.+8      	; 0x2dd6 <vfprintf+0x32e>
    2dce:	1e 15       	cp	r17, r14
    2dd0:	10 f4       	brcc	.+4      	; 0x2dd6 <vfprintf+0x32e>
    2dd2:	e1 1a       	sub	r14, r17
    2dd4:	01 c0       	rjmp	.+2      	; 0x2dd8 <vfprintf+0x330>
    2dd6:	ee 24       	eor	r14, r14
    2dd8:	04 ff       	sbrs	r16, 4
    2dda:	0f c0       	rjmp	.+30     	; 0x2dfa <vfprintf+0x352>
    2ddc:	80 e3       	ldi	r24, 0x30	; 48
    2dde:	90 e0       	ldi	r25, 0x00	; 0
    2de0:	b3 01       	movw	r22, r6
    2de2:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <fputc>
    2de6:	02 ff       	sbrs	r16, 2
    2de8:	1d c0       	rjmp	.+58     	; 0x2e24 <vfprintf+0x37c>
    2dea:	01 fd       	sbrc	r16, 1
    2dec:	03 c0       	rjmp	.+6      	; 0x2df4 <vfprintf+0x34c>
    2dee:	88 e7       	ldi	r24, 0x78	; 120
    2df0:	90 e0       	ldi	r25, 0x00	; 0
    2df2:	0e c0       	rjmp	.+28     	; 0x2e10 <vfprintf+0x368>
    2df4:	88 e5       	ldi	r24, 0x58	; 88
    2df6:	90 e0       	ldi	r25, 0x00	; 0
    2df8:	0b c0       	rjmp	.+22     	; 0x2e10 <vfprintf+0x368>
    2dfa:	80 2f       	mov	r24, r16
    2dfc:	86 78       	andi	r24, 0x86	; 134
    2dfe:	91 f0       	breq	.+36     	; 0x2e24 <vfprintf+0x37c>
    2e00:	01 ff       	sbrs	r16, 1
    2e02:	02 c0       	rjmp	.+4      	; 0x2e08 <vfprintf+0x360>
    2e04:	8b e2       	ldi	r24, 0x2B	; 43
    2e06:	01 c0       	rjmp	.+2      	; 0x2e0a <vfprintf+0x362>
    2e08:	80 e2       	ldi	r24, 0x20	; 32
    2e0a:	f7 fc       	sbrc	r15, 7
    2e0c:	8d e2       	ldi	r24, 0x2D	; 45
    2e0e:	90 e0       	ldi	r25, 0x00	; 0
    2e10:	b3 01       	movw	r22, r6
    2e12:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <fputc>
    2e16:	06 c0       	rjmp	.+12     	; 0x2e24 <vfprintf+0x37c>
    2e18:	80 e3       	ldi	r24, 0x30	; 48
    2e1a:	90 e0       	ldi	r25, 0x00	; 0
    2e1c:	b3 01       	movw	r22, r6
    2e1e:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <fputc>
    2e22:	9a 94       	dec	r9
    2e24:	d9 14       	cp	r13, r9
    2e26:	c0 f3       	brcs	.-16     	; 0x2e18 <vfprintf+0x370>
    2e28:	da 94       	dec	r13
    2e2a:	f1 01       	movw	r30, r2
    2e2c:	ed 0d       	add	r30, r13
    2e2e:	f1 1d       	adc	r31, r1
    2e30:	80 81       	ld	r24, Z
    2e32:	90 e0       	ldi	r25, 0x00	; 0
    2e34:	b3 01       	movw	r22, r6
    2e36:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <fputc>
    2e3a:	dd 20       	and	r13, r13
    2e3c:	a9 f7       	brne	.-22     	; 0x2e28 <vfprintf+0x380>
    2e3e:	06 c0       	rjmp	.+12     	; 0x2e4c <vfprintf+0x3a4>
    2e40:	80 e2       	ldi	r24, 0x20	; 32
    2e42:	90 e0       	ldi	r25, 0x00	; 0
    2e44:	b3 01       	movw	r22, r6
    2e46:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <fputc>
    2e4a:	ea 94       	dec	r14
    2e4c:	ee 20       	and	r14, r14
    2e4e:	c1 f7       	brne	.-16     	; 0x2e40 <vfprintf+0x398>
    2e50:	43 ce       	rjmp	.-890    	; 0x2ad8 <vfprintf+0x30>
    2e52:	f3 01       	movw	r30, r6
    2e54:	66 81       	ldd	r22, Z+6	; 0x06
    2e56:	77 81       	ldd	r23, Z+7	; 0x07
    2e58:	cb 01       	movw	r24, r22
    2e5a:	2b 96       	adiw	r28, 0x0b	; 11
    2e5c:	e2 e1       	ldi	r30, 0x12	; 18
    2e5e:	0c 94 03 14 	jmp	0x2806	; 0x2806 <__epilogue_restores__>

00002e62 <strnlen_P>:
    2e62:	fc 01       	movw	r30, r24
    2e64:	05 90       	lpm	r0, Z+
    2e66:	61 50       	subi	r22, 0x01	; 1
    2e68:	70 40       	sbci	r23, 0x00	; 0
    2e6a:	01 10       	cpse	r0, r1
    2e6c:	d8 f7       	brcc	.-10     	; 0x2e64 <strnlen_P+0x2>
    2e6e:	80 95       	com	r24
    2e70:	90 95       	com	r25
    2e72:	8e 0f       	add	r24, r30
    2e74:	9f 1f       	adc	r25, r31
    2e76:	08 95       	ret

00002e78 <strnlen>:
    2e78:	fc 01       	movw	r30, r24
    2e7a:	61 50       	subi	r22, 0x01	; 1
    2e7c:	70 40       	sbci	r23, 0x00	; 0
    2e7e:	01 90       	ld	r0, Z+
    2e80:	01 10       	cpse	r0, r1
    2e82:	d8 f7       	brcc	.-10     	; 0x2e7a <strnlen+0x2>
    2e84:	80 95       	com	r24
    2e86:	90 95       	com	r25
    2e88:	8e 0f       	add	r24, r30
    2e8a:	9f 1f       	adc	r25, r31
    2e8c:	08 95       	ret

00002e8e <fputc>:
    2e8e:	0f 93       	push	r16
    2e90:	1f 93       	push	r17
    2e92:	cf 93       	push	r28
    2e94:	df 93       	push	r29
    2e96:	8c 01       	movw	r16, r24
    2e98:	eb 01       	movw	r28, r22
    2e9a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e9c:	81 ff       	sbrs	r24, 1
    2e9e:	1b c0       	rjmp	.+54     	; 0x2ed6 <fputc+0x48>
    2ea0:	82 ff       	sbrs	r24, 2
    2ea2:	0d c0       	rjmp	.+26     	; 0x2ebe <fputc+0x30>
    2ea4:	2e 81       	ldd	r18, Y+6	; 0x06
    2ea6:	3f 81       	ldd	r19, Y+7	; 0x07
    2ea8:	8c 81       	ldd	r24, Y+4	; 0x04
    2eaa:	9d 81       	ldd	r25, Y+5	; 0x05
    2eac:	28 17       	cp	r18, r24
    2eae:	39 07       	cpc	r19, r25
    2eb0:	64 f4       	brge	.+24     	; 0x2eca <fputc+0x3c>
    2eb2:	e8 81       	ld	r30, Y
    2eb4:	f9 81       	ldd	r31, Y+1	; 0x01
    2eb6:	01 93       	st	Z+, r16
    2eb8:	f9 83       	std	Y+1, r31	; 0x01
    2eba:	e8 83       	st	Y, r30
    2ebc:	06 c0       	rjmp	.+12     	; 0x2eca <fputc+0x3c>
    2ebe:	e8 85       	ldd	r30, Y+8	; 0x08
    2ec0:	f9 85       	ldd	r31, Y+9	; 0x09
    2ec2:	80 2f       	mov	r24, r16
    2ec4:	09 95       	icall
    2ec6:	89 2b       	or	r24, r25
    2ec8:	31 f4       	brne	.+12     	; 0x2ed6 <fputc+0x48>
    2eca:	8e 81       	ldd	r24, Y+6	; 0x06
    2ecc:	9f 81       	ldd	r25, Y+7	; 0x07
    2ece:	01 96       	adiw	r24, 0x01	; 1
    2ed0:	9f 83       	std	Y+7, r25	; 0x07
    2ed2:	8e 83       	std	Y+6, r24	; 0x06
    2ed4:	02 c0       	rjmp	.+4      	; 0x2eda <fputc+0x4c>
    2ed6:	0f ef       	ldi	r16, 0xFF	; 255
    2ed8:	1f ef       	ldi	r17, 0xFF	; 255
    2eda:	c8 01       	movw	r24, r16
    2edc:	df 91       	pop	r29
    2ede:	cf 91       	pop	r28
    2ee0:	1f 91       	pop	r17
    2ee2:	0f 91       	pop	r16
    2ee4:	08 95       	ret

00002ee6 <__ultoa_invert>:
    2ee6:	fa 01       	movw	r30, r20
    2ee8:	aa 27       	eor	r26, r26
    2eea:	28 30       	cpi	r18, 0x08	; 8
    2eec:	51 f1       	breq	.+84     	; 0x2f42 <__ultoa_invert+0x5c>
    2eee:	20 31       	cpi	r18, 0x10	; 16
    2ef0:	81 f1       	breq	.+96     	; 0x2f52 <__ultoa_invert+0x6c>
    2ef2:	e8 94       	clt
    2ef4:	6f 93       	push	r22
    2ef6:	6e 7f       	andi	r22, 0xFE	; 254
    2ef8:	6e 5f       	subi	r22, 0xFE	; 254
    2efa:	7f 4f       	sbci	r23, 0xFF	; 255
    2efc:	8f 4f       	sbci	r24, 0xFF	; 255
    2efe:	9f 4f       	sbci	r25, 0xFF	; 255
    2f00:	af 4f       	sbci	r26, 0xFF	; 255
    2f02:	b1 e0       	ldi	r27, 0x01	; 1
    2f04:	3e d0       	rcall	.+124    	; 0x2f82 <__ultoa_invert+0x9c>
    2f06:	b4 e0       	ldi	r27, 0x04	; 4
    2f08:	3c d0       	rcall	.+120    	; 0x2f82 <__ultoa_invert+0x9c>
    2f0a:	67 0f       	add	r22, r23
    2f0c:	78 1f       	adc	r23, r24
    2f0e:	89 1f       	adc	r24, r25
    2f10:	9a 1f       	adc	r25, r26
    2f12:	a1 1d       	adc	r26, r1
    2f14:	68 0f       	add	r22, r24
    2f16:	79 1f       	adc	r23, r25
    2f18:	8a 1f       	adc	r24, r26
    2f1a:	91 1d       	adc	r25, r1
    2f1c:	a1 1d       	adc	r26, r1
    2f1e:	6a 0f       	add	r22, r26
    2f20:	71 1d       	adc	r23, r1
    2f22:	81 1d       	adc	r24, r1
    2f24:	91 1d       	adc	r25, r1
    2f26:	a1 1d       	adc	r26, r1
    2f28:	20 d0       	rcall	.+64     	; 0x2f6a <__ultoa_invert+0x84>
    2f2a:	09 f4       	brne	.+2      	; 0x2f2e <__ultoa_invert+0x48>
    2f2c:	68 94       	set
    2f2e:	3f 91       	pop	r19
    2f30:	2a e0       	ldi	r18, 0x0A	; 10
    2f32:	26 9f       	mul	r18, r22
    2f34:	11 24       	eor	r1, r1
    2f36:	30 19       	sub	r19, r0
    2f38:	30 5d       	subi	r19, 0xD0	; 208
    2f3a:	31 93       	st	Z+, r19
    2f3c:	de f6       	brtc	.-74     	; 0x2ef4 <__ultoa_invert+0xe>
    2f3e:	cf 01       	movw	r24, r30
    2f40:	08 95       	ret
    2f42:	46 2f       	mov	r20, r22
    2f44:	47 70       	andi	r20, 0x07	; 7
    2f46:	40 5d       	subi	r20, 0xD0	; 208
    2f48:	41 93       	st	Z+, r20
    2f4a:	b3 e0       	ldi	r27, 0x03	; 3
    2f4c:	0f d0       	rcall	.+30     	; 0x2f6c <__ultoa_invert+0x86>
    2f4e:	c9 f7       	brne	.-14     	; 0x2f42 <__ultoa_invert+0x5c>
    2f50:	f6 cf       	rjmp	.-20     	; 0x2f3e <__ultoa_invert+0x58>
    2f52:	46 2f       	mov	r20, r22
    2f54:	4f 70       	andi	r20, 0x0F	; 15
    2f56:	40 5d       	subi	r20, 0xD0	; 208
    2f58:	4a 33       	cpi	r20, 0x3A	; 58
    2f5a:	18 f0       	brcs	.+6      	; 0x2f62 <__ultoa_invert+0x7c>
    2f5c:	49 5d       	subi	r20, 0xD9	; 217
    2f5e:	31 fd       	sbrc	r19, 1
    2f60:	40 52       	subi	r20, 0x20	; 32
    2f62:	41 93       	st	Z+, r20
    2f64:	02 d0       	rcall	.+4      	; 0x2f6a <__ultoa_invert+0x84>
    2f66:	a9 f7       	brne	.-22     	; 0x2f52 <__ultoa_invert+0x6c>
    2f68:	ea cf       	rjmp	.-44     	; 0x2f3e <__ultoa_invert+0x58>
    2f6a:	b4 e0       	ldi	r27, 0x04	; 4
    2f6c:	a6 95       	lsr	r26
    2f6e:	97 95       	ror	r25
    2f70:	87 95       	ror	r24
    2f72:	77 95       	ror	r23
    2f74:	67 95       	ror	r22
    2f76:	ba 95       	dec	r27
    2f78:	c9 f7       	brne	.-14     	; 0x2f6c <__ultoa_invert+0x86>
    2f7a:	00 97       	sbiw	r24, 0x00	; 0
    2f7c:	61 05       	cpc	r22, r1
    2f7e:	71 05       	cpc	r23, r1
    2f80:	08 95       	ret
    2f82:	9b 01       	movw	r18, r22
    2f84:	ac 01       	movw	r20, r24
    2f86:	0a 2e       	mov	r0, r26
    2f88:	06 94       	lsr	r0
    2f8a:	57 95       	ror	r21
    2f8c:	47 95       	ror	r20
    2f8e:	37 95       	ror	r19
    2f90:	27 95       	ror	r18
    2f92:	ba 95       	dec	r27
    2f94:	c9 f7       	brne	.-14     	; 0x2f88 <__ultoa_invert+0xa2>
    2f96:	62 0f       	add	r22, r18
    2f98:	73 1f       	adc	r23, r19
    2f9a:	84 1f       	adc	r24, r20
    2f9c:	95 1f       	adc	r25, r21
    2f9e:	a0 1d       	adc	r26, r0
    2fa0:	08 95       	ret

00002fa2 <_exit>:
    2fa2:	f8 94       	cli

00002fa4 <__stop_program>:
    2fa4:	ff cf       	rjmp	.-2      	; 0x2fa4 <__stop_program>
